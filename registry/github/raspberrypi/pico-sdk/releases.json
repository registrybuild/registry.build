[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/235925916","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/235925916/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/235925916/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/2.2.0","id":235925916,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884OD_Gc","tag_name":"2.2.0","target_commitish":"master","name":"2.2.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-07-29T04:37:46Z","updated_at":"2025-07-29T20:02:05Z","published_at":"2025-07-29T11:40:33Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/277391290","id":277391290,"node_id":"RA_kwDOE8B3884QiKe6","name":"pico-sdk-2.2.0.tar.gz","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/gzip","state":"uploaded","size":2483547,"digest":"sha256:2678fe2b176cf64a7f71cd91749fdf9134c8cf7ff84b7199dfe5ea0d6dba6fa4","download_count":1510,"created_at":"2025-07-29T11:42:57Z","updated_at":"2025-07-29T11:42:58Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/2.2.0/pico-sdk-2.2.0.tar.gz"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/2.2.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/2.2.0","body":"This is a minor release of the SDK with many bug fixes and documentation improvements, along with some new features.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A2.2.0+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A2.2.0+is%3Aclosed).\r\n\r\n### Board Support\r\n\r\nThe following board configurations have been added and may be specified via `PICO_BOARD`:\r\n\r\n* `adafruit_feather_rp2040_adalogger`\r\n* `adafruit_fruit_jam`\r\n* `eelectronicparts_picomini_2mb`\r\n* `eelectronicparts_picomini_4mb`\r\n* `eelectronicparts_picomini_8mb`\r\n* `eelectronicparts_picomini_16mb`\r\n* `olimex_rp2350_xl`\r\n* `olimex_rp2350_xxl`\r\n* `sparkfun_iotredboard_rp2350`\r\n* `sparkfun_xrp_controller`\r\n* `uugear_wittypi5_hat_plus`\r\n* `waveshare_rp2350_usb_a`\r\n* `weact_studio_rp2350b_core`\r\n* `wiznet_w5100s_evb_pico2`\r\n\r\nThe following board configurations have been modified:\r\n\r\n* `hellbender_2350A_devboard` - Updated for release version of the board\r\n\r\n### New Features\r\n\r\n#### Encrypted binaries\r\n\r\nSupport has been added for creating self-decrypting binaries, to make creating and using binaries\r\nwith secret/private code easier.\r\n\r\nA self-decrypting binary is an encrypted binary with an embedded bootloader that decrypts the main application into SRAM at runtime, and can be utilized via use of `pico_encrypt_binary` in your CMakeLists.txt file.\r\n\r\nSee the `hello_encrypted` and `hello_encrypted_mbedtls` examples, and section 4.2 of the [C/C++ SDK book](https://rpltd.co/pico-c-sdk) for more details.\r\n\r\nThere are two choices of embedded bootloader:\r\n\r\n1. A slower, hardened one with side-channel resistance\r\n2. A faster one based on Mbed TLS\r\n\r\nNOTE: This feature introduces a breaking change to the `pico_encrypt_binary` function which now requires an `IVFILE` in addition to the `AESFILE`. If you invoke it without an `IVFILE` (as was the case prior to this release) then you will get the CMake error `pico_encrypt_binary Function invoked with incorrect arguments`.\r\n\r\n#### Wi-Fi Firmware Partition Support\r\n\r\nSupport has been added for storing Wi-Fi firmware in a separate partition on RP2350 based boards such as Pico 2 W.\r\n\r\nThe main binary and the Wi-Fi firmware blob are kept as separate UF2s, to reduce the size of the main UF2 file. This avoids copying the whole Wi-Fi firmware blob on every UF2 upload.\r\n\r\nThis feature can be enabled by calling `pico_use_wifi_firmware_partition` in your CMakeLists.txt file. For more details see the documentation for that function in the [C/C++ SDK book](https://rpltd.co/pico-c-sdk)\r\n\r\n### New Library\r\n\r\n#### pico_status_led\r\n\r\nMost RP2-series microcontroller boards come with either a single-color LED, a multicolored WS2812 LED, or both. The `pico_status_led` library has been added to simplify dealing with both types of LED, and the complications of the single-color LED being attached to the Wi-Fi chip - not a regular GPIO - on boards like Pico W and Pico 2 W.\r\n\r\n* Added `status_led_init()`, `status_led_init_with_context()` and `status_led_deinit()` to perform initialization and cleanup\r\n* Added `status_led_supported()` to determine if the single-color status LED APIs are available. Note that the single-color status LED is the one specified via `PICO_DEFAULT_LED_PIN` or the one attached to the WiFi chip on Pico 2 or Pico 2 W\r\n* Added `status_let_set_state()` to turn the single-color status LED on and/off\r\n* Added `status_led_get_state()` to get the on/off state of the single-color status LED\r\n* Added `status_led_via_colored_state()` to determine if the single-color status LED API functions `status_let_set_state()` and `status_let_get_state()` can be used to control the multicolor status LED (as is the default on boards with a multicolor LED but no single-color LED)\r\n* Added `colored_status_led_supported()` to determine if the multicolor status LED APIs are available. Note that the multicolor status LED is the one specified via `PICO_DEFAULT_WS2812_PIN`\r\n* Added `colored_status_let_set_state()` to turn the multicolor status LED on and/off\r\n* Added `colored_status_led_get_state()` to get the on/off state of the single-color status LED\r\n* Added `colored_status_led_set_on_with_color()` to turn on the multicolored LED and set the color\r\n* Added `colored_status_led_get_on_color()` to get the multicolored LED \"on\" color\r\n* Note: pico_status_led is available on `PLATFORM=host` too, though does nothing\r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### hardware_dma\r\n\r\n* Added `channel_config_set_read_address_update_type()` and `channel_config_set_write_address_update_type()` to surface all four RP2350 address update modes (_none_, _increment_, _increment_by_two_, _decrement_). The method may be used on RP2040 to set either of the first two modes\r\n* Re-implemented `channel_config_set_read_increment` and `channel_config_set_write_increment` using these new methods. This is a minor functional change from the previous release, in that these methods now clear the additional configuration bit added in RP2350 that selects the new _increment_by_two_ and _decrement_ modes)\r\n* Prefer type name `dma_channel_config_t` over `dma_channel_config` for consistency with other libraries\r\n* Updated the documentation for `dma_channel_set_transfer_count()`, `dma_channel_configure()`, `dma_channel_transfer_from_buffer_now` and `dma_channel_transfer_tobuffer_now` to make it explicit that these methods take a 4 bit mode and 28 bit transfer_count on RP2350 vs a 32 bit transfer_count on RP2040\r\n* Added `dma_encode_transfer_count()`, `dma_encode_transfer_count_with_self_trigger()` and `dma_encode_endless_transfer_count()` as convenience methods to safely encode the `encoded_transfer_count` argument to these functions\r\n\r\n#### hardware_gpio\r\n\r\n* `gpio_acknowledge_irq` has been made inline to improve performance\r\n\r\n#### hardware_irq\r\n\r\n* Added Arm Cortex-M33 specific interrupt stubs (weak) that the application can override (`isr_memmanage`, `isr_busfault`, `isr_usagefault`, `isr_securefault`, `isr_debugmonitor`)\r\n* Added code to (re-)enable interrupts during runtime initialization on RP2350 (in case a previous bootloader stage disabled them)\r\n* Made `irq_has_handler()` available even when `PICO_DISABLE_SHARED_IRQ_HANDLERS=1`\r\n* Added `PICO_MINIMAL_STORED_VECTOR_TABLE`, which can be set to 1 to save space by only storing a minimal vector table in the binary. In this case, add any exception or IRQ handlers to the RAM vector table at runtime\r\n* Added `PICO_NUM_IRQ_HANDLERS`, which can be set to the number of IRQ handlers you want in either vector table. This can save space in the vector table if you know that you don't need higher numbered IRQs\r\n\r\n#### hardware_flash\r\n\r\n* `flash_range_erase`, `flash_range_program` and `flash_do_cmd` now preserve the QSPI pad state over flash access calls\r\n* Added `flash_start_xip()` to explicitly perform a first-time XIP setup (including initialising pads) similar to that which would be done when entering a flash binary via the bootrom. This is mostly useful for `no_flash` binaries that access an attached external flash\r\n\r\n#### hardware_pio\r\n\r\n* Allowed `pio_encode_sideset_opt(0, value)` which is a valid instruction encoding\r\n\r\n#### hardware_powman\r\n\r\n* Fixed a bug that made `powman_timer_set_1khz_tick_source_gpio()` and `powman_timer_enable_gpio_1hz_sync()` work incorrectly depending on which GPIO was used\r\n* Fixed a bug in `powman_get_power_state()` which meant that the state bits were returned inverted\r\n* Fixed a bug in `powman_timer_set_1khz_tick_source_lposc_with_hz()` and `powman_timer_set_1khz_tick_source_xosc_with_hz()` which caused them to mangle the low 3 decimal digits of the specified source frequency\r\n* Improved the validation and handling of various `powman_configure_wakeup_state()` state transitions\r\n\r\n#### hardware_rcp\r\n\r\n* Added `rcp_is_true()` which is safe on code that might run on RISC-V as opposed to `value == RCP_MASK_TRUE` which isn't\r\n\r\n#### hardware_watchdog\r\n\r\n* Added `watchdog_get_time_remaining_us()` to complement `watchdog_get_time_remaining_ms()`\r\n* Fixed `watchdog_get_time_remaining_ms()` to return milliseconds instead of microseconds\r\n\r\n#### pico_aon_timer\r\n\r\n* Fixed a bug in `aon_timer_get_time()` on RP2040 related to handling of Daylight Savings Time which meant that time could randomly be off by one hour\r\n\r\n#### pico_async_context\r\n\r\n* Fixed an incorrect assertion when using `pico_async_context_threadsafe_background` from both cores\r\n* Fixed a race condition in `async_context_execute_sync()` when using `pico_async_context_threadsafe_background` that might cause an assertion\r\n* Fixed a race condition in `async_context_deinit()` when using `pico_async_context_freertos` that might cause an assertion \r\n* Added support for FreeRTOS' `configSUPPORT_STATIC_ALLOCATION=1` when using `pico_async_context_freertos`\r\n\r\n#### pico_binary_info\r\n\r\n* Fixed compilation when used by C++ code\r\n\r\n#### pico_bootrom\r\n\r\n* Add `rom_pick_ab_partition_during_update` function to provide a wrapper around `rom_pick_ab_partition`, which is safe to call before calling `rom_explicit_buy` during a Flash Update boot or TBYB boot. During development, `rom_pick_ab_partition_during_update` was named `rom_pick_ab_update_partition`; backwards compatibility with this name isn't preserved\r\n \r\n#### pico_bootsel_via_double_reset\r\n\r\n* Fixed the implementation on RP2350\r\n\r\n#### pico_btstack\r\n\r\n* Added `CYBT_ERROR_ENABLED`, `CYBT_INFO_ENABLED`, `CYBT_DEBUG_ENABLED` for finer logging control\r\n* Fixed `btstack_cyw43_deinit()` to properly clean up the underlying `async_context` via a new `btstack_run_loop_async_context_deinit()` method\r\n* Moved the default location for Bluetooth-related flash storage backwards one flash sector from the end of flash so that it no longer uses the last sector of flash, which can be overwritten by the workaround for erratum RP2350-E10\r\n\r\n#### pico_clib_interface\r\n\r\n* Added a default weak implementation of `_get_entropy()` in `pico_newlib_interface` that returns -1 to avoid a linker warning. You can provide your own strong implementation if you wish to hook it up to `pico_rand`\r\n\r\n#### pico_crt0\r\n\r\n* Added preprocessor defines that can be used for advanced control of the early application startup code:\r\n    * Added `PICO_CRT0_NEAR_CALLS` which, when set to 1, allows the saving of a handful of bytes if the calls made from `pico_crt0` to the application (`main`, `runtime_init` etc.) are in a range <16M (e.g. from RAM->RAM or flash->flash)\r\n    * Added `PICO_CRT0_NO_RESET_SECTION` to allow wholesale replacement of the `.reset` section containing the earliest startup code, while keeping the vector table\r\n* Added preprocessor defines that can be used for advanced control of the contents of the embedded `IMAGE_DEF`\r\n    * Added `PICO_CRT0_INCLUDE_PICOBIN_VECTOR_TABLE_ITEM` if the user wants to override the default inclusion rules for the `VECTOR_TABLE` item\r\n    * Added `PICO_CRT0_INCLUDE_PICOBIN_ENTRY_POINT_ITEM` if the user wants to override the default inclusion rules for the `ENTRY_POINT` item\r\n* Changed spacer sections (`.stack` and `.heap`) to be allocatable by default. Added `PICO_CRT0_ALLOCATE_SPACERS` to control this\r\n\r\n#### pico_cyw43_arch\r\n\r\n* Enumerated possible error codes for `pico_cyw43_arch` methods in the documentation\r\n\r\n#### pico_cyw43_driver\r\n\r\n* Added new preprocessor define `PICO_CYW43_LOGGING_ENABLED`, which can be set to 0 to disable all `cyw43-driver` logging even in debug builds\r\n* Upgraded lib/cyw43-driver to [1.1.0](https://github.com/georgerobotics/cyw43-driver/releases/tag/v1.1.0)\r\n  * Note: this change has broken builds on GCC 6 and GCC 7 - please use a newer compiler version if you wish to use WiFi or Bluetooth\r\n\r\n#### pico_lwip\r\n\r\n* Upgraded lwIP to [2.2.1](https://savannah.nongnu.org/news/?id=10724)\r\n\r\n#### pico_mbedtls\r\n\r\n* Changed `makefsdata.py` slightly to allow it to recognize files that have been manually gzipped (e.g. \"mysite.css.gz\") and then send the proper Content-Encoding information in the response headers.\r\n* Upgraded Mbed TLS to [3.6.1](https://github.com/Mbed-TLS/mbedtls/releases/tag/mbedtls-3.6.1)\r\n\r\n#### pico_multicore\r\n\r\n* Fixed `multicore_lockout_` functions to be able to recover from a timeout situation (manifested as a problem with `flash_safe_execute()`)\r\n\r\n#### pico_runtime_init\r\n\r\n* Renamed `PICO_RUNTIME_SKIP_POST_CLOCK_RESETS` define to `PICO_RUNTIME_SKIP_INIT_POST_CLOCK_RESETS` which is consistent with all other similar `PICO_RUNTIME_` defines. This is a backwards incompatible change if you happened to be using it\r\n\r\n#### pico_stdio_usb\r\n\r\n* Added the following preprocessor defines to improve the flexibility of using `pico_stdio_usb` alongside direct usage of TinyUSB device mode by the application:\r\n    * `PICO_STDIO_USB_ENABLE_IRQ_BACKGROUND_TASK` - whether `pico_stdio_usb` provides a background task to call `tud_task()`\r\n    * `PICO_STDIO_USB_ENABLE_TINYUSB_INIT` - whether `pico_stdio_usb` calls `tusb_init()` during initialization\r\n    * `PICO_STDIO_USB_USE_DEFAULT_DESCRIPTORS` - whether `pico_stdio_usb` is responsible for providing the CDC descriptors\r\n* Added `stdio_usb_call_chars_available_callback()` to allow an application with direct usage of TinyUSB device mode, to call the `stdio_chars_available_callback` in response to CDC events\r\n\r\n#### pico_time\r\n\r\n* Fixed `alarm_pool_destroy()` to \"unclaim\" the correct hardware alarm\r\n\r\n#### pico_unique_id\r\n\r\n* Moved runtime caching of the unique id earlier in the C library initialization process, so that it is available to C++ constructors.\r\n* Added `PICO_UNIQUE_BOARD_ID_INIT_PRIORITY` to allow the user to control this further\r\n\r\n### Board Configuration\r\n\r\n* Added `CYW43_WL_GPIO_SMPS_PIN` to complement the pre-existing `CYW43_WL_GPIO_LED_PIN` and `CYW43_WL_GPIO_VBUS_PIN`\r\n* Reworked the mechanism used to make the board configuration headers have side effects on CMake variables, since the use of comments caused confusion:\r\n    * Now prefer \"pico_cmake_set(var, value)\" over \"// pico_cmake_set var = value\"\r\n    * Now prefer \"pico_cmake_set_default(var, value)\" over \"// pico_cmake_set_default var = value\"\r\n\r\n### Host Build\r\n\r\n* Added `pico_rand` library\r\n* Enabled `hardware_irq` stub library, which was present before but not available\r\n\r\n### Documentation\r\n\r\n* Many miscellaneous improvements\r\n* A new section for documentation on SDK CMake functions has been added to the [C/C++ SDK book](https://rpltd.co/pico-c-sdk)\r\n* Many missing CMake variables and preprocessor defines have been added; these variables have been added to the [C/C++ SDK book](https://rpltd.co/pico-c-sdk)\r\n* Add new section on Signing & Encrypting on RP2350 to the [C/C++ SDK book](https://rpltd.co/pico-c-sdk)\r\n* Extended and fixed the list of web links in the API documentation\r\n\r\n### Pioasm\r\n\r\n* Fixed C code generation for the `.mov_status irq set <n>` directive\r\n* Added `--version` option to print version information\r\n* Updated code generation to include the Pioasm version number as a comment in the generated files\r\n\r\n### Build\r\n\r\n* GCC 15 is now supported\r\n* Clang 20.1 is now supported\r\n* Some changes were made to build more cleanly with C99\r\n\r\n#### CMake Build\r\n\r\n* Improved handling of BIN/UF2/DIS/HEX output files when using Ninja. Ninja provides added functionality over Make which allows these files to be properly \"cleaned\" and regenerated if deleted.\r\n* The second argument of `pico_package_uf2_output` is now optional, and defaults to `0x10000000` (the start of flash)\r\n* Added `pico_ensure_load_map`, which ensures that `picotool seal` is invoked to add a `LOAD_MAP`, even when not signing or hashing\r\n* Added `pico_check_linker_script()`, which is called to warn of possible incompatibilities with custom linker scripts\r\n* Fixed default build type specification via `PICO_DEFAULT_BINARY_TYPE`\r\n* Fixed location of `.map` for certain Ninja builds\r\n* Added support for creating self-decrypting binaries\r\n* Added a warning when signing a binary with the provided \"example\" encryption keys\r\n\r\n#### Bazel Build\r\n\r\n* Updated Bazel to 8.1.0\r\n* Allowed the user to disable adding of the default compiler flags `opt`, `debug` and `fastbuild` compilation modes, so the user can add their own. This is controlled by `//bazel/config:PICO_COMPILATION_NO_OPT_ARGS`, `//bazel/config:PICO_COMPILATION_NO_DEBUG_ARGS`, `//bazel/config:PICO_COMPILATION_NO_FASTBUILD_ARGS`\r\n* Added `//bazel/config:PICO_TINYUSB_CONFIG` to allow the user to specify the location of their own `tusb_config.h`\r\n\r\n### New Examples\r\n\r\nThere are new examples in the [pico_examples](https://github.com/raspberrypi/pico-examples) repository.\r\n\r\nExample|Description\r\n---|---\r\n[hello_encrypted](https://github.com/raspberrypi/pico-examples/blob/master/encrypted/hello_encrypted) | Create a self-decrypting binary, using the hardened decryption stage. This should be secure against side channel attacks.\r\n[hello_encrypted_mbedtls](https://github.com/raspberrypi/pico-examples/blob/master/encrypted/hello_encrypted) | Create a self-decrypting binary, using the MbedTLS decryption stage. This is not secure against side channel attacks, so is fast but provides limited protection.\r\n[uart_boot](https://github.com/raspberrypi/pico-examples/blob/master/bootloaders/uart) | A bootloader which boots a separate RP2350 using the UART boot interface. See section 5.8 in the datasheet for more details, including the wiring requirements\r\n[partition_info](https://github.com/raspberrypi/pico-examples/blob/master/flash/partition_info) | Extract and enumerate partition information (address ranges, permissions, IDs, and names) from the partition table\r\n[hello_freertos_static_allocation](https://github.com/raspberrypi/pico-examples/blob/master/freertos/hello_freertos) | Demonstrates how to run FreeRTOS on two cores with static RAM allocation.\r\n[picow_ota_update](https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/ota_update) | A minimal OTA update server (RP235x Only). See the separate [README](https://github.com/raspberrypi/pico-examples/blob/master/pico_w/wifi/ota_update/README.md) for more details.\r\n[status_blink](https://github.com/raspberrypi/pico-examples/blob/master/status_led/status_blink) | Blink the onboard LED using the status_led API.\r\n[color_blink](https://github.com/raspberrypi/pico-examples/blob/master/status_led/color_blink) | Blink the onboard colored (WS2812) LED using the colored_status_led API if supported by the board\r\n\r\n### Modified Examples\r\n\r\nExample|Description\r\n---|---\r\n[hello_freertos_one_core](https://github.com/raspberrypi/pico-examples/blob/master/freertos/hello_freertos) | Demonstrates how to run FreeRTOS and tasks on one core (previously called `hello_freertos1`)\r\n[hello_freertos_two_cores](https://github.com/raspberrypi/pico-examples/blob/master/freertos/hello_freertos) | Demonstrates how to run FreeRTOS and tasks on two cores (previously called `hello_freertos2`).\r\n\r\n### Authors\r\n\r\nAlex Brudner,\r\nAlexey Vazhnov,\r\nAndrew Brock,\r\nAndrew Scheller,\r\nArmando Montanez,\r\nBogDan Vatra,\r\nBrad Nolan,\r\nCaleb Jamison,\r\nChristopher Chamberlain,\r\nDamien George,\r\nDan Halbert,\r\nDavid Dyck,\r\nDryw Wade,\r\neightycc,\r\nel-bert0,\r\nfadhil riyanto,\r\nGoran Miskovic,\r\nGraham Sanderson.\r\nJack Whitham,\r\nJeunese Payne,\r\nJoel Murphy,\r\nLuke Wren,\r\nMarek Küthe,\r\nMark Hermeling\r\nMarkus Gyger,\r\nMichael Brase,\r\nPatrick Plenefisch,\r\nPeter Harper,\r\nPhilip Howard,\r\nrbryson74,\r\nScott Shawcroft,\r\nSergio R. Caprile,\r\nSFE-Brudnerd,\r\nsonodima,\r\nTimo Kokkonen,\r\nTommy G,\r\nWilliam Vinnicombe,\r\nUUGear\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/235925916/reactions","total_count":21,"+1":1,"-1":0,"laugh":0,"hooray":10,"confused":0,"heart":10,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/200593058","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/200593058/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/200593058/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/2.1.1","id":200593058,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884L9M6i","tag_name":"2.1.1","target_commitish":"master","name":"2.1.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-02-18T23:55:53Z","updated_at":"2025-02-19T11:56:26Z","published_at":"2025-02-19T01:15:15Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/230457232","id":230457232,"node_id":"RA_kwDOE8B3884NvH-Q","name":"pico-sdk-2.1.1.tar.gz","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/gzip","state":"uploaded","size":2436748,"digest":null,"download_count":21078,"created_at":"2025-02-19T01:16:54Z","updated_at":"2025-02-19T01:16:56Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/2.1.1/pico-sdk-2.1.1.tar.gz"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/2.1.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/2.1.1","body":"This is a minor release of the SDK with many bug fixes and documentation improvements, along with some new features.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A2.1.1+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A2.1.1+is%3Aclosed).\r\n\r\n### Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `sparkfun_iotnode_lorawan_rp2350`\r\n- `waveshare_pico_cam_a`\r\n- `waveshare_rp2040_ble`\r\n- `waveshare_rp2040_eth`\r\n- `waveshare_rp2040_geek`\r\n- `waveshare_rp2040_matrix`\r\n- `waveshare_rp2040_pizero`\r\n- `waveshare_rp2040_power_management_hat_b`\r\n- `waveshare_rp2040_tiny`\r\n- `waveshare_rp2040_touch_lcd_1.28`\r\n- `waveshare_rp2350_eth`\r\n- `waveshare_rp2350_geek`\r\n- `waveshare_rp2350_lcd_0.96`\r\n- `waveshare_rp2350_lcd_1.28`\r\n- `waveshare_rp2350_one`\r\n- `waveshare_rp2350_plus_4mb`\r\n- `waveshare_rp2350_plus_16mb`\r\n- `waveshare_rp2350_tiny`\r\n- `waveshare_rp2350_touch_lcd_1.28`\r\n- `waveshare_rp2350_zero`\r\n\r\nThe following board configurations have been modified:\r\n\r\n- `adafruit_feather_rp2350` - Increased the XOSC startup delay\r\n- `seeed_xiao_rp2350` - Increased the default SPI clock divider\r\n- `waveshare_rp2040_lcd_0.96` - Renamed `WAVESHARE_RP2040_LCD_*` constants to `WAVESHARE_LCD_*`\r\n- `waveshare_rp2040_lcd_1.28` - Renamed `WAVESHARE_RP2040_LCD_*` constants to `WAVESHARE_LCD_*` \r\n\r\nNote: the default `PICO_XOSC_STARTUP_DELAY_MULTIPLIER` (unless specified by a board header file) has been changed from 1 to 6, meaning a delay of 6ms, as testing of the recommended crystal shows it can take up to this long to stabilize.\r\n\r\n### 200Mhz Clock Support for RP2040\r\n\r\nRP2040 has now been certified to run at a system clock of 200Mhz when using a regulator voltage of at least 1.15 volts.\r\n\r\nThe SDK by default performs clock setup for you before your program enters `main()`. If you haven't customized the clock configuration in any way, it will attempt to configure the system clock based on the value of `SYS_CLK_MHZ` (or `SYS_CLK_KHZ`/`SYS_CLK_HZ` if specified instead). Without further information from you, it can only do this for specific clock frequencies.\r\n\r\nIn prior versions of the SDK, only one specific clock frequency was defined per platform, 125Mhz for RP2040 and 150Mhz for RP2350, which also happen to be the default values for `SYS_CLK_MHZ`\r\n\r\nWith this version of the SDK, you can now select a 200Mhz clock for RP2040 simply by setting `SYS_CLK_MHZ=200` via preprocessor define. The regulator voltage will automatically be raised for you if necessary.\r\n\r\nWe may certify new frequencies for the different platforms in the future. The original `SYS_CLK_MHZ` defaults are left unchanged because not all programs would function correctly at a different system clock frequency. If, however, your project would always benefit from the fastest clock, you may now define `PICO_USE_FASTEST_SUPPORTED_CLOCK=1` via CMake variable or as a preprocessor define, and it will always use the fastest supported system clock frequency for the platform in the future. \r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### hardware_clocks\r\n\r\n* Corrected documentation and implementation of `clock_configure()` supporting the full range of clock dividers\r\n* Added `PICO_USE_FASTEST_SUPPORTED_CLOCK` and PLL configuration for 200Mhz on RP2040\r\n\r\n#### hardware_flash\r\n\r\n* Move internal flash helper function to run from RAM instead of flash, so it was supported in builds other than `COPY_TO_RAM`\r\n\r\n#### hardware_irq\r\n\r\n* Added significantly improved documentation around IRQ handlers when using both cores\r\n* Added `enable_interrupts()` and `disable_interrupts()` methods for when you don't care about saving or restoring the current interrupt state\r\n* Added `irq_has_handler()` method to tell if a handler is installed for a particular IRQ number\r\n\r\n#### hardware_pio\r\n\r\n* Fixed support for `WAIT gpio` with GPIO number >= 32\r\n\r\n#### pico_aon_timer\r\n\r\n* Added a 2 RTC-clock propagation delay at the end of `aon_timer_set_time_calendar()` on RP2040, such that reading back the time immediately afterwards will return the right value\r\n\r\n#### pico_bootrom\r\n\r\n* Added `rom_data_lookup_inline()` to complement `rom_data_lookup()`\r\n\r\n#### pico_btstack\r\n\r\n* Updated BTStack to 1.6.2 from 1.6.1\r\n* Updated Raspberry Pi BTStack license to cover Pico 2 W, Pico 2 WH, and RM2\r\n\r\n#### pico_cyw43_driver\r\n\r\n* Updated `cyw43_driver` to revision `c1075d4b`\r\n* Fixed rare issue when loading firmware\r\n\r\n#### pico_double\r\n\r\n* Major cleanup, with much improved documentation\r\n* Implemented the full complement of double conversion functions defined in `pico/double.h` across both RP2040 and RP2350 variants of `pico_double_pico`\r\n\r\n#### pico_float\r\n\r\n* Major cleanup, with much improved documentation\r\n* RP2350 `pico_float_pico_dcp` variant now enables `-msoft-float`, since if you've chosen to use DCP instead of VFP for single-precision floating-point, you probably don't want the compiler emitting inline VFP instructions either\r\n* Implemented the full complement of float conversion functions defined in `pico/float.h` across RP2040 and all RP2350 variants of `pico_float_pico`\r\n\r\n#### pico_flash\r\n\r\n* Fixed a build error when using FreeRTOS with `configSUPPORT_DYNAMIC_ALLOCATION=0`\r\n\r\n#### pico_lwip\r\n\r\n* Fixed build with `PPP_SUPPORT=1` when using `pico_lwip_nosys`\r\n\r\n#### pico_mbedtls\r\n\r\n* Added correct cleanup of RP2350 SHA256 state during `mbedtls_sha256_free()`\r\n\r\n#### pico_multicore\r\n\r\n* Added `multicore_lockout_victim_deinit()` \r\n* `multicore_reset_core1()` now marks Core 1 as de-initialized w.r.t.  `multicore_lockout_victim_` functions, allowing `multicore_lockout_victim_init()` to perform correctly after the reset\r\n\r\n#### pico_runtime_init\r\n\r\n* Added `SYS_CLK_VREG_VOLTAGE_AUTO_ADJUST` to indicate the voltage regular should be set to `SYS_CLK_VREG_VOLTAGE_MIN` during default clock setup in order to support the configured system clock frequency\r\n\r\n#### pico_sha256\r\n\r\n* Added `pico_sha256_cleanup()` to clean up from an in-progress SHA256 operation which was not completed via `pico_sha256_finish()`\r\n\r\n#### pico_stdio_usb\r\n\r\n* Allow user to override `CFG_TUD_CDC_RX_BUFSIZE`, \r\n`CFG_TUD_CDC_TX_BUFSIZE` and `CFG_TUD_CDC_EP_BUFSIZE` defines to increase performance\r\n\r\n#### pico_time\r\n\r\n* Fixed a rare race condition that could cause alarms/repeating timers to get \"lost\"\r\n\r\n#### TinyUSB\r\n\r\n* Updated TinyUSB to [0.18.0](https://github.com/hathach/tinyusb/releases/tag/0.18.0) from 0.17.0\r\n\r\n#### FreeRTOS\r\n\r\n* FreeRTOS support for RP2350 (Arm/RISC-V) has been upstreamed to https://github.com/FreeRTOS/FreeRTOS-Kernel, however is not yet in any official release, so you should use the latest from the `main` branch there **and** make sure you initialize the submodules as RP2350 support is actually in a submodule\r\n* If your project embeds `FreeRTOS_Kernel_import.cmake`, you should update to the latest version [here](https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/portable/ThirdParty/GCC/RP2040/FreeRTOS_Kernel_import.cmake) which works for both RP2040 and RP2350\r\n\r\n### Pioasm\r\n\r\n* Fixed encoding of `WAIT GPIO` with GPIO number >= 32\r\n* Python output now correctly emits `word(x)` for all PIO version 1 (RP2350) PIO instructions\r\n\r\n### SVD\r\n\r\n* Fixed access type for DMA `CHAN_ABORT` register to be read-write (with clear-on-write) for both RP2040 and RP2350\r\n\r\n### Build\r\n\r\n* GCC 14 is now supported \r\n* LLVM Embedded Toolchain For Arm 19.x is now supported\r\n* Multiple .pio files now supported in `pico_generate_pio_header()`\r\n* `.DIS` files for builds using LLVM/Clang on RP2350 now contain correct disassembly for VFP floating point instructions\r\n* Fixed some newer CMake version deprecation warnings\r\n* Added explicit license to `pico_sdk_import.cmake` as it is copied into external projects \r\n\r\n### Bazel Build\r\n\r\n* Updated LLVM/Clang toolchain to fix stack overflow issue with `fma()` related math functions\r\n\r\n### New Examples\r\n\r\nThese are in the [pico_examples](https://github.com/raspberrypi/pico-examples) repository.\r\n\r\n#### Added in 2.1.0 timeframe\r\n\r\nThese examples were added in the 2.1.0 timeframe but were not listed in the release notes then:\r\n\r\nExample|Description\r\n---|---\r\n[binary_info/blink_any](https://github.com/raspberrypi/pico-examples/tree/master/binary_info/blink_any) | Uses `bi_ptr` variables to create a configurable blink binary - see the separate [readme](https://github.com/raspberrypi/pico-examples/tree/master/binary_info/README.md) for mote details\r\n[binary_info/hello_anything](https://github.com/raspberrypi/pico-examples/tree/master/binary_info/hello_anything) | Uses `bi_ptr` variables to create a configurable hello_world binary - see the separate [readme](https://github.com/raspberrypi/pico-examples/tree/master/binary_info/README.md) for more details\r\n[i2c/slave_mem_i2c_burst](https://github.com/raspberrypi/pico-examples/tree/master/i2c/slave_mem_i2c) | i2c slave example where the slave implements a 256 byte memory. This version inefficiently writes each byte in a separate call to demonstrate read and write burst mode.\r\n[pico_w/wifi/picow_blink_slow_clock](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/blink) | Blinks the on-board LED (which is connected via the WiFi chip) with a slower system clock to show how to reconfigure communication with the WiFi chip at run time under those circumstances\r\n[pico_w/wifi/picow_blink_fast_clock](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/blink) | Blinks the on-board LED (which is connected via the WiFi chip) with a faster system clock to show how to reconfigure communication with the WiFi chip at build time under those circumstances\r\n[pico_w/wifi/picow_http_client](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/http_client) | Demonstrates how to make http and https requests\r\n[pico_w/wifi/picow_http_client_verify](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/http_client) | Demonstrates how to make a https request with server authentication\r\n[pico_w/wifi/freertos/picow_freertos_http_client_sys](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/freertos/http_client) | Demonstrates how to make a https request in NO_SYS=0 (i.e. full FreeRTOS integration)\r\n[universal/blink](https://github.com/raspberrypi/pico-examples/tree/master/universal/CMakeLists.txt#L137) | Same as the [blink](https://github.com/raspberrypi/pico-examples/tree/master/blink) example, but universal.\r\n[universal/nuke_universal](https://github.com/raspberrypi/pico-examples/tree/master/universal/CMakeLists.txt#L143) | Same as the [flash/nuke](https://github.com/raspberrypi/pico-examples/tree/master/flash/nuke) example, but universal. On RP2350 runs as a packaged SRAM binary, so is written to flash and copied to SRAM by the bootloader\r\n\r\n#### Added in 2.1.1 timeframe\r\n\r\nExample|Description\r\n---|---\r\n[pico_w/wifi/mqtt/picow_mqtt_client](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/mqtt) | Demonstrates how to implement a MQTT client application\r\n[pio/uart_pio_dma](https://github.com/raspberrypi/pico-examples/tree/master/pio/uart_pio_dma) | Send and receive data from a UART implemented using the PIO and DMA\r\n[usb/device/dev_multi_cdc](https://github.com/raspberrypi/pico-examples/tree/master/usb/device/dev_multi_cdc) | A USB CDC device example with two serial ports, one of which is used for standard SDK stdio. The example exposes two serial ports over USB to the host. The first port is used for stdio, and the second port is used for a simple echo loopback. You can connect to the second port and send some characters, and they will be echoed back on the first port while you will receive a `\"OK\\r\\n\"` message on the second port indicating that the data was received.\r\n\r\n### Authors\r\n\r\nThanks to the following for their contributions:\r\n\r\nSteven Conaway,\r\nDavid Dyck,\r\nd-c-d,\r\nLiam Fraser,\r\ngazzyt,\r\nHardy Griech,\r\nWu Haotian,\r\nDan Halbert,\r\nPeter Harper,\r\nPetr Hosek,\r\nRichard Hulme,\r\nHugoTro,\r\nJean Jonethal,\r\nOsman Karaketir,\r\nLesords,\r\nGregory Neverov,\r\nnilswiersma,\r\nMatthias Ringwald,\r\nGraham Sanderson,\r\nAndrew Scheller,\r\nMatias Silva,\r\nArkin Solomon,\r\nWilliam Vinnicombe,\r\nDryw Wade,\r\nwaveshare,\r\nLuke Wren,\r\nEnrico Zaghini","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/200593058/reactions","total_count":23,"+1":8,"-1":0,"laugh":0,"hooray":13,"confused":0,"heart":1,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/187177527","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/187177527/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/187177527/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/2.1.0","id":187177527,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884LKBo3","tag_name":"2.1.0","target_commitish":"master","name":"2.1.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-11-25T05:44:29Z","updated_at":"2024-11-25T18:22:46Z","published_at":"2024-11-25T05:55:49Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/208867614","id":208867614,"node_id":"RA_kwDOE8B3884McxEe","name":"pico-sdk-2.1.0.tar.gz","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/gzip","state":"uploaded","size":2416472,"digest":null,"download_count":8732,"created_at":"2024-11-25T05:57:25Z","updated_at":"2024-11-25T05:57:26Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/2.1.0/pico-sdk-2.1.0.tar.gz"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/2.1.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/2.1.0","body":"This is a minor release of the SDK with many bug fixes and documentation improvements, along with some new features.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A2.1.0+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A2.1.0+is%3Aclosed).\r\n\r\n### Board Support\r\n\r\nThe following board has been added and may be specified via `PICO_BOARD`:\r\n\r\n- `adafruit_feather_rp2350`\r\n- `datanoisetv_rp2350_dsp`\r\n- `hellbender_0001`\r\n- `machdyne_werkzeug`\r\n- `pico2_w`\r\n- `pimoroni_pico_plus2_w_rp2350`\r\n- `sparkfun_thingplus_rp2350`\r\n\r\nThe following board configurations have been modified:\r\n\r\n- `pimoroni_plasma2350` - corrected flash size, renamed SPICE to SPCE\r\n- `pimoroni_tiny2350` - corrected flash size\r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### Clock dividers in general\r\n\r\n* A variety of methods which set clock dividers using an integer part and a fractional part, which might have been `hardware_xxx_set_clkdiv_int_frac(uint16_t div_int, uint8_t div_frac)` have been modified to `hardware_xx_set_clkdiv_int_frac8(uint32_t div_int, uint8_t div_frac)`. This has been done for consistency and to make the APIs more resistant to hardware changes. The old APIs are preserved for backwards compatibility.\r\n* Previously, when converting from floating-point clock divider values to the fixed point use by the hardware, the floating-point value was rounded down. The new default (as configured by `PICO_CLKDIV_ROUND_NEAREST`) is to round to the _nearest_ achievable value. **This minor change in behavior was deemed better in general, which is why the default was changed**. You may set `PICO_CLKDIV_ROUND_NEAREST=0` to restore the previous beahvior by default (note that individual libraries have their own configuration values which can be used to change the behavior on a per-library basis).\r\n\r\n#### cmsis\r\n\r\n* Fixed exception renaming for RP2350\r\n\r\n#### hardware_adc\r\n\r\n* Added `PICO_ADC_CLKDIV_ROUND_NEAREST` for controlling rounding of floating-point clock dividers\r\n\r\n#### hardware_clocks\r\n\r\n\r\n* Corrected spelling of `PICO_CLOCK_AJDUST_PERI_CLOCK_WITH_SYS_CLOCK` to `PICO_CLOCK_ADJUST_PERI_CLOCK_WITH_SYS_CLOCK`. The former is still supported.\r\n* `vco_calc.py` now outputs `SYS_CLK_HZ` in the CMake output, which is required for `clock_get_hz(clk_sys)` to return the correct value\r\n* Renamed `clock_gpio_init_int_frac()` to `clock_gpio_init_int_frac8()` to be clear that it takes an 8-bit fraction; the old name is still supported.\r\n* Added `clock_gpio_init_int_frac16()` to specify the fraction with 16-bit precision (RP2350 has 16 bits of precision). This method can still be called on RP2040 in which case the low 8-bits are ignored.\r\n* Added `PICO_CLOCK_GPIO_CLKDIV_ROUND_NEAREST` for controlling rounding of floating-point clock dividers\r\n\r\n#### hardware_dma\r\n\r\n* Fixed `dma_channel_cleanup()` to disable the channel with the new DMA IRQs added in RP2350  \r\n\r\n#### hardware_exception\r\n\r\n* Added missing Cortex-M33 exception numbers\r\n\r\n#### hardware_flash\r\n\r\n* Prevented flash functions `flash_range_eraae()`, `flash_range_program()` and `flash_do_cmd()` from trashing the user's CS1 QMI configuration on RP2350\r\n* Fixed issue with `flash_safe_execute` on FreeRTOS SMP\r\n\r\n#### hardware_i2c\r\n\r\n* Added `i2c_write_burst_blocking` and `i2c_read_burst_blocking` to send/receive multiple bytes without intervening stops.\r\n* Fixed rare hang during `i2c_read_blocking`\r\n\r\n#### hardware_interp\r\n\r\n* Renamed `interp_add_accumulater()` to `interp_add_accumulator()`. The old incorrect spelling is still supported.\r\n\r\n#### hardware_pio\r\n\r\n* Added `pio_sm_set_pins64()`, `pio_sm_set_pins_with_mask64()` and `pio_sm_set_pindirs_with_mask64()` to allow setting of >32 pins.\r\n* Much improved documentation of how GPIO numbers > 32 are handled.\r\n* Fixed a bug in the use of a \"jmp pin\" > 32.\r\n* Fixed implementation of `sm_config_set_in_pin_count()`\r\n* Renamed `sm_config_set_clkdiv_int_frac()` to `sm_config_set_clkdiv_int_frac8()` to be clear that it takes an 8-bit fraction; the old name is still supported. Note that \"int\" part in the new method is 32-bit not 16-bit for consistency with other `clkdiv` methods.\r\n* Renamed `pio_calculate_clkdiv_from_float()` to `pio_calculate_clkdiv8_from_float()` to be clear that it produces an 8-bit fraction; the old name is still supported. Note that \"int\" part in the new method is 32-bit not 16-bit for consistency with other `clkdiv` methods.\r\n* Added `PICO_PIO_CLKDIV_ROUND_NEAREST` for controlling rounding of floating-point clock dividers\r\n  \r\n#### hardware_pwm\r\n\r\n* Renamed `pwm_config_set_clkdiv_int_frac()` to `pwm_config_set_clkdiv_int_frac4()` to be clear that it takes an 4-bit fraction; the old name is still supported. Note that \"int\" part in the new method is 32-bit not 8-bit for consistency with other `clkdiv` methods.\r\n* Added `PICO_PWM_CLKDIV_ROUND_NEAREST` for controlling rounding of floating-point clock dividers\r\n  \r\n#### hardware_timer\r\n\r\n* Fixed bug with alarms when using RP2350's new TIMER1\r\n* Corrected signature of `hardware_alarm_get_irq_num()` method added in SDK2.0.0. The variant that takes (and uses) a timer instance is called `timer_hardware_alarm_get_irq_num()`.\r\n\r\n#### pico_aon_timer\r\n\r\n* Added `aon_timer_start_calendar()`, `aon_timer_set_time_calendar()`, `aon_timer_get_time_calendar()` and `aon_timer_enable_alarm_calendar()` methods. These are equivalent to the non-`_calendar()` variants except they deal in calendar (date/) time, rather than time intervals. \r\n  \r\n  These new variants are preferred on RP2040 since otherwise a date/time conversion must be performed which pulls in a lot of C library code. For the same reason, the pre-existing variants are preferred on RP2350. This discrepancy results from the different hardware used for the AON timer on RP2040 and RP2350.\r\n \r\n#### pico_atomic\r\n\r\n* Fixed atomic use between core 0 and core 1\r\n\r\n#### pico_async_context\r\n\r\n* Fixed possible HardFault in `execute_sync()` on FreeRTOS\r\n\r\n#### pico_binary_info\r\n\r\n* `bi_Xpins_with_names()` macros now work correctly when pin numbers are not in order \r\n\r\n#### pico_bootrom\r\n\r\n* Added `rom_reset_usb_boot_extra()` which supports an \"activity\" GPIO pin > 32 and GPIO pin inversion (active low).\r\n* Bootrom methods that may write to flash are now protected with `flash_safe_execute()`. This affects `rom_flash_op()` and rom_explicit_buy()`\r\n\r\n#### pico_bootsel_via_double_reset\r\n\r\n* Fixed implementation on RP2350. Note the RP2350 bootrom also provides this support if enabled via OTP, however this library can be used when that is not enabled.\r\n\r\n#### pico_crt0\r\n\r\n* `__HeapLimit` is now correctly set by the default linker scripts again\r\n* Fixed linker option `-Wl,--print-memory-usage` showing 100% RAM used\r\n\r\n#### pico_clib_interface\r\n\r\n* Made Some small improvements to `picolibc` integration\r\n\r\n#### pico_cyw43_driver\r\n\r\n* Allow user configuration of Wi-Fi pins (including pin numbers >32) and SPI clock, including dynamic SPI clock configuration at runtime.\r\n* Updated `cye43_driver` to revision `cf924bb`\r\n* Renamed `cyw43_set_pio_clkdiv_int_frac()` to `cyw43_set_pio_clkdiv_int_frac8()` to be clear that it takes an 8-bit fraction; the old name is still supported. Note that \"int\" part in the new method is 32-bit not 16-bit for consistency with other `clkdiv` methods\r\n* Renamed `CYW43_PIO_CLOCK_DIV_FRAC8` to `CYW43_PIO_CLOCK_DIV_FRAC`. The old name is still supported\r\n* RISC-V is now supported\r\n* Added `PICO_BTSTACK_CYW43_MAX_HCI_PROCESS_LOOP_COUNT` configuration option, which can be used to prevent starvation in high frequency Bluetooth scenarios.\r\n\r\n#### pico_flash\r\n\r\n* Support serial flash with >8 byte unique id, using the last 8 bytes rather than the first\r\n\r\n#### pico_float\r\n\r\n* Added optimized add/sub/mul implemtations for Hazard3 for better floating point speed\r\n\r\n#### pico_malloc\r\n\r\n* Fixed deadlock in `calloc()` and `realloc()` with `picolibc`\r\n\r\n#### pico_platform\r\n\r\n* Added `pico_default_asm_volatile_goto()`\r\n\r\n#### pico_standard_binary_info\r\n\r\n* Added back `boot_stage2` binary info (missing in SDK 2.0.0)\r\n\r\n#### pico_stdio_uart\r\n\r\n* Fixed `stdio_flush()` when used with `stdio_uart_init_full()`\r\n* Fixed race condition in `stdio_set_chars_available_callback()`\r\n\r\n#### pico_stdio_usb\r\n\r\n* Fixed Windows issue with the device not showing up if the reset interface is disabled\r\n* Added support for resetting to USB boot with an activity LED pin > 32 or with the LED active low (on RP2350)\r\n* Added `PICO_STDIO_USB_RESET_BOOTSEL_FIXED_ACTIVITY_LED_ACTIVE_LOW` setting for RP2350\r\n\r\n#### pico_time\r\n\r\n* Fixed race condition which could cause alarms to be lost\r\n* Fixed continuous wakeup in `best_effort_wfe_or_timeout()` on RP2350\r\n\r\n#### pico_util\r\n\r\n* Added `datetime_to_tm()` and `tm_to_datetime()` for converting C library date/times to/from RP2040 RTC date/times\r\n* Added `pico_localtime_r()` and `pico_mktime()` for use by `pico_util` time conversion code. These methods cass the equivalent C library function, but are defined weakly so the user can provide their own\r\n\r\n#### TinyUSB\r\n\r\n* Updated TinyUSB to [0.17.0](https://github.com/hathach/tinyusb/releases/tag/0.17.0)\r\n\r\n### New Libraries\r\n\r\n#### boot_bootrom_headers\r\n\r\nSplit out the headers defining the bootrom interface - that might be used outside the SDK - from `pico_bootrom` which is focused on calling the bootrom from the SDK, and has non-trivial dependencies.\r\n\r\n#### hardware_xip_cache\r\n\r\nProvides XIP cache maintenance APIs:\r\n\r\n* RP2040 support for cache invalidation\r\n* RP2350 support for cache invalidation/cleaning/pinning\r\n\r\n### Miscellaneous\r\n\r\n* Numerous documentation corrections/improvements\r\n* Various build warnings fixed in exotic compiler configuratons\r\n* RP2350 A0/A1 silicon are no longer supported\r\n\r\n### Pioasm\r\n\r\n* Fixed disassembly of `mov rx_fifo, ...` and `mov ..., rx_fifo` instructions\r\n\r\n### Build\r\n\r\n* Madebuild dependent on any signature files or embedded-partition-table JSON \r\n* Added back `.hex` file output (lost in 2.0.0)\r\n* Made `PICO_FLASH_SIZE_BYTES` and `PICO_CYW43_SUPPORTED` if specified in CMake, correctly affect the compiled code.\r\n* Various corrections to library dependencies\r\n* Added `PANIC` and `AUTO_INIT_MUTEX` options to `pico_minimize_runtime()`\r\n* Made `boot_stage2` build reproducible (same binary if no source changes)\r\n\r\n#### Bazel Build\r\n\r\n* Add support for building on Raspberry Pi OS\r\n* More CMake build configuration options supported\r\n* Preview support for Wi-Fi builds\r\n\r\n### Authors\r\n\r\nThanks to the following for their contributions:\r\n\r\nanhnhancao,\r\nAndrew Featherstone,\r\nAndrew Burge,\r\nAndrew Scheller,\r\nArmando Montanez,\r\nCaleb Jamison,\r\nChris Boross,\r\nDave Roth,\r\nDavid Goffredo,\r\nDhiru Kholia,\r\nDranoel,\r\nDryw Wade,\r\nEarle F. Philhower,\r\nGiampiero Baggiani,\r\nGraham Sanderson,\r\nGregory Neverov,\r\nHugh Nixon,\r\niCMDdev,\r\ninc,\r\nIkko Eltociear Ashimine,\r\nJack Wilsdon,\r\njaguilar,\r\nKoji KITAYAMA,\r\nLiam Fraser,\r\nLuke Wren,\r\nMachdyne UG,\r\nMatt Bennett,\r\nMete Balcı,\r\nnewbrain,\r\nNhan Cao,\r\nNikhil Dabas,\r\nPeter Harper,\r\nPetr Hosek,\r\nPhilip Howard,\r\nScott Shawcroft,\r\nseesturm,\r\nStanislav Rubint,\r\nStefan Kerkmann,\r\nSylwester,\r\nTaylor Cramer,\r\ntheshteves,\r\nThomas Watson,\r\nTobias Simetsreiter,\r\nWilliam Vinnicombe,\r\nyh-sb\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/187177527/reactions","total_count":14,"+1":3,"-1":0,"laugh":0,"hooray":10,"confused":0,"heart":0,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/169292056","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/169292056/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/169292056/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/2.0.0","id":169292056,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884KFzEY","tag_name":"2.0.0","target_commitish":"master","name":"SDK 2.0.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-08-08T13:54:38Z","updated_at":"2024-11-10T21:25:06Z","published_at":"2024-08-08T14:59:22Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/184711853","id":184711853,"node_id":"RA_kwDOE8B3884LAnqt","name":"pico-sdk-2.0.0.tar.gz","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/gzip","state":"uploaded","size":2345905,"digest":null,"download_count":9967,"created_at":"2024-08-08T15:11:28Z","updated_at":"2024-08-08T15:11:30Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/2.0.0/pico-sdk-2.0.0.tar.gz"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/2.0.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/2.0.0","body":"This is a major release which adds support for the new RP2350 and for compiling RISC-V code in addition to Arm.\r\n\r\n* There is a lot of new functionality in the RP2350 microcontroller, it is recommended that you read the [RP2350 Datasheet](https://https://rptl.io/rp2350-datasheet)\r\n* There is a lot of new functionality in the SDK, it is also worth reading the [Raspberry Pi Pico C/C++ SDK](https://rptl.io/pico-c-sdk) book. This also includes documentation for RP2040 and RP2350 APIs, along with much more complete documentation of SDK `#defines` and `CMake` build variables.\r\n\r\n### Notices\r\n\r\n* **You should delete/recreate all build directories when upgrading from previous versions of the Raspberry Pi Pico SDK**\r\n\r\n### Major New Features\r\n\r\n#### Support for RP2350\r\n\r\nMany programs you have written for RP2040 (say a Raspberry Pi Pico) should work unmodified on RP2350 (say a Raspberry Pi Pico 2) even when compiled for RISC-V.\r\n\r\n* You can now specify `rp2350-arm-s` (Arm Secure) or `rp2350-riscv` (RISC-V) as well as the previous `rp2040` (default) and `host`.\r\n* Setting `PICO_BOARD=some_board` will now set `PICO_PLATFORM` if one is specified in `some_board.h` since most boards either use exclusively RP2040 or RP2350.\r\n* `PICO_PLATFORM` also supports `rp2350` but this gets replaced with the value `PICO_DEFAULT_RP2350_PLATFORM` which you can set in your environment or `CMakeLists.txt`. Many of the boards for RP2350 - including `pico2`- select `rp2350` as the `PICO_BOARD` to honour your preference.\r\n* NOTE: This release of the SDK does not support writing Arm Non-Secure binaries to run under the wing of an Arm Secure binary. This support will be added in a subsequent release.\r\n\r\n### Security and Code Signing\r\n\r\n* The RP2350 bootrom contains support for signed images and a variety of other security features. The SDK supports building signed images etc. as part of the CMake build. For further information, please read [RP2350 Datasheet](https://https://rptl.io/rp2350-datasheet) \"Bootrom Concepts\" section, and also the [Raspberry Pi Pico C/C++ SDK](https://rptl.io/pico-c-sdk) book for details on configuring your build to sign code. Note that signed code is only applicable to chips that have been locked down for security, but you can also hash your image for integrity checking.\r\n\r\n### Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `defcon32_badge`\r\n- `gen4_rp2350_24`\r\n- `gen4_rp2350_24ct`\r\n- `gen4_rp2350_24t`\r\n- `gen4_rp2350_28`\r\n- `gen4_rp2350_28ct`\r\n- `gen4_rp2350_28t`\r\n- `gen4_rp2350_32`\r\n- `gen4_rp2350_32ct`\r\n- `gen4_rp2350_32t`\r\n- `gen4_rp2350_35`\r\n- `gen4_rp2350_35ct`\r\n- `gen4_rp2350_35t`\r\n- `hellbender_2350A_devboard`\r\n- `ilabs_challenger_rp2350_bconnect`\r\n- `ilabs_challenger_rp2350_wifi_ble`\r\n- `melopero_perpetuo_rp2350_lora`\r\n- `phyx_rick_tny_rp2350`\r\n- `pico2`\r\n- `pimoroni_pga2350`\r\n- `pimoroni_pico_plus2_rp2350`\r\n- `pimoroni_plasma2350`\r\n- `pimoroni_tiny2350`\r\n- `seeed_xiao_rp2350`\r\n- `solderparty_rp2350_stamp`\r\n- `solderparty_rp2350_stamp_xl`\r\n- `sparkfun_promicro_rp2350`\r\n- `switchscience_picossci2_conta_base`\r\n- `switchscience_picossci2_dev_board`\r\n- `switchscience_picossci2_micro`\r\n- `switchscience_picossci2_rp2350_breakout`\r\n- `switchscience_picossci2_tiny`\r\n- `tinycircuits_thumby_color_rp2350`\r\n\r\n### New Libraries\r\n\r\n#### hardware_boot_lock (RP2350)\r\n\r\n* New library for accessing the BOOT locks from secure code.\r\n\r\n#### hardware_dcp (RP2350 Arm)\r\n\r\n* Contains assembler macros for individual DCP (Double Co-Processor) instructions\r\n* Contains assembler macros for canned instruction sequences for higher-level operations\r\n* `HAS_DOUBLE_COPROCESSOR` define indicates hardware support\r\n\r\n#### hardware_hazard3 (RP2350 RISC-V)\r\n\r\n* Assembler macros and inline functions for accessing Hazard3 extensions\r\n\r\n#### hardware_powman (RP2350)\r\n\r\n* Hardware APIs for the Power Management hardware.\r\n* `HAS_POWMAN_TIMER` define indicates hardware support.\r\n\r\n#### hardware_rcp (RP2350 Arm)\r\n\r\n* Contains inline functions and assembler macros for the RCP (Redundancy Co-Processor) instructions.\r\n* `HAS_REDUNDANCY_COPROCESSOR` define indicates hardware support.\r\n\r\n#### hardware_riscv_platform_timer (RP2350)\r\n\r\n* Hardware APIs for the RISC-V Platform Timer (which is also made available on Arm).\r\n\r\n#### hardware_sha256 (RP2350)\r\n\r\n* Hardware APIs for the SHA256 hashing hardware.\r\n\r\n#### hardware_ticks\r\n\r\n* Hardware APIs for the RP2350 tick generators.\r\n* On RP2040 the same API is used, but only one tick generator `TICK_WATCHDOG` is used, which is backed by the hardware in the RP2040 WatchDog hardware.\r\n\r\n#### pico_aon_timer\r\n\r\n* Abstraction for a hardware timer that is \"Always-On\", and can wake the processor up even from a low power state at a given time.\r\n* On RP2040 this uses the RTC.\r\n* On RP2350 this uses the Powman Timer.\r\n\r\n#### pico_atomic\r\n\r\n* Additional support for C11 atomic functions using spin lock number `PICO_SPINLOCK_ID_ATOMIC`.\r\n* On RP2040, all functions are implemented via spinlock.\r\n* On RP2350, only 64-bit or arbitrary-sized atomics are implemented via spin lock; the reset user processor exclusive/atomic instructions.\r\n  * Note on `ACTLR.EXTEXCLALL` must be set to 1 on each processor for the exclusive instructions to work. This is done automatically in the SDK by one of the per-core initializers in `pico_runtime_init`.\r\n* Included by `pico_runtime` by default.\r\n\r\n#### pico_boot_lock (RP2350)\r\n\r\n* Support for acquiring and releasing locks to prevent concurrent use of hardware resources used by bootrom functions.\r\n* Enabled via `PICO_BOOTROM_LOCKING_ENABLED` which defaults to 1 on RP2350.\r\n* Some bootrom functions use shared resources such as the single SHA256 or put hardware such as the OTP or XIP interface into a state that cannot execute concurrently with certain other code. The bootrom supports checking that the resource is owned, and this library turns that checking on.\r\n* The bootrom function wrappers in `pico_bootrom` call the functions in `pico_boot_lock` around affects bootrom functions, and thus will take and release locks if `PICO_BOOTROM_LOCKING_ENABLED=1`.\r\n* `NUM_BOOT_LOCKS` define indicates the number of boot locks (8 on 'RP2350', 0 on 'RP2040').\r\n\r\n#### pico_clib_interface\r\n\r\n* New library to encapsulate the interface between the SDK and the C library.\r\n* Supports\r\n* newlib (full).\r\n* picolibc (preview).\r\n* llvm-libc(preview).\r\n* Included by `pico_runtime` by default.\r\n\r\n#### pico_crt0\r\n\r\n* New library split out of `pico_standard_link` to encapsulate the earliest startup code before the runtime initialisation, and shutdown code after the runtime.\r\n* Repository for the default RP2040 and RP2350 linker scripts.\r\n* The flash size specified in the board header is now used when linking which is handy if you have >2M of flash and >2M of code/data.\r\n* **Note:** The linker scripts have changed since the previous release of the SDK. If you have custom linker scripts, it is recommended that you update them to match.\r\n  * In particular the new linker scripts include an \"embedded block\" which is required for a binary to boot on RP2350.\r\n  * __HeapLimit is now defined to be the end of RAM rather than the end of a `PICO_HEAP_SIZE` chunk, to better match the standard behaviour. `PICO_HEAP_SIZE` is the minimum heap size required, and space is required for it at link time. `sbrk` in the previous SDK ignored it anyway and used the end of RAM so there is no functional change there.\r\n* Included by `pico_runtime` by default\r\n\r\n#### pico_cxx_options\r\n\r\n* New library split out of `pico_standard_link` to configure C++ options.\r\n* Included by `pico_standard_link` by default.\r\n\r\n#### pico_platform_compiler\r\n\r\n* New library split out of `pico_platform` with the functions/macros related to the compiler.\r\n* Included by `pico_platform` by default.\r\n\r\n#### pico_platform_panic\r\n\r\n* New library split out of `pico_platform` with the panic function implementation.\r\n* Included by `pico_platform` by default.\r\n\r\n#### pico_platform_sections\r\n\r\n* New library split out of `pico_platform` with the section macros such as `__not_in_flash_func`.\r\n* Included by `pico_platform` by default.\r\n\r\n#### pico_runtime_init\r\n\r\n* Contains the standard initialisers that should get run before main, or per core.\r\n* Unlike in the previous SDK version where `runtime_init()` was a monolithic function which also called some `__preinit_array` initialisers, the new runtime_init library:\r\n* Separates each initialiser out individually, for say initialiser \"foo\".\r\n  * Defines `PICO_RUNTIME_INIT_FOO` which is a \"12345\" _line number_ ordering of the initialiser with respect to others.\r\n  * Declares `runtime_init_foo()` which is the actual initialiser.\r\n  * If `PICO_RUNTIME_SKIP_INIT_FOO` is not set, it adds the initialiser entry to call `runtime_init_foo()` before `main` (or per core initialisation).\r\n  * If `PICO_RUNTIME_NO_INIT_FOO` is not set, it adds the (weak) implementation of `runtime_init_foo()`.\r\n* This gives the user full control to customise runtime initialisation, either skipping or replacing parts.\r\n* Included by `pico_runtime` by default.\r\n\r\n#### pico_sha256\r\n\r\n* High level APIs for generating SHA256 hashes both synchronously and asynchronously\r\n\r\n#### pico_standard_binary_info\r\n\r\n* New library split out of `pico_standard_link` that adds the \"common\" binary info items to the binary.\r\n* Included by `pico_standard_link` by default.\r\n\r\n### Library Changes / Improvements\r\n\r\nNote that all hardware libraries now support the increased number of GPIOs on RP2350B in APIs that take a GPIO number; this is not noted for every library.\r\n\r\n#### pico_base\r\n\r\n* More error return codes were added to `pico/error.h`, mostly because these are the same values returned by RP2350 bootrom API functions, but also a number of new SDK APIs also return meaningful errors.\r\n* In `pico/types.h`, by popular demand, `absolute_time_t` now always defaults to `uint64_t` regardless of the type of build. You can set `PICO_OPAQUE_ABSOLUTE_TIME_T=1` to make it a struct in all build types.\r\n\r\n#### pico_binary_info\r\n\r\n* Now supports > 32 GPIO pins when `PICO_BINARY_INFO_USE_PINS_64=1` - this is defaulted for you based on the number of GPIOs on the board.\r\n\r\n#### hardware_adc\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_ADC` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_ADC` - the old define is still supported as a fallback.\r\n* `ADC_TEMPERATURE_CHANNEL_NUM` added since this value varies between RP2040 and RP2350.\r\n\r\n#### hardware_clocks\r\n\r\n* `set_sys_clock_` functions are now in `hardware/clocks.h`.\r\n* Clock configuration.\r\n* `PLL_COMMON_REFDIV` is deprecated in favour of `PLL_SYS_REFDIV` and `PLL_USB_REFDIV`.\r\n* `PLL_SYS_VCO_FREQ_HZ` is new and preferred over `PLL_SYS_VCO_FREQ_KHZ`.\r\n* `PLL_USB_VCO_FREQ_HZ` is new and preferred over `PLL_USB_VCO_FREQ_KHZ`.\r\n* `XOSC_HZ`, `SYS_CLK_HZ`, `USB_CLK_HZ` now added, and take preference over the still supported `XOSC_KHZ`, `SYS_CLK_KHZ`, and `USB_CLK_KHZ`.\r\n* `set_sys_clock_hz()` and `check_sys_clock_hz()` added.\r\n* `clock_configure_undivided()` and `clock_configure_int_divider()` for no divisor or a whole integer divider as the code doesn't require 64-bit arithmetic and thus saves space.\r\n* The `enum clock_index` no longer exists and has been replaced with `clock_num_t`. However, all clock functions now take `clock_handle_t` to allow for future enhancement. This is currently just an alias for `clock_num_t`\r\n* [vcocalc.py](src/rp2_common/hardware_clocks/scripts/vcocalc.py) can now be used to generate the `CMake` configuration for a particular clock setting.\r\n* The default system clock on RP2350 is 150Mhz.\r\n\r\n#### hardware_divider\r\n\r\n* Since the RP2350 processors have efficient divider instructions, RP2350 has no SIO HW Divider. Software versions of the `hardware_divider` functions are provided for RP2350.\r\n* `HAS_SIO_DIVIDER` define is now provided for you.\r\n\r\n#### hardware_dma\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_DMA` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_DMA` - the old define is still supported as a fallback.\r\n* Added `dma_get_irq_num()`function and `DMA_IRQ_NUM()` macro to return the process IRQ Number for the _n_ th DMA IRQ.\r\n* `NUM_DMA_IRQS` define is provided for you.\r\n* it is 2 on RP2040 and 4 on RP2350.\r\n\r\n#### hardware_exception\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_EXCEPTION` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_EXCEPTION` - the old define is still supported as a fallback.\r\n* Added RISC-V support.\r\n* exception numbers are processor exception `cause` numbers.\r\n* `exeception_[get|set]_priority()` are added for Arm.\r\n\r\n#### hardware_flash\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_FLASH` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_FLASH` - the old define is still supported as a fallback.\r\n* `flash_flush_cache()` is added.\r\n\r\n#### hardware_gpio\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_GPIO` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_GPIO` - the old define is still supported as a fallback.\r\n* The `enum gpio_function` no longer exists and has been replaced with `gpio_function_t`.\r\n* `gpio_xxx_masked()` functions now have a `gpio_xxx_masked64()` variant that takes a 64-bit mask of GPIO indexes.\r\n* `gpio_xxx_mask()` functions now have a `gpio_xxx_mask64()` variant that takes a 64-bit mask of GPIO indexes.\r\n* `gpio_get_all64()` added to read the state of >32 pins.\r\n* `gpio_put_all64()` added to write the state of >32 pins.\r\n* On Arm RP2350 GPIO Co-Processor instructions are used by default. This is controlled via `PICO_USE_GPIO_COPROCESSOR`.\r\n* `HAS_GPIO_COPROCESSOR` define indicates hardware support.\r\n\r\n#### hardware_i2c\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_I2C` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_I2C` - the old define is still supported as a fallback.\r\n* `PICO_DEFAULT_I2C_INSTANCE()` macro added which is equivalent to the pre-existing `i2c_default`\r\n* Added `I2C_NUM()`, `I2C_INSTANCE()`, `I2C_DREQ_NUM()` macros to abstract differences between platforms.\r\n* Fixed per-character timeouts.\r\n\r\n#### hardware_interp\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_INTERP` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_INTERP` - the old define is still supported as a fallback.\r\n\r\n#### hardware_irq\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_IRQ` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_IRQ` - the old define is still supported as a fallback.\r\n* `irq_xxx_mask_xxx()` functions now have a `gpio_xxx_mask_n_xxx()` variant that affects the _n_ th set of 32 IRQs\r\n* Expose `runtime_init_per_core_irq_priorities()` function\r\n* Added `irq_set_riscv_vector_handler()` function to replace code entries in the machine vector table.\r\n\r\n#### hardware_pio\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_PIO` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_PIO` - the old define is still supported as a fallback.\r\n* `PICO_PIO_VERSION` is used to determine whether new RP2350 functionality (`PICO_PIO_VERSION=1`) is supported. This is defaulted based on the platform.\r\n* `PICO_PIO_USE_GPIO_BASE` is used to determine whether support is enabled for GPIOs above 32. TThe default value is set based on the chip package.\r\n* Added `pio_sm_set_jmp_pin()`.\r\n* Added `pio_claim_free_sm_and_add_program()`, `pio_claim_free_sm_and_add_program_for_gpio_range()` and `pio_remove_program_and_unclaim_sm() to simplify finding and claiming a free PIO instance and state machine and installing programs.\r\n* Added `pio_get_irq_num()`function to return the process IRQ Number for the _n_ th PIO IRQ for a PIO instance.\r\n* Added `PIO_NUM()`, `PIO_INSTANCE()`, `PIO_IRQ_NUM()`, `PIO_DREQ_NUM()` and `PIO_FUNCSEL_NUM()` macros to abstract differences between platforms.\r\n* Added `sm_config_set_out_pin_base()` and `sm_config_set_out_pin_count()`.\r\n* Added `sm_config_set_in_pin_base()` and `sm_config_set_in_pin_count()`. Note the latter is only meaningful on `PICO_PIO_VERSION=1` which supports a limit.\r\n* Added `sm_config_set_set_pin_base()` and `sm_config_set_set_pin_count()`.\r\n* Added `sm_config_set_sideset_pin_base()` and `sm_config_set_sideset_pin_count()`.\r\n* For `PICO_PICO_VERSION=1` i.e. RP2350:\r\n* Added `pio_set_gpio_base()` and `pio_get_gpio_base()` to assign the PIO instance to pins 0-31 or 16-47.\r\n* Added `pio_set_sm_multi_mask_enabled()`.\r\n* Added `pio_clkdiv_restart_sm_multi_mask()`.\r\n* Added `pio_enable_sm_multi_mask_in_sync()`.\r\n* `NUM_PIO_IRQS` define is now provided for you (2 on both RP2040 and RP2350).\r\n\r\n#### hardware_pll\r\n\r\n* `PICO_PLL_VCO_MIN_FREQ_HZ` is new and now preferred to `PICO_PLL_VCO_MIN_FREQ_KHZ` or `PICO_PLL_VCO_MIN_FREQ_MHZ`.\r\n* `PICO_PLL_VCO_MAX_FREQ_HZ` is new and now preferred to `PICO_PLL_VCO_MAX_FREQ_KHZ` or `PICO_PLL_VCO_MAX_FREQ_MHZ`.\r\n* `PLL_RESET_NUM()` macro added to abstract differences between platforms.\r\n\r\n#### hardware_pwm\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_PWM` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_PWM` - the old define is still supported as a fallback.\r\n* `PICO_DEFAULT_PWM_INSTANCE()` macro added which is equivalent to the pre-existing `pwm_default`.\r\n* Added `PWM_SLICE_NUM()` and `PWM_DREQ_NUM()` macros to abstract differences between platforms.\r\n* Added `PWM_DEFAULT_IRQ_NUM()` since RP2350 supports 2 PWM IRQs to indicate which IRQ the pre-existing RP2040 functions use.\r\n* Added `pwm_set_irq0_enabled()`, `pwm_set_irq1_enabled()` and `pwm_irqn_set_slice_enabled()` to differentiate between the IRQs.\r\n* Added `pwm_set_irq0_mask_enabled()`, `pwm_set_irq1_mask_enabled()` and `pwm_irqn_set_mask_enabled()` to differentiate between the IRQs.\r\n* Added `pwm_get_irq0_status_mask()`, `pwm_get_irq1_status_mask()` and `pwm_irqn_get_status_mask()` to differentiate between the IRQs.\r\n* Added `pwm_pwm_force_irq0()`, `pwm_force_irq1()` and `pwm_irqn_force()` to differentiate between the IRQs.\r\n\r\n#### hardware_resets\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_RESETS` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_RESETS` - the old define is still supported as a fallback.\r\n* `reset_block()` is renamed to `reset_block_mask()` but the old name is still supported.\r\n* `unreset_block()` is renamed to `unreset_block_mask()` but the old name is still supported.\r\n* `unreset_block_wait()` is renamed to `unreset_block_mask_wait_blocking()` but the old name is still supported.\r\n* `reset_block_num()`, `unreset_block_num()`, `unreset_block_num_wait_blocking()` and `reset_unreset_block_num_wait_blocking()` added to reset or unreset a single block by `reset_num_t` index.\r\n\r\n#### hardware_rtc\r\n\r\n* Note this library is only available on RP2040, since the RP2350 lacks the RTC hardware.\r\n* There is a similar always-on timer in `hardware_powman`.\r\n* A common API for both RP2040 and RP2350 is provided in `pico_aon_timer`.\r\n* `HAS_RP2040_RTC` define is now provided for you.\r\n\r\n#### hardware_spi\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_SPI` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_SPI` - the old define is still supported as a fallback.\r\n* `PICO_DEFAULT_SPI_INSTANCE()` macro added which is equivalent to the pre-existing `spi_default`.\r\n* Added `SPI_NUM()`, `SPI_INSTANCE()`, `SPI_DREQ_NUM()` macros to abstract differences between platforms.\r\n* Fixed per-character timeouts.\r\n\r\n#### hardware_sync\r\n\r\n* `restore_interrupts_from_disabled()` is added as a variant for `restore_interrupts()` which **must** be paired with a matching `save_and_disable_interrupts()`. This is the common usage and produces smaller/faster code on RISC-V.\r\n* Spinlock functionality has been delegated to a separate hardware_sync_spinlock library, which is included for you.\r\n* hardware_sync_spin_lock.\r\n* Whilst RP2350 has the same SIO spin locks as RP2040, due to Errata RP2350-E2, these are not used by default.\r\n  * Instead, a software implementation using atomic instructions is used.\r\n  * You can set `PICO_USE_SW_SPIN_LOCKS=0` to disable this if you know you aren't affected by RP2350-E2 and want to use the h/w spin locks instead.\r\n* Added `spin_try_lock_unsafe()` function.\r\n\r\n#### hardware_timer\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_TIMER` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_TIMER` - the old define is still supported as a fallback.\r\n* RP2350 supports two timer instances.\r\n* `PICO_DEFAULT_TIMER_INSTANCE()` macro added based on `PICO_DEFAULT_TIMER` (0 on RP2040, 0/1 on RP2350).\r\n* Added `TIMER_NUM()`, `TIMER_INSTANCE()`, `TIMER_ALARM_NUM_FROM_IRQ()` and `TIMER_ALARM_NUM_FROM_IRQ()` macros to abstract differences between platforms\r\n* Added `hardware_alarm_get_irq_num()` to get the processor IRQ number for a particular alarm on a timer.\r\n* New versions of all functions added with a `timer_` prefix and a timer instance passed as the first argument. The pre-existing functions call these with the default timer instance.\r\n* `NUM_TIMERS` has been renamed to `NUM_ALARMS` as that's what it was (4).\r\n* `NUM_GENERIC_TIMERS` has been added which is 1 on RP2040 and 2 on RP2350.\r\n\r\n#### hardware_uart\r\n* `PARAM_ASSERTIONS_ENABLED_UART` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_UART` - the old define is still supported as a fallback.\r\n* `PICO_DEFAULT_UART_INSTANCE()` macro added which is equivalent to the pre-existing `uart_default`.\r\n* Added `UART_NUM()`, `UART_INSTANCE()`, `UART_DREQ_NUM()`, `UART_IRQ_NUM()`, `UART_CLOCK_NUM()`, `UART_RESET_NUM()` macros to abstract differences between platforms.\r\n* `uart_set_irq_enables()` is renamed to `uart_set_irqs_enabled()` but the old name is still supported.\r\n* `uart_get_dreq()` is renamed to `uart_get_dreq_num()` but the old name is still supported.\r\n* `uart_get_reset_num()` is added.\r\n* Incorrect baud setting for certain frequencies was fixed.\r\n\r\n#### hardware_vreg\r\n\r\n* `vreg_disable_voltage_limit()` added to allow full range of DVDD voltage selection on RP2350\r\n\r\n#### hardware_watchdog\r\n* `PARAM_ASSERTIONS_ENABLED_WATCHDOG` is renamed to `PARAM_ASSERTIONS_ENABLED_HARDWARE_WATCHDOG` - the old define is still supported as a fallback.\r\n* Added `watchdog_disable()`.\r\n* `watchdog_get_count()` is renamed to `watchdog_get_time_remaining_ms()` but the old name is still supported.\r\n#### hardware_xosc\r\n\r\n* `XOSC_HZ` is new and now preferred to `XOSC_KHZ`.\r\n\r\n#### hardware_regs\r\n\r\n* `enum irq_num_[rp2040|rp2350]` (typedef-ed as `irq_num_t`) added with the constants from `inctrl.h`. Note these remain as #defines when included from assembly.\r\n* `enum dreq_num_[rp2040|rp2350]` (typedef-ed as `dreq_num_t`) added with the constants from `dreq.h`. Note these remain as #defines when included from assembly.\r\n\r\n#### hardware_structs\r\n\r\n* `enum bus_ctrl_perf_counter_[rp2040|rp2350]` (typedef-ed as `bus_ctrl_perf_counter_t`) added.\r\n* **Note** enum bus_ctrl_per_counter no longer exists.\r\n* `enum clock_num_[rp2040|rp2350]` (typedef-ed as `clock_num_t`) added.\r\n* **Note** enum clock_index no longer exists.\r\n* `enum clock_dest_num_[rp2040|rp2350]` (typedef-ed as `clock_dest_num_t`) added.\r\n* `enum gpio_function_[rp2040|rp2350]` (typedef-ed as `gpio_function_t`) added.\r\n* **Note** enum gpio_function no longer exists.\r\n* `enum gpio_function1_[rp2040|rp2350]` (typedef-ed as `gpio_function1_t`) added (for QSPI bank).\r\n* `enum reset_num_[rp2040|rp2350]` (typedef-ed as `reset_num_t`) added.\r\n* `enum tick_gen_num_rp2350` (typedef-ed as `reset_num_t`) added.\r\n* Various naming consistencies have been fixed.\r\n  * `iobank0.h` -> `io_bank0.h`, `iobank0_hw` -> `io_bank0_hw` - shims are provided for the old versions.\r\n  * `ioqspi.h` -> `io_qspi0.h`, `ioqspi_hw` -> `io_qspi_hw` - shims are provided for the old versions.\r\n  * `padsbank0.h` -> `pads_bank0.h`, `padsbank0_hw` -> `pads_bank0_hw`  - shims are provided for the old versions.\r\n  * `padsqspi.h` -> `pads_qspi.h`, `padsqspi_hw` -> `pads_qspi_hw` - shims are provided for the old versions.\r\n  * `bus_ctrl.h` -> `busctrl.h`, `bus_ctrl_hw` -> `busctrl_hw` (don't ask! but `hardware_struct` headers now match `hardware_regs` names at least!).\r\n\r\n#### boot_stage2\r\n\r\n* There are now separate implementations for RP2040 and RP2350.\r\n* A `boot_stage2` is not needed on RP2350, but one can be included via the define `PICO_EMBED_XIP_SETUP=1`.\r\n\r\n#### cmsis\r\n\r\n* CMSIS headers are updated to CMSIS 6.1\r\n* Device headers `RP2040.h` and `RP2350.h` are generated, and now include basic hardware structures as per the latest `SVDConv` defaults.\r\n\r\n#### pico_bootrom\r\n\r\n* New RP2350 bootrom APIs added.\r\n* `rom_xxx()` inline function wrappers added for all `xxx()` ROM functions.\r\n* Additional `rom_get_boot_random()` and `rom_add_flash_runtime_partition()` for RP2350 which use underlying bootrom functionality but aren't just wrapper functions.\r\n\r\n### pico_bt_stack\r\n\r\n* BTStack updated to 1.6.1 from 1.5.6\r\n* Lots of additions, fixes and changes, for the full list see the [change log](https://github.com/bluekitchen/btstack/blob/master/CHANGELOG.md)\r\n\r\n#### pico_cyw43_arch\r\n\r\n* `PARAM_ASSERTIONS_ENABLED_CYW43_ARCH` is renamed to `PARAM_ASSERTIONS_ENABLED_PICO_CYW43_ARCH` - the old define is still supported as a fallback.\r\n* lib/cyw43-driver has been updated to the latest version\r\n* Mostly bug fixes.\r\n* Adds WPA3 support for Pico W. To use this, use CYW43_AUTH_WPA3_SAE_AES_PSK or CYW43_AUTH_WPA3_WPA2_AES_PSK instead of CYW43_AUTH_WPA2_AES_PSK when connecting to wifi with cyw43_arch_wifi_connect_timeout_ms or cyw43_arch_enable_ap_mode.\r\n\r\n#### pico_cyw43_driver\r\n\r\n* `cyw43_driver` updated to commit `faf36381`.\r\n* Added support for changing the clock speed of the SPI connection to the Wi-Fi chip. See `CYW43_PIO_CLOCK_DIV_INT`, `CYW43_PIO_CLOCK_DIV_FRAC` and `CYW43_PIO_CLOCK_DIV_DYNAMIC`.\r\n\r\n#### pico_divider\r\n\r\n* Functions that returned a quotient and divider in a `uint64_t` or `int64_t` now return a `divmod_result_t` - the signed-ness of the value before was meaningless anyway, and the compiler will still return it as a 64-bit value.\r\n* Extra functions in `pico/divider.h` now implemented for `pico_set_divider_implemtation(compiler)` as well as for RP2350 which has no RP2040 hardware divider.\r\n\r\n#### pico_double\r\n\r\n* `pico_set_double_implementation(pico)` (the default) now uses the Double Co-Processor (DCP) for double-precision floating-point arithmetic on Arm RP2350, and highly optimised Arm VFP implementations of the double-precision scientific functions, for much improved performance over the C library versions.\r\n* Extra functions exposed from `pico` implementation\r\n  * `int2double()`\r\n  * `uint2double()`\r\n  * `int642double()`\r\n  * `uint642double()`\r\n  * `double2uint()`\r\n  * `double2uint64()`\r\n* Extra functions exposed from `pico` implementation for Arm RP2350 only\r\n  * `ddiv_fast()`\r\n  * `sqrt_fast()`\r\n  * `mla()`\r\n\r\n#### pico_float\r\n\r\n* `pico_set_float_implementation(pico)` (the default) now uses the compiler for single-precision floating point arithmetic on Arm RP2350 since the processor has VFP instructions, but includes custom optimised scientific functions also using the VFP.\r\n* `pico_set_diouble_implementation(pico_dcp)` uses the Double Co-Processor (DCP) for single-precision floating point arithmetic on Arm RP2350, and highly optimised Arm M33 implementations of the single-precision scientific functions, for much improved performance over the C library versions. This library is intended for those situations where you cannot (or don't want to) use the VFP instructions.\r\n* Extra functions exposed from `pico` implementation.\r\n  * `int2float()`\r\n  * `uint2float()`\r\n  * `int642float()`\r\n  * `uint642float()`\r\n  * `float2uint()`\r\n  * `float2uint64()`\r\n  * `float2uint_z()`\r\n  * `float2uint64_z()`\r\n* Extra functions exposed from `pico` implementation for Arm R2350 only.\r\n  * `float2fix64_z()`\r\n  * `fdiv_fast()`\r\n  * `fsqrt_fast()`\r\n\r\n#### pico_lwip\r\n\r\n* Update lib/lwip to 2.2.0\r\n* There have been some bugs fixed, and some new features were added (most notably full Address Conflict Detection support).\r\n\r\n#### pico_mbedtls\r\n\r\n* Update to lib/mbedtls to 2.28.8 from 2.28.1\r\n* This release of Mbed TLS provides bug fixes and minor enhancements. This release includes fixes for security issues.\r\n* Added support for hardware SHA256 calculation on RP2350\r\n* To use this in mbedtls you need to define MBEDTLS_SHA256_ALT in your mbedtls_config.h. Use LIB_PICO_SHA256 to check if hardware SHA256 is supported and fallback to defining MBEDTLS_SHA256_C for the software SHA256 calculation.\r\n\r\n#### pico_multicore\r\n\r\n* Added `SIO_FIFO_IRQ_NUM()` to get the IRQ number for the FIFO IRQ on a particular core, since RP2040 and RP2350 are different.\r\n* **note** that RP2350 uses the same IRQ number on both cores, so if you have IRQ handlers for both cores, you should share the same function and check the core number in the IRQ handler. This strategy of course works on RP2040 too.\r\n* Added `multicore_fifo_push_blocking_inline()` and `multicore_fifo_pop_blocking_inline()`.\r\n* Added `multicore_doorbell_` functions for the new intercore Doorbells on RP2350.\r\n* `NUM_DOORBELLS` is provided which is 8 on RP2350, 0 on RP2040.\r\n\r\n#### pico_rand\r\n\r\n* Added the hardware TRNG as an additional entropy source on RP2350.\r\n* `HAS_RP2350_TRNG` indicates hardware support.\r\n* Many, but not all, of the pre-existing entropy sources are disabled on RP2350 in favour of using the TRNG.\r\n\r\n#### pico_runtime\r\n\r\n* A shadow of its former self, it now just:\r\n* aggregates other default libraries required for getting to `main()` and having the C runtime work.\r\n* provides low level `runtime_run_initializers()` and `runtime_run_per_core_initializers()` which run initializers from the `__preinit_array`.\r\n* The `runtime_init()` entrypoint has moved to `pico_clib_interface`.\r\n\r\n#### pico_standard_link\r\n\r\n* Much previously included functionality has been split out into `pico_crt0`, `pico_cxx_options` and `pico_standard_binary_info`.\r\n* What remains is entirely focused on setting up the linker configuration.\r\n* **Finally** fixed a bug where changes to the linker script did not cause a relink.\r\n\r\n#### pico_stdio\r\n\r\n* Some internal reorganisation to separate functionality between here and `pico_clib_interface`.\r\n* Added `PICO_STDIO_SHORT_CIRCUIT_CLIB_FUNCS` to control whether `printf`, `vprintf`, `puts`, `putchar` and `getchar` go thru the C library (thus usually pulling in all the FILE handling APIs resulting in huge bloat - but more sensible behaviour when mixing say `printf` with `fprintf(stdout` etc.) This defaults to 0, i.e. \"do short-circuit the c lib\" which was the behaviour in the previous SDK version.\r\n* Add support for Segger RTT stdio.\r\n* Implemented `stdio_flush()` for UART and USB CDC.\r\n* Added `stdio_deinit_all()` and individual `stdio_deinit_xxx` functions.\r\n\r\n#### pico_stdio_usb\r\n\r\n* Now supports MS OS2 descriptors by default. See `PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_MS_OS_20_DESCRIPTOR`.\r\n* `PICO_STDIO_USB_ENABLE_RESET_VIA_VENDOR_INTERFACE` and `PICO_STDIO_USB_ENABLE_RESET_VIA_BAUD_RATE` are now both supported even if the user is using `tinyusb_device` directly themselves.\r\n* Bug that could cause deadlock with FreeRTOS SMP and printing from IRQs fixed.\r\n\r\n#### pico_stdlib\r\n\r\n* `pico/stdlib.h` no longer declares `set_sys_clock_` functions. You must include `hardware/clocks.h` explicitly.\r\n\r\n#### pico_time\r\n\r\n* `remaining_alarm_time_ms()`, `remaining_alarm_time_us()`, `alarm_pool_remaining_alarm_time_ms()` and `alarm_pool_remaining_alarm_time_us()` were added.\r\n* Implementation of alarm pools completely rewritten for much lower overhead, jitter and higher throughput in the majority of cases. The pairing heap has been replaced with a linked list which is faster and uses less memory in most normal use cases too.\r\n* **NOTE** `fire_if_past` now always fires asynchronously in the same way as a normal timeout (rather than being called synchronously during the call). Thus `alarm_pool_add_alarm_at_force_in_context` is now no different to `alarm_pool_add_alarm_at`.\r\n* New `pico_timer_adapter` abstraction added so `pico_time` could be backed by other types of timer hardware in the future, and so `pico_time` no longer depends directly on a `hardware_timer` abstraction which simplifies `PICO_PLATFORM=host`.\r\n* Support for two hardware timer blocks on RP2350.\r\n  * `alarm_pool_timer_t` abstraction added to represent the time \"counter\" backing the alarm pool.\r\n  * `alarm_pool_t` now has an associated `alarm_pool_timer_t` instance.\r\n  * `alarm_pool_create_on_timer()` is added to create an alarm pool on a specific alarm pool timer.\r\n  * `alarm_pool_get_default_timer()` is added which is used when not explicitly passing an alarm pool timer. `PICO_DEFAULT_TIMER` selects which timer instance is the default (0 on `RP2040`, 0/1 on `RP2350`).\r\n* `PARAM_ASSERTIONS_ENABLED_TIME` is renamed to `PARAM_ASSERTIONS_ENABLED_PICO_TIME` - the old define is still supported as a fallback.\r\n* `check_timeout_fn` now takes two parameters. This was likely unused outside the `pico_time` implementation anyway.\r\n* Expose `runtime_init_default_alarm_pool()` function.\r\n\r\n#### pico_util\r\n\r\n* `time_to_datetime()`, `datetime_to_time()` and `datetime_to_str()` functions relating to `hardware_rtc` are now guarded by `PICO_INCLUDE_RTC_DATETIME` which defaults to 0 on RP2350, since RP2350 does not include the RP2040 RTC hardware.\r\n* `timespec_to_ms()`, `timespec_to_us()`, `ms_to_timespec()`, and `ms_to_timespec()` added to convert between C-library high-resolution time offset and millisecond or microsecond precision offsets.\r\n* `queue_try_remove()`, `queue_try_remove()`, `queue_remove_blocking()` and `queue_peek_blocking()` now support passing NULL as the element out pointer if the caller doesn't care.\r\n\r\n#### tinyusb\r\n\r\n* TinyUSB moved from release 0.15.0 to commit `42326428` (0.17.0 WIP)\r\n* Note that `bsp/board.h` has been renamed by TinyUSB to `bsp/board_api.h` the SDK adds a re-director header for you for now.\r\n* Support added for RP2350. Requires a custom memcpy implementation in the rp2040 tinusb driver, as unaligned 32 bit access to device memory causes a hard fault on the Cortex M33.\r\n* See the [TinyUSB changelog]https://github.com/hathach/tinyusb/blob/master/docs/info/changelog.rst) for full details.\r\n\r\n#### pioasm\r\n\r\n* `pioasm` now supports the full RP2350 PIO (`PICO_PIO_VERSION=1`) instruction set\r\n* Additionally, it supports many new directives. See the [RP2350 Datasheet](https://rptl.io/rp2040-datasheet) for full details.\r\n* **Note** that currently not all output formats support `PICO_PIO_VERSION=1` as they are community provided.\r\n\r\n### FreeRTOS integration\r\n\r\n* You should use this repo for the current FreeRTOS-Kernel supporting RP2040 and RP2350: https://github.com/raspberrypi/FreeRTOS-Kernel\r\n\r\n* Dropped legacy support for `configNUM_CORES` for the correct `configNUMBER_OF_CORES`, which is 2 for SMP support and 1 for non-SMP support.\r\n* RP2350_ARM_NTZ (non-trust-zone), and RP2350_RISC-V are available as well as an updated RP2040 version; the former two basically give you the same \"single privilege/security domain\" experience as on RP2040.\r\n* SMP and non-SMP support (along with running FreeRTOS on either core) are available for all.\r\n* A nasty, but rare pre-existing RP2040 deadlock (especially with TinyUSB printf from IRQs) has been fixed on all three versions; If you were setting configSUPPORT_PICO_SYNC_INTEROP=0 as a workaround, you should no longer do so. Generally, if you are using printf (or anything else using SDK locking primitives) then you do really want configSUPPORT_PICO_SYNC_INTEROP=1 for the best concurrency\r\n* FreeRTOS on RISC-V does not currently support IRQ preemption (which is a Hazard3 only feature anyway).\r\n\r\n### Backwards Incompatibilities\r\n\r\nThere are a handful of minor backwards incompatibilities, that hopefully should affect very few people.\r\n\r\n* `boot_picbin` library is now called `boot_picobin_headers`.\r\n* `boot picoboot` library is now called `boot_picoboot_headers`.\r\n* `boot_uf2` library is now called `boot_uf2_headers`.\r\n* `pico_base` library is now called `pico_base_headers`.\r\n* `pico/error.h` - `PICO_ERROR_GENERIC` is now `-1` because there were pre-existing APIs that returned -1 for any error. `PICO_ERROR_TIMEOUT` is now `-2` (they are swapped from their previous values).\r\n* `pico_stdlib`\r\n  * `pico/stdlib.h` no longer declares `set_sys_clock_` functions. You must include `hardware/clocks.h` explicitly.\r\n* `pico_time`\r\n  * `check_timeout_fn` now takes two parameters. This was likely unused outside the `pico_time` implementation anyway.\r\n  * `fire_if_past` now always fires asynchronously in the same way as a normal timeout (rather than being called synchronously during the call). Thus `alarm_pool_add_alarm_at_force_in_context` is now no different to `alarm_pool_add_alarm_at`.\r\n* `hardware_clocks`\r\n  * The `enum clock_index` no longer exists and has been replaced with `clock_num_t`. However, all clock functions now take `clock_handle_t` to allow for future enhancement. This is currently just an alias for `clock_num_t`.\r\n* `hardware_structs`\r\n  * `enum bus_ctrl_perf_counter_[rp2040|rp2350]` (typedef-ed as `bus_ctrl_perf_counter_t`) added.\r\n    * **Note** enum bus_ctrl_per_counter no longer exists.\r\n  * `enum clock_num_[rp2040|rp2350]` (typedef-ed as `clock_num_t`) added.\r\n    * **Note** enum clock_index no longer exists.\r\n  * `enum clock_dest_num_[rp2040|rp2350]` (typedef-ed as `clock_dest_num_t`) added.\r\n  * `enum gpio_function_[rp2040|rp2350]` (typedef-ed as `gpio_function_t`) added.\r\n    * **Note** enum gpio_function no longer exists.\r\n* `hardware_timer`\r\n  * `NUM_TIMERS` has been renamed to `NUM_ALARMS` as that's what it was (4).\r\n\r\n### Build\r\n\r\n* There are major CMake build changes. If you are maintaining your own non-CMake build, you will have to make extensive changes by looking at the differences yourself.\r\n* All SDK headers are now \"system\" includes.\r\n* You can now specify `rp2350-arm-s` (Arm Secure) and `rp2350-riscv` (RISC-V) as well as the previous `rp2040` (default) and `host`.\r\n* Setting `PICO_BOARD=some_board` will now set `PICO_PLATFORM` if one is specified in `some_board.h` since most boards either use exclusively RP2040 or RP2350.\r\n* `PICO_PLATFORM` also supports `rp2350` but this gets replaced with the value `PICO_DEFAULT_RP2350_PLATFORM` which you can set in your environment or `CMakeLists.txt`. Many of the boards for RP2350 - including `pico2`- select `rp2350` as the `PICO_BOARD` to honour your preference.\r\n* `PICO_PLATFORM`, `PICO_BOARD` and other variables will be taken from your environment if not otherwise defined now retain their value after the first CMake invocation. i.e. a pre-existing CMake build configuration directory will not change based on your environment if you re-run `cmake`.\r\n* `PICO_BOARD=pico_w` is no longer an odd child out requiring a CMake board file; support for CYW43 Wi-Fi can now be specified in the board header.\r\n* `ELF2UF2` is now replaced by use of `picotool` which will be built as part of your build if not installed on the system. See the [picotool GitHub repository](https://github.com/raspberrypi/picotool) for more details on building and installing it locally.\r\n* `PICO_GCC_TRIPLE` can now be a ';' separated list as well as a single value.\r\n* NOTE: This release of the SDK does not support writing Arm Non-Secure binaries to run under the wing of an Arm Secure binary. This support will be added in a subsequent release.\r\n* Compiler support is widening - we always recommend a recent version.)\r\n* All recent GCCs are supported on Arm. (GCC 14 has not yet been tested for full support though).\r\n* Very recent GCCs are required on RISC-V due to the bleeding-edge nature of some of the processor instructions.\r\n* Recent LLVM Embedded Toolchain for ArmRM versions are supported on Arm.\r\n* Pigweed LLVM is supported for Arm.\r\n* For further details see the [Raspberry Pi Pico C/C++ SDK](https://rptl.io/pico-c-sdk) book.\r\n* Bazel may be used to build the SDK on Arm. See the [README](bazel/README.md). Note that the Bazel build is community-provided and maintained.\r\n\r\n### Building Documentation\r\n\r\n* The `docs` build target to build the HTML code documentation now builds a set of documentation peculiar to your particular `PICO_PLATFORM` setting.\r\n* `PICO_PLATFORM=combined_docs` can be used (just for building docs) to build the combined documentation for both RP2040 and RP2350.\r\n\r\n### Fixed Issues\r\n\r\nYou can see a list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A2.0.0+is%3Amerged), and a list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A2.0.0+is%3Aclosed).\r\n\r\nNote these only include public changes made since version 1.5.1. The majority of new code and collateral fixes for the previously unannounced RP2350 were developed and committed in private and delivered as a single \"squashed\" commit.\r\n\r\n### New Examples\r\n\r\nThere are in the [pico_examples](https://github.com/raspberrypi/pico-examples) repository. \r\n\r\nExample|Description\r\n---|---\r\n[enc_bootloader](https://github.com/raspberrypi/pico-examples/tree/master/bootloaders/encrypted) | A bootloader which decrypts binaries from flash into SRAM.\r\n[hello_dcp](https://github.com/raspberrypi/pico-examples/tree/master/dcp/hello_dcp) | Use the double-precision coprocessor directly in assembler.\r\n[dvi_out_hstx_encoder](https://github.com/raspberrypi/pico-examples/tree/master/dvi_out_hstx_encoder) `RP2350`| Use the HSTX to output a DVI signal with 3:3:2 RGB\r\n[runtime_flash_permissions](https://github.com/raspberrypi/pico-examples/tree/master/flash/runtime_flash_permissions) | Demonstrates adding partitions at runtime to change the flash permissions\r\n[hello_freertos](https://github.com/raspberrypi/pico-examples/tree/master/freertos/hello_freertos) | Examples that demonstrate how run FreeRTOS and tasks on 1 or 2 cores.\r\n[multicore_doorbell](https://github.com/raspberrypi/pico-examples/tree/master/multicore/multicore_doorbell) | Claims two doorbells for signaling between the cores. Counts how many doorbell IRQs occur on the second core and uses doorbells to coordinate exit.\r\n[hello_otp](https://github.com/raspberrypi/pico-examples/tree/master/otp/hello_otp) | Demonstrate reading and writing from the OTP on RP2350, along with some of the features of OTP (error correction and page locking).\r\n[picow_httpd](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/httpd) | Runs a LWIP HTTP server test app\r\n[picow_freertos_ntp_client_socket](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/freertos/ntp_client_socket) | Connects to an NTP server using the LwIP Socket API with FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode.\r\n[pico_freertos_httpd_nosys](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/freertos/httpd) | Runs a LWIP HTTP server test app under FreeRTOS in NO_SYS=1 mode.\r\n[pico_freertos_httpd_sys](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/freertos/httpd) | Runs a LWIP HTTP server test app under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode.\r\n[squarewave_div_sync](https://github.com/raspberrypi/pico-examples/tree/master/pio/squarewave) | Generates a square wave on three GPIOs and synchronises the divider on all the state machines\r\n[quadrature_encoder_substep](https://github.com/raspberrypi/pico-examples/tree/master/pio/quadrature_encoder_substep) | High resolution speed measurement using a standard quadrature encoder\r\n[hello_sha256](https://github.com/raspberrypi/pico-examples/tree/master/sha/sha256) | Demonstrates how to use the pico_sha256 library to calculate a checksum using the hardware in rp2350\r\n[mbedtls_sha256](https://github.com/raspberrypi/pico-examples/tree/master/sha/mbedtls_sha256) | Demonstrates using the SHA-256 hardware acceleration in mbedtls\r\n[boot_info](https://github.com/raspberrypi/pico-examples/tree/master/system/boot_info) | Demonstrate how to read and interpret sys info boot info.\r\n[rand](https://github.com/raspberrypi/pico-examples/tree/master/system/rand) | Demonstrate how to use the pico random number functions.\r\n[hello_universal](https://github.com/raspberrypi/pico-examples/tree/master/universal/hello_universal) | The obligatory Hello World program for Pico (USB and serial output). On RP2350 it will reboot to the other architecture after every 10 prints.\r\n[nuke_universal](https://github.com/raspberrypi/pico-examples/tree/master/universal/CMakeLists.txt#L107) | Same as the [nuke](https://github.com/raspberrypi/pico-examples/tree/master/flash/nuke) binary, but universal. On RP2350 runs as a packaged SRAM binary, so is written to flash and copied to SRAM by the bootloader\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/169292056/reactions","total_count":58,"+1":7,"-1":0,"laugh":0,"hooray":13,"confused":0,"heart":16,"rocket":16,"eyes":6}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/107707260","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/107707260/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/107707260/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.5.1","id":107707260,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884Ga3t8","tag_name":"1.5.1","target_commitish":"master","name":"SDK 1.5.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-06-13T22:27:33Z","updated_at":"2023-06-15T17:55:37Z","published_at":"2023-06-14T02:39:53Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/112935743","id":112935743,"node_id":"RA_kwDOE8B3884Gu0M_","name":"sdk-1.5.1-html-doc.zip","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/zip","state":"uploaded","size":11042324,"digest":null,"download_count":2848,"created_at":"2023-06-15T17:55:29Z","updated_at":"2023-06-15T17:55:37Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/1.5.1/sdk-1.5.1-html-doc.zip"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.5.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.5.1","body":"This release is largely a bug fix release, however it also makes Bluetooth support official and adds some new libraries and functionality.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.5.1+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A1.5.1+is%3Aclosed).\r\n\r\n### Board Support\r\n\r\nThe following board has been added and may be specified via `PICO_BOARD`:\r\n\r\n- `pololu_3pi_2040_robot`\r\n\r\nThe following board configurations have been modified:\r\n\r\n- `adafruit_itsybitsy_rp2040` - corrected the mismatched `PICO_DEFAULT_I2C` bus number (favors the breadboard pins not the stemma connector).\r\n- `sparkfun_thingplus` - added WS2812 pin config. \r\n\r\n### Library Changes/Improvements\r\n\r\n#### hardware_dma\r\n\r\n* Added `dma_channel_cleanup()` function that can be used to clean up a dynamically claimed DMA channel after use, such that it won't be in a surprising state for the next user, making sure that any in-flight transfer is aborted, and no interrupts are left pending.\r\n\r\n#### hardware_spi\r\n\r\n* The `spi_set_format`, `spi_set_slave`, `spi_set_baudrate` functions that modify the configuration of an SPI instance, now disable the SPI while changing the configuration as specified in the data sheet.\r\n\r\n#### pico_async_context\r\n\r\n* Added `user_data` member to `async_when_pending_worker_t` to match `async_at_time_worker_t`.\r\n\r\n#### pico_cyw43_arch\r\n\r\n* Added `cyw43_arch_disable_sta_mode()` function to complement `cyw43_arch_enable_sta_mode()`.\r\n* Added `cyw43_arch_disable_ap_mode()` function to complement `cyw43_arch_enable_ap_mode()`.\r\n\r\n#### pico_stdio_usb\r\n\r\n* The 20-character limit for descriptor strings `USBD_PRODUCT` and `USBD_MANUFACTURER` can now be extended by defining \r\n  `USBD_DESC_STR_MAX`.\r\n* `PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS` is now supported in the build as well as compiler definitions; if it is set in the build, it is added to the compile definitions.\r\n\r\n#### pico_rand\r\n\r\n- Fixed poor randomness when `PICO_RAND_ENTROPY_SRC_BUS_PERF_COUNTER=1`.\r\n\r\n#### PLL and Clocks\r\n\r\n- The `set_sys_clock_pll` and `set_sys_clock_khz` methods now reference a pre-processor define `PICO_CLOCK_AJDUST_PERI_CLOCK_WITH_SYS_CLOCK`. If set to `1`, the peripheral clock is updated to match the new system clock, otherwise the preexisting behavior (of setting the peripheral clock to a safe 48Mhz) is preserved.\r\n- Support for non-standard crystal frequencies, and compile-time custom clock configurations:\r\n  - The new define `XOSC_KHZ` is used in preference to the preexisting `XOSC_MHZ` to define the crystal oscillator frequency. This value is now also correctly plumbed through the various clock setup functions, such that they behave correctly with a crystal frequency other than 12Mhz. `XOSC_MHZ` will be automatically defined for backwards compatibility if `XOSC_KHZ` is an exact multiple of 1000 Khz. Note that either `XOSC_MHZ` or `XOSC_KHZ` may be specified by the user, but not both.\r\n  - The new define `PLL_COMMON_REFDIV` can be specified to override the default reference divider of 1.\r\n  - The new defines `PLL_SYS_VCO_FREQ_KHZ`, `PLL_SYS_POSTDIV1` and `PLL_SYS_POSTDIV2` are used to configure the system clock PLL during runtime initialization. These are defaulted for you if `SYS_CLK_KHZ=125000`, `XOSC_KHZ=12000` and `PLL_COMMON_REFDIV=1`. You can modify these values in your `CMakeLists.txt` if you want to configure a different system clock during runtime initialization, or are using a non-standard crystal.  \r\n  - The new defines `PLL_USB_VCO_FREQ_KHZ`, `PLL_USB_POSTDIV1` and `PLL_USB_POSTDIV2` are used to configure the USB clock PLL during runtime initialization. These are defaulted for you if `USB_CLK_KHZ=48000`, `XOSC_KHZ=12000` and `PLL_COMMON_REFDIV=1`. You can modify these values in your `CMakeLists.txt` if you want to configure a different USB clock if you are using a non-standard crystal.\r\n  - The new define `PICO_PLL_VCO_MIN_FREQ_KHZ` is used in preference to the pre-existing `PICO_PLL_VCO_MIN_FREQ_MHZ`, though specifying either is supported.\r\n  - The new define `PICO_PLL_VCO_MAX_FREQ_KHZ` is used in preference to the pre-existing `PICO_PLL_VCO_MAX_FREQ_MHZ`, though specifying either is supported.\r\n\r\n### New Libraries\r\n\r\n#### pico_flash\r\n\r\n* This is a new higher level library than `hardware_flash`. It provides helper functions to facilitate getting into a \r\n  state where it is safe to write to flash (the default implementation disables interrupts on the current core, and if \r\n  necessary, makes sure the other core is running from RAM, and has interrupts disabled).\r\n* Adds a `flash_safe_execute()` function to execute a callback function while in the \"safe\" state.\r\n* Adds a `flash_safe_execute_core_init()` function which must be called from the \"other core\" when using `pico_multicore` to enable the cooperative support for entering a \"safe\" state.  \r\n* Supports user override of the mechanism by overriding the `get_flash_safety_helper()` function.\r\n\r\n### Miscellaneous\r\n\r\n* All assembly (including inline) in the SDK now uses the `unified` syntax.\r\n  * New C macros `pico_default_asm( ... )` and `pico_default_asm_volatile( ... )` are provided that are equivalent to `__asm` and `__asm volatile` blocks, but with a `.syntax unified` at the beginning. \r\n* A new assembler macro `pico_default_asm_setup` is provided to configure the correct CPU and dialect.\r\n* Some code cleanup to make the SDK code at least compile cleanly on Clang and IAR.\r\n\r\n### Build\r\n\r\n* `PICO_BOARD` and `PICO_BOARD_HEADER_DIRS` now correctly use the latest environment variable value if present.\r\n* A CMake performance regression due to repeated calls to `find_package` has been fixed.\r\n* Experimental support is provided for compiling with Clang. As an example, you can build with the\r\n  [LLVM Embedded Toolchain for Arm](https://github.com/ARM-software/LLVM-embedded-toolchain-for-Arm), noting however that currently only version 14.0.0 works, as later versions use `picolib` rather than `newlib`.\r\n   * Note that if you are using TinyUSB you need to use the latest master to compile with Clang.\r\n   \r\n   ```\r\n  mkdir clang_build\r\n  cd clang_build\r\n  cmake -DPICO_COMPILER=pico_arm_clang -DPICO_TOOLCHAIN_PATH=/path/to/arm-embedded-llvm-14.0.0 ..\r\n  make\r\n  ```\r\n  \r\n### Bluetooth Support for Pico W\r\n\r\nThe support is now official. Please find examples in [pico-examples](https://github.com/raspberrypi/pico-examples#pico-w-bluetooth).\r\n\r\n* The Bluetooth API is provided by [BTstack](https://github.com/bluekitchen/btstack).\r\n* The following libraries are provided that expose core BTstack functionality:\r\n    * `pico_btstack_ble` - Adds Bluetooth Low Energy (LE) support.\r\n    * `pico_btstack_classic` - Adds Bluetooth Classic support.\r\n    * `pico_btstack_sbc_encoder` - Adds Bluetooth Sub Band Coding (SBC) encoder support.\r\n    * `pico_btstack_sbc_decoder` - Adds Bluetooth Sub Band Coding (SBC) decoder support.\r\n    * `pico_btstack_bnep_lwip` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP.\r\n    * `pico_btstack_bnep_lwip_sys_freertos` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP with FreeRTOS for `NO_SYS=0`.\r\n* The following integration libraries are also provided:\r\n    * `pico_btstack_run_loop_async_context` - provides a common `async_context` backed implementation of a BTstack *\"run loop\"* that can be used for all BTstack use with the `pico-sdk`.\r\n    * `pico_btstack_flash_bank` - provides a sample implementation for storing required Bluetooth state in flash.\r\n    * `pico_btstack_cyw43` - integrates BTstack with the CYW43 driver.\r\n* The `CMake` function `pico_btstack_make_gatt_header` can be used to run the BTstack `compile_gatt` tool to make a GATT header file from a BTstack `GATT` file.\r\n* `pico_cyw43_driver` and `cyw43_driver` now support HCI communication for Bluetooth.\r\n* `cyw43_driver_picow` now supports Pico W specific HCI communication for Bluetooth over SPI.\r\n* `cyw43_arch_init()` and `cyw43_arch_deinit()` automatically handle Bluetooth support if `CYW43_ENABLE_BLUETOOTH` is `1`  (as it will be automatically if you depend on `pico_btstack_cyw43`).\r\n\r\nKey changes since 1.5.0:\r\n\r\n* Added Raspberry Pi specific [BTstack license](https://github.com/raspberrypi/pico-sdk/blob/master/src/rp2_common/pico_btstack/LICENSE.RP).\r\n* The storage offset in flash for `pico_btstack_flash_bank` can be specified at runtime by defining `pico_flash_bank_get_storage_offset_func` to your own function to return the offset within flash.\r\n* `pico_btstack_flash_bank` is now safe for multicore / FreeRTOS SMP use, as it uses the new `pico_flash` library to make sure the other core is not accessing flash during flash updates. If you are using `pico_multicore`you must have called `flash_safe_execute_core_init` from the \"other\" core (to the one Bluetooth is running on).\r\n* Automatically set Bluetooth MAC address to the correct MAC address (Wi-Fi MAC address + 1), as some devices do not have it set in OTP and were using the same default MAC from the Bluetooth chip causing collisions.\r\n* Various bug-fixes and stability improvements (especially with concurrent Wi-Fi), including updating `cyw43_driver` and `btstack` to the newest versions.\r\n\r\n### Authors\r\n\r\nThanks to the following for their contributions:\r\n\r\n2bndy5,\r\nagento2,\r\nAndrew Burge,\r\nAndrew Scheller,\r\narjunak234,\r\nDavid Thacher,\r\ndjazz,\r\nGraham Sanderson,\r\nhubiscode,\r\nJames Hughes,\r\nLuke Wren,\r\nMalte Thiesen,\r\nMichael Busby,\r\nMr. Green's Workshop,\r\nPaul Grayson,\r\nPeter Harper\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/107707260/reactions","total_count":28,"+1":9,"-1":0,"laugh":1,"hooray":12,"confused":0,"heart":6,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/86360118","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/86360118/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/86360118/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.5.0","id":86360118,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884FJcA2","tag_name":"1.5.0","target_commitish":"master","name":"SDK 1.5.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-02-11T00:27:36Z","updated_at":"2023-02-15T23:16:45Z","published_at":"2023-02-11T00:49:39Z","assets":[{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/assets/95368340","id":95368340,"node_id":"RA_kwDOE8B3884FrzSU","name":"sdk1.5.0-with-submodules.zip","label":null,"uploader":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/zip","state":"uploaded","size":69274724,"digest":null,"download_count":2642,"created_at":"2023-02-12T20:52:34Z","updated_at":"2023-02-12T20:53:15Z","browser_download_url":"https://github.com/raspberrypi/pico-sdk/releases/download/1.5.0/sdk1.5.0-with-submodules.zip"}],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.5.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.5.0","body":"This release contains new libraries and functionality, along with numerous bug fixes and documentation improvements.\r\n\r\nHighlights are listed below, or you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.5.0+is%3Amerged), and the full list of resolved issues [here](https://github.com/raspberrypi/pico-sdk/issues?q=is%3Aissue+milestone%3A1.5.0+is%3Aclosed).\r\n\r\nNote, these release notes are long and may appear truncated in the \"Releases\" tab; you can see the full version [here](https://github.com/raspberrypi/pico-sdk/releases/tag/1.5.0).\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `nullbits_bit_c_pro`\r\n- `waveshare_rp2040_lcd_1.28`\r\n- `waveshare_rp2040_one`\r\n\r\n### Library Changes/Improvements\r\n\r\n#### hardware_clocks\r\n* `clock_gpio_init()` now takes a `float` for the clock divider value, rather than an `int`.\r\n* Added `clock_gpio_init_int_frac()` function to allow initialization of integer and fractional part of the clock divider value, without using `float`.\r\n* Added `--ref-min` option to `vcocalc.py` to override the minimum reference frequency allowed.\r\n* `vcocalc.py` now additionally considers reference frequency dividers greater than 1.\r\n\r\n#### hardware_divider\r\n* Improved the performance of `hw_divider_` functions.\r\n\r\n#### hardware_dma\r\n* Added `dma_sniffer_set_output_invert_enabled()` and `dma_sniffer_set_output_reverse_enabled()` functions to configure the DMA sniffer.\r\n* Added `dma_sniffer_set_data_accumulator()` and `dma_sniffer_get_data_accumulator()` functions to access the DMA sniffer accumulator.\r\n\r\n#### hardware_i2c\r\n* Added `i2c_get_instance()` function for consistency with other `hardware_` libraries. \r\n* Added `i2c_read_byte_raw()`, `i2c_write_byte_raw()` functions to directly read and write the I2C data register for an I2C instance.\r\n\r\n#### hardware_timer\r\n\r\n* Added `hardware_alarm_claim_unused()` function to claim an unused hardware timer.\r\n\r\n#### pico_cyw43_arch\r\n\r\n* Added `cyw43_arch_wifi_connect_bssid_` variants of `cyw43_arch_wifi_connect_` functions to allow connection to a specific access point.\r\n* Blocking `cyw43_arch_wifi_connect_` functions now continue trying to connect rather than failing immediately if the network is not found.\r\n* `cyw43_arch_wifi_connect_` functions now return consistent return codes (`PICO_OK`, or `PICO_ERROR_XXX`).\r\n* The `pico_cyw43_arch` library has been completely rewritten on top of the new `pico_async_context` library that generically abstracts the different types of asynchronous operation (`poll`, `threadsafe_background` and `freertos`) previously handled in a bespoke fashion by `pico_cyw43_arch`. Many edge case bugs have been fixed as a result of this. Note that this change should be entirely backwards compatible from the user point of view.\r\n* `cyw43_arch_init()` and `cyw43_arch_deinit()` functions are now very thin layers which handle `async_context` life-cycles, along with adding support for the `cyw43_driver`, lwIP, BTstack etc. to that `async_context`. Currently, these mechanisms remain the preferred documented way to initialize Pico W networking, however you are free to do similar initialization/de-initialization yourself.\r\n* Added `cyw43_arch_set_async_context()` function to specify a custom `async_context` prior to calling `cyw43_arch_init*()`\r\n* Added `cyw43_arch_async_context()` function to get the `async_context` used by the CYW43 architecture support.\r\n* Added `cyw43_arch_init_default_async_context()` function to return the `async_context` that `cyw43_arch_init*()` would initialize if one has not been set by the user.\r\n* Added `cyw43_arch_wait_for_work_until()` function to block until there is networking work to be done. This is most useful for `poll` style applications that have no other work to do and wish to sleep until `cyw43_arch_poll()` needs to be called again.\r\n\r\n#### pico_cyw43_driver\r\n\r\n- The functionality has been clarified into 3 separate libraries:\r\n  - `cyw43_driver` - the raw cyw43_driver code.\r\n  - `cyw43_driver_picow` - additional support for communication with the Wi-Fi chip over SPI on Pico W.\r\n  - `pico_cyw43_driver` - integration of the cyw43_driver with the `pico-sdk` via `async_context`\r\n- Added `CYW43_WIFI_NVRAM_INCLUDE_FILE` define to allow user to override the NVRAM file.\r\n\r\n#### pico_divider\r\n\r\n* Improved the performance of 64-bit divider functions.\r\n\r\n#### pico_platform\r\n\r\n* Add `panic_compact()` function that discards the message to save space in non-debug (`NEBUG` defined) builds.\r\n\r\n#### pico_runtime\r\n\r\n* Added proper implementation of certain missing `newlib` system APIs: `_gettimeofday()`, `_times()`, `_isatty()`, `_getpid()`.\r\n* The above changes enable certain additional C/C++ library functionality such as `gettimeofday()`, `times()` and `std::chrono`.\r\n* Added `settimeofday()` implementation such that `gettimeofday()` can be meaningfully used.\r\n* Added default (return `-1`) implementations of the remaining `newlib` system APIs: `_open()`, `_close()`, `_lseek()`, `_fstat()`, `_isatty()`, `_kill()`, to prevent warnings on GCC 12.\r\n* Made all `newlib` system API implementations *weak* so the user can override them.\r\n\r\n#### pico_stdio\r\n\r\n* `pico_stdio` allows for outputting from within an IRQ handler that creates the potential for deadlocks (especially with `pico_stdio_usb`), and the intention is to *not* deadlock but instead discard output in any cases where a deadlock would otherwise occur. The code has been revamped to avoid more deadlock cases, and a new define `PICO_STDIO_DEADLOCK_TIMEOUT_MS` has been added to catch remaining cases that might be caused by user level locking.\r\n* Added `stdio_set_chars_available_callback()` function to set a callback to be called when input is available. See also the new `PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK` and `PICO_STDIO_UART_SUPPORT_CHARS_AVAILABLE_CALLBACK` defines which both default to `1` and control the availability of this new feature for USB and UART stdio respectively (at the cost of a little more code).\r\n* Improved performance of `stdio_semihosting`.\r\n* Give the user more control over the USB descriptors of `stdio_usb` via `USBD_VID`, `USBD_PID`, `USBD_PRODUCT`, `PICO_STDIO_USB_CONNECTION_WITHOUT_DTR` and `PICO_STDIO_USB_DEVICE_SELF_POWERED`\r\n\r\n#### pico_sync\r\n\r\n* Added `critical_section_is_initialized()` function to test if a critical section has been initialized.\r\n* Added `mutex_try_enter_block_until()` function to wait only up to a certain time to acquire a mutex.\r\n\r\n#### pico_time\r\n* Added `from_us_since_boot()` function to convert a `uint64_t` timestamp to an `absolute_time_t`.\r\n* Added `absolute_time_min()` function to return the earlier of two `absolute_time_t` values.\r\n* Added `alarm_pool_create_with_unused_hardware_alarm()` function to create an alarm pool using a hardware alarm number claimed using `hardware_alarm_claim()`.\r\n* Added `alarm_pool_core_num()` function to determine what core an alarm pool runs on.\r\n* Added `alarm_pool_add_alarm_at_force_in_context()` function to add an alarm, and have it always run in the IRQ context even if the target time is in the past, or during the call. This may be simpler in some cases than dealing with the `fire_if_past` parameters to existing functions, and avoids some callbacks happening from non IRQ context.\r\n\r\n#### pico_lwip\r\n- Added `pico_lwip_mqtt` library to expose the MQTT app functionality in lwIP.\r\n- Added `pico_lwip_mdns` library to expose the MDNS app functionality in lwIP.\r\n- Added `pico_lwip_freertos` library for `NO_SYS=0` with FreeRTOS as a complement to `pico_lwip_nosys` for `NO_SYS=1`.\r\n\r\n#### TinyUSB\r\n\r\n* TinyUSB has upgraded from 0.12.0 to 0.15.0. See TinyUSB release notes [here](https://github.com/hathach/tinyusb/releases) for details. \r\n* Particularly *host* support should be massively improved.\r\n* Defaulted new TinyUSB `dcd_rp2040` driver's `TUD_OPT_RP2040_USB_DEVICE_UFRAME_FIX` variable to `1` as a workaround for errata RP2040-E15. This fix is required for correctness, but comes at the cost of some performance, so applications that won't ever be plugged into a Pi 4 or Pi 400 can optionally disable this by setting the value of `TUD_OPT_RP2040_USB_DEVICE_UFRAME_FIX`to `0` either via `target_compile_definitions` in their `CMakeLists.txt` or in their `tusb_config.h`.\r\n### New Libraries\r\n\r\n#### pico_async_context\r\n\r\n* Provides support for asynchronous events (timers/IRQ notifications) to be handled in a safe context without concurrent execution (as required by many asynchronous 3rd party libraries).\r\n* Provides implementations matching those previously implemented in `pico_cyw43_arch`:\r\n  * `poll` - Not thread-safe; the user must call `async_context_poll()` periodically from their main loop, but can call `async_context_wait_for_work_until()` to block until work is required.\r\n  * `threadsafe_background` - No polling is required; instead asynchronous work is performed in a low priority IRQ. Locking is provided such that IRQ/non-IRQ or multiple cores can interact safely. \r\n  * `freertos` - Asynchronous work is performed in a separate FreeRTOS task.\r\n* `async_context` guarantees all callbacks happen on a single core.\r\n* `async_context` supports multiple instances for providing independent context which can execute concurrently with respect to each other.\r\n\r\n#### pico_i2c_slave\r\n* A (slightly modified) pico_i2c_slave library from https://github.com/vmilea/pico_i2c_slave\r\n* Adds a callback style event API for handling I2C slave requests.\r\n\r\n#### pico_mbedtls\r\n- Added `pico_mbedtls` library to provide MBed TLS support. You can depend on both `pico_lwip_mbedtls` and `pico_mbedtls` to use MBed TLS and lwIP together. See the [tls_client](https://github.com/raspberrypi/pico-examples/tree/master/pico_w/wifi/tls_client.c) example in `pico-examples` for more details.\r\n\r\n#### pico_rand\r\n* Implements a new Random Number Generator API.\r\n* `pico_rand` generates random numbers at runtime utilizing a number of possible entropy sources, and uses those sources to modify the state of a 128-bit 'Pseudo Random Number Generator' implemented in software.\r\n* Adds `get_rand_32()`, `get_rand_64()` and `get_rand_128()` functions to return largely unpredictable random numbers (which should be different on each board/run for example).\r\n\r\n#### Miscellaneous\r\n\r\n* Added a new header `hardware/structs/nvic.h` with a struct for the Arm Cortex M0+ NVIC available via the `nvic_hw` pointer.\r\n* Added new `PICO_CXX_DISABLE_ALLOCATION_OVERRIDES` which can be set to `1` if you do not want `pico_standard_link` to include non-exceptional overrides of `std::new`, `std::new[]`, `std::delete` and `std::delete[]` when exceptions are disabled.\r\n* `elf2uf2` now correctly uses `LMA` instead of `VMA` of the entry point to determine binary type (flash/RAM). This is required to support some exotic binaries correctly. \r\n\r\n### Build\r\n\r\n* The build will now check for a functional compiler via the standard `CMake` mechanism.\r\n* The build will pick up pre-installed `elf2uf2` and `pioasm` if found via an installed `pico-sdk-tools` `CMake` package. If it can do so, then no native compiler is required for the build!\r\n* It is now possible to switch the board type `PICO_BOARD` in an existing `CMake` build directory.\r\n* `ARCHIVE_OUTPUT_DIRECTORY` is now respected in build for `UF2` output files.\r\n* Spaces are now supported in the path to the `pico-sdk`\r\n* All libraries `xxx` in the `pico-sdk` now support a `xxx_headers` variant that just pulls in the libraries'  headers. These `xxx_headers` libraries correctly mirror the dependencies of the `xxx` libraries, so you can use `xxx_headers` instead of `xxx` as your dependency if you do not want to pull in any implementation files (perhaps if you are making a `STATIC` library). Actually the \"all\" is not quite true, non code libraries such as `pico_standard_link` and `pico_cxx_options` are an exception.\r\n \r\n### Bluetooth Support for Pico W (BETA)\r\n\r\nThe support is currently available as a beta. More details will be forthcoming with the actual release.\r\nIn the meantime, there are examples in [pico-examples](https://github.com/raspberrypi/pico-examples#pico-w-bluetooth).\r\n\r\nKey changes:\r\n\r\n* The Bluetooth API is provided by [BTstack](https://github.com/bluekitchen/btstack).\r\n* The following new libraries are provided that expose core BTstack functionality:\r\n  * `pico_btstack_ble` - Adds Bluetooth Low Energy (LE) support.\r\n  * `pico_btstack_classic` - Adds Bluetooth Classic support.\r\n  * `pico_btstack_sbc_encoder` - Adds Bluetooth Sub Band Coding (SBC) encoder support.\r\n  * `pico_btstack_sbc_decoder` - Adds Bluetooth Sub Band Coding (SBC) decoder support.\r\n  * `pico_btstack_bnep_lwip` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP.\r\n  * `pico_btstack_bnep_lwip_sys_freertos` - Adds Bluetooth Network Encapsulation Protocol (BNEP) support using LwIP with FreeRTOS for `NO_SYS=0`.\r\n* The following integration libraries are also provided:\r\n  * `pico_btstack_run_loop_async_context` - provides a common `async_context` backed implementation of a BTstack *\"run loop\"* that can be used for all BTstack use with the `pico-sdk`.   \r\n  * `pico_btstack_flash_bank` - provides a sample implementation for storing required Bluetooth state in flash.\r\n  * `pico_btstack_cyw43` - integrates BTstack with the CYW43 driver.\r\n* Added `CMake` function `pico_btstack_make_gatt_header` that can be used to run the BTstack `compile_gatt` tool to make a GATT header file from a BTstack `GATT` file.\r\n* Updated `pico_cyw43_driver` and `cyw43_driver` to support HCI communication for Bluetooth.\r\n* Updated `cyw43_driver_picow` to support Pico W specific HCI communication for Bluetooth over SPI.\r\n* Updated `cyw43_arch_init()` and `cyw43_arch_deinit()` to additionally handle Bluetooth support if `CYW43_ENABLE_BLUETOOTH` is `1` (as it will be automatically if you depend on `pico_btstack_cyw43`).\r\n\r\n### Authors\r\n\r\nThanks to the following for their contributions:\r\n\r\nalastairpatrick, \r\nAndrew Burge, \r\nAndrew Scheller, \r\nAttila Wagner, \r\nbruelltuete,\r\nDamien George,\r\nDaniel Treffenstädt, \r\nDavid Greaves, \r\nDipSwitch, \r\nEarle F. Philhower, III, \r\nEngineer_Will, \r\nenvirocoder, \r\nFlaviu Tamas, \r\nGraham Sanderson, \r\nJames Peach, \r\nJan Niehusmann, \r\nJay Greco, \r\nJeremy Grosser, \r\nJonathan Bell, \r\nJonathan Reichelt Gjertsen, \r\nKafCoppelia, \r\nKoji KITAYAMA, \r\nLiam Frasier, \r\nLord-Lucan,\r\nMatthias Ringwald,\r\nMr. Green's Workshop, \r\nNicolas Pouillon, \r\nNikhil Dabas, \r\nPatrick Plenefisch, \r\nPedro Tôrres, \r\nPeter Harper, \r\nPeter Pettersson, \r\nRadoslav Gerganov, \r\nryanjsims, \r\nStargirl Flowers, \r\nThomas Roberts, \r\nTimo Kokkonen\r\n\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/86360118/reactions","total_count":69,"+1":16,"-1":0,"laugh":0,"hooray":33,"confused":0,"heart":17,"rocket":0,"eyes":3}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/70933236","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/70933236/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/70933236/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.4.0","id":70933236,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884EOlr0","tag_name":"1.4.0","target_commitish":"master","name":"SDK version 1.4.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2022-06-30T05:46:24Z","updated_at":"2022-06-30T18:14:28Z","published_at":"2022-06-30T06:59:07Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.4.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.4.0","body":"This release adds wireless support for the Raspberry Pi Pico W, adds support for other new boards, and contains various \r\nbug fixes, documentation improvements, and minor improvements/added functionality. You can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.4.0++is%3Amerged).\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `pico_w`\r\n- `datanoisetv_rp2040_dsp`\r\n- `solderparty_rp2040_stamp_round_carrier`\r\n\r\n### Wireless Support\r\n\r\n* Support for the Raspberry Pi Pico W is now included with the SDK (`PICO_BOARD=pico_w`). The Pico W uses a driver \r\n  for the wireless chip called `cyw43_driver` which is included as a submodule of the SDK. You need to initialize \r\n  this submodule for Pico W wireless support to be available. Note that the LED on the Pico W board is only \r\n  accessible via the wireless chip and can be accessed via `cyw43_arch_gpio_put()` and \r\n  `cyw43_arch_gpio_get()` (part of the `pico_cyw43_arch` library described below). As a result of the LED being on \r\n  the wireless chip, there is no `PICO_DEFAULT_LED_PIN` setting and the default LED based examples in [pico-examples](https://github.com/raspberrypi/pico-examples) \r\n  do not work with the Pico W.\r\n* IP support is provided by [lwIP](https://savannah.nongnu.org/projects/lwip/lwIP) which is also included as a \r\n  submodule which you should initialize if you want to use it.\r\n\r\n  The following libraries exposing lwIP functionality are provided by the SDK:\r\n\r\n  * `pico_lwip_core` (included in `pico_lwip`)\r\n  * `pico_lwip_core4` (included in `pico_lwip`)\r\n  * `pico_lwip_core6` (included in `pico_lwip`)\r\n  * `pico_lwip_netif` (included in `pico_lwip`)\r\n  * `pico_lwip_sixlowpan` (included in `pico_lwip`)\r\n  * `pico_lwip_ppp` (included in `pico_lwip`)\r\n  * `pico_lwip_api` (this is a blocking API that may be used with FreeRTOS and is not included in `pico_lwip`)\r\n  \r\n  As referenced above, the SDK provides a `pico_lwip` which aggregates all of the commonly needed lwIP functionality.\r\n  You are of course free to use the substituent libraries explicitly instead.\r\n\r\n  The following libraries are provided that contain the equivalent lwIP application support:\r\n  \r\n  * `pico_lwip_snmp`\r\n  * `pico_lwip_http`\r\n  * `pico_lwip_makefsdata`\r\n  * `pico_lwip_iperf`\r\n  * `pico_lwip_smtp`\r\n  * `pico_lwip_sntp`\r\n  * `pico_lwip_mdns`\r\n  * `pico_lwip_netbios`\r\n  * `pico_lwip_tftp`\r\n  * `pico_lwip_mbedtls`\r\n\r\n* Integration of the IP stack and the `cyw43_driver` network driver into the user's code is handled by \r\n  `pico_cyw43_arch`. Both the IP stack and the driver need to do work in response to network traffic, and \r\n  `pico_cyw43_arch` provides a variety of strategies for servicing that work. Four architecture variants\r\n   are currently provided as libraries:\r\n\r\n  * `pico_cyw43_arch_lwip_poll` - For using the RAW lwIP API (`NO_SYS=1` mode) with polling. With this architecture\r\n    the user code must periodically poll via `cyw43_arch_poll()` to perform background work. This architecture\r\n    matches the common use of lwIP on microcontrollers, and provides no multicore safety\r\n  * `pico_cyw43_arch_lwip_threadsafe_background` - For using the RAW lwIP API (`NO_SYS=1` mode) with multicore \r\n    safety, and automatic servicing of the `cyw43_driver` and\r\n    lwIP in the background. User polling is not required with this architecture, but care should be taken as lwIP \r\n    callbacks happen in an IRQ context.\r\n  * `pico_cyw43_arch_lwip_sys_freertos` - For using the full lwIP API including blocking sockets in OS mode \r\n    (`NO_SYS=0`), along with multicore/task safety, and automatic servicing of the `cyw43_driver` and the lwIP \r\n    stack in a separate task. This powerful architecture works with both SMP and non-SMP variants of the RP2040 port \r\n    of FreeRTOS-Kernel. Note you must set `FREERTOS_KERNEL_PATH` in your build to use this variant.\r\n  * `pico_cyw43_arch_none` - If you do not need the TCP/IP stack but wish to use the on-board LED or other wireless \r\n    chip connected GPIOs.\r\n  \r\n  See the library documentation or the `pico/cyw43_arch.h` header for more details.\r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### hardware_dma\r\n\r\n* Added `dma_unclaim_mask()` function for un-claiming multiple DMA channels at once.\r\n* Added `channel_config_set_high_priority()` function to set the channel priority via a channel config object.\r\n\r\n#### hardware_gpio\r\n\r\n* Improved the documentation for the pre-existing gpio IRQ functions which use the \"one callback per core\" callback \r\n  mechanism, \r\n  and added a `gpio_set_irq_callback()` function to explicitly set the callback independently of enabling per pin GPIO \r\n  IRQs.  \r\n* Reduced the latency of calling the existing \"one callback per core\" GPIO IRQ callback.\r\n* Added new support for the user to add their own shared GPIO IRQ handler independent of the pre-existing\r\n  \"one callback per core\" callback mechanism, allowing for independent usage of GPIO IRQs without having to share one \r\n  handler.\r\n  See \r\n  the \r\n  documentation in `hardware/irq.h` for full details of the functions added:\r\n  * `gpio_add_raw_irq_handler()`\r\n  * `gpio_add_raw_irq_handler_masked()`\r\n  * `gpio_add_raw_irq_handler_with_order_priority()`\r\n  * `gpio_add_raw_irq_handler_with_order_priority_masked()`\r\n  * `gpio_remove_raw_irq_handler()`\r\n  * `gpio_remove_raw_irq_handler_masked()`\r\n  \r\n* Added a `gpio_get_irq_event_mask()` utility function for use by the new \"raw\" IRQ handlers.\r\n\r\n#### hardware_irq\r\n\r\n* Added `user_irq_claim()`, `user_irq_unclaim()`, `user_irq_claim_unused()` and `user_irq_is_claimed()`\r\n  functions for claiming ownership of the *user* IRQs (the ones numbered 26-31 and not connected to any hardware). \r\n  Uses of the *user* IRQs have been updated to use these functions. For `stdio_usb`, the `PICO_STDIO_USB_LOW_PRIORITY_IRQ` define is still respected if specified, but otherwise an unclaimed one is \r\n  chosen. \r\n* Added an `irq_is_shared_handler()` function to determine if a particular IRQ uses a shared handler.\r\n\r\n#### pico_sync\r\n\r\n* Added a `sem_try_acquire()` function, for non blocking acquisition of a semaphore.\r\n\r\n#### pico_stdio\r\n\r\n* `stderr` is now supported and goes to the same destination as `stdout`.\r\n* Zero timeouts for `getchar_timeout_us()` are now correctly honored (previously they were a 1us minimum).\r\n\r\n#### stdio_usb\r\n\r\n* stdio over USB can now be used even if you are linking to `tinyusb_device` yourself. If you have a CDC device in your device descriptors, you can use `pico_enable_stdio_usb(TARGET 1)` in your `CMakeLists.txt`\r\n* The use of a 1ms timer to handle background TinyUSB work has been replaced with use of a more interrupt driven \r\n  approach using a *user* IRQ for better performance. Note this new feature is disabled if shared IRQ handlers\r\n  are disabled via `PICO_DISABLE_SHARED_IRQ_HANDLERS=1`\r\n\r\n#### miscellaneous\r\n\r\n* `get_core_num()` has been moved to `pico/platform.h` from `hardware/sync.h`.\r\n* The C library function `realloc()` is now multicore safe too.\r\n* The minimum PLL frequency has been increased from 400Mhz to 750Mhz to improve stability across operating \r\n  conditions.  This should not affect the majority of users in any way, but may impact those trying to set \r\n  particularly low clock frequencies. If you do wish to return to the previous \r\n  minimum, you can set `PICO_PLL_VCO_MIN_FREQ_MHZ` back to `400`. There is also a new `PICO_PLL_VCO_MAX_FREQ_MHZ` \r\n  which defaults to `1600`.\r\n\r\n### Build\r\n* Compilation with GCC 12 is now supported.\r\n\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/70933236/reactions","total_count":49,"+1":13,"-1":0,"laugh":2,"hooray":13,"confused":0,"heart":10,"rocket":11,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/67016086","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/67016086/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/67016086/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.3.1","id":67016086,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884D_pWW","tag_name":"1.3.1","target_commitish":"master","name":"SDK version 1.3.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2022-05-18T15:41:48Z","updated_at":"2022-05-18T20:50:45Z","published_at":"2022-05-18T20:50:45Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.3.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.3.1","body":"This release contains numerous bug fixes and documentation improvements which are not all listed here; you can see the full list of individual commits [here](https://github.com/raspberrypi/pico-sdk/pulls?q=is%3Apr+milestone%3A1.3.1++is%3Amerged).\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n- `adafruit_kb2040`\r\n- `adafruit_macropad_rp2040`\r\n- `eetree_gamekit_rp2040`\r\n- `garatronic_pybstick26_rp2040` (renamed from `pybstick26_rp2040`) \r\n- `pimoroni_badger2040`\r\n- `pimoroni_motor2040`\r\n- `pimoroni_servo2040`\r\n- `pimoroni_tiny2040_2mb`\r\n- `seeed_xiao_rp2040`\r\n- `solderparty_rp2040_stamp_carrier`\r\n- `solderparty_rp2040_stamp`\r\n- `wiznet_w5100s_evb_pico`\r\n\r\n### Notable Library Changes/Improvements\r\n\r\n#### hardware_dma    \r\n\r\n* New documentation has been added to the `dma_channel_abort()` function describing errata RP2040-E13, and how to work around it.\r\n    \r\n#### hardware_irq\r\n* Fixed a bug related to removing and then re-adding shared IRQ handlers. It is now possible to add/remove handlers as documented.\r\n* Added new documentation clarifying the fact the shared IRQ handler ordering \"priorities\" have values that increase with higher priority vs Cortex M0+ IRQ priorites which have values that decrease with priority!\r\n\r\n#### hardware_pwm\r\n* Added a `pwm_config_set_clkdiv_int_frac()` method to complement `pwm_config_set_clkdiv_int()` and `pwm_config_set_clkdiv()`.\r\n\r\n#### hardware_pio\r\n* Fixed the `pio_set_irqn_source_mask_enabled()` method which previously affected the wrong IRQ.\r\n    \r\n#### hardware_rtc\r\n* Added clarification to `rtc_set_datetime()` documentation that the new value may not be visible to a `rtc_get_datetime()` very soon after, due to crossing of clock domains.\r\n\r\n#### pico_platform\r\n* Added a `busy_wait_at_least_cycles()` method as a convenience method for a short tight-loop counter-based delay.\r\n\r\n#### pico_stdio\r\n* Fixed a bug related to removing stdio \"drivers\". `stdio_set_driver_eabled()` can now be used freely to dynamically enable and disable drivers during runtime.\r\n\r\n#### pico_time\r\n* Added an `is_at_the_end_of_time()` method to check if a given time matches the SDK's maximum time value.\r\n\r\n#### Runtime\r\n\r\n* A bug in `__ctzdi2()` aka `__builtin_ctz(uint64_t)` was fixed.\r\n\r\n### Build\r\n* Compilation with GCC 11 is now supported.\r\n* `PIOASM_EXTRA_SOURCE_FILES` is now actually respected.\r\n\r\n### pioasm\r\n* Input files with Windows (CRLF) line endings are now accepted.\r\n* A bug in the python output was fixed.\r\n\r\n### elf2uf2\r\n* Extra padding was added to the UF2 output of misaligned or non-contiguous binaries to work around errata RP2040-E14.\r\n\r\n---\r\n\r\nNote the 1.3.0 release of the SDK incorrectly squashed the history of the changes. A new merge commit has been added to restore the full history, and the [1.3.0](https://github.com/raspberrypi/pico-sdk/tree/1.3.0) tag has been updated ","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/67016086/reactions","total_count":14,"+1":13,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/52471118","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/52471118/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/52471118/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.3.0","id":52471118,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOE8B3884DIKVO","tag_name":"1.3.0","target_commitish":"master","name":"SDK version 1.3.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2022-05-17T18:32:32Z","updated_at":"2022-05-17T18:51:37Z","published_at":"2021-11-01T19:28:19Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.3.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.3.0","body":"This release contains numerous bug fixes and documentation improvements. Additionally, it contains the following notable changes/improvements:\r\n\r\n### Updated TinyUSB to 0.12.0\r\n\r\n- The `lib/tinyusb` submodule has been updated from 0.10.1 to 0.12.0. See https://github.com/hathach/tinyusb/releases/tag/0.11.0 and https://github.com/hathach/tinyusb/releases/tag/0.12.0 for release notes.\r\n- Improvements have been made for projects that include TinyUSB and also compile with enhanced warning levels and `-Werror`. Warnings have been fixed in rp2040 specific TinyUSB code, and in TinyUSB headers, and a new cmake function `suppress_tinyusb_warnings()` has been added, that you may call from your `CMakeLists.txt` to suppress warnings in other TinyUSB C files.\r\n\r\n### New Board Support\r\n\r\nThe following boards have been added and may be specified via `PICO_BOARD`:\r\n\r\n  - `adafruit_trinkey_qt2040`\r\n  - `melopero_shake_rp2040`\r\n  - `pimoroni_interstate75`\r\n  - `pimoroni_plasma2040`\r\n  - `pybstick26_rp2040`\r\n  - `waveshare_rp2040_lcd_0.96`\r\n  - `waveshare_rp2040_plus_4mb`\r\n  - `waveshare_rp2040_plus_16mb`\r\n  - `waveshare_rp2040_zero`\r\n\r\n### Updated SVD, `hardware_regs`, `hardware_structs`\r\n\r\nThe [RP2040 SVD](https://github.com/raspberrypi/pico-sdk/blob/master/src/rp2040/hardware_regs/rp2040.svd) has been updated, fixing some register access types and adding new documentation.\r\n\r\nThe `hardware_regs` headers have been updated accordingly.\r\n\r\nThe `hardware_structs` headers which were previously hand coded, are now generated from the SVD, and retain select documentation from the SVD, including register descriptions and register bit-field tables.\r\n\r\ne.g. what was once\r\n\r\n```c\r\ntypedef struct {\r\n    io_rw_32 ctrl;\r\n    io_ro_32 fstat;\r\n    ...\r\n```\r\nbecomes:\r\n\r\n```c\r\n// Reference to datasheet: https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf#tab-registerlist_pio\r\n//\r\n// The _REG_ macro is intended to help make the register navigable in your IDE (for example, using the \"Go to Definition\" feature)\r\n// _REG_(x) will link to the corresponding register in hardware/regs/pio.h.\r\n//\r\n// Bit-field descriptions are of the form:\r\n// BITMASK [BITRANGE]: FIELDNAME (RESETVALUE): DESCRIPTION\r\n\r\ntypedef struct {\r\n    _REG_(PIO_CTRL_OFFSET) // PIO_CTRL\r\n    // PIO control register\r\n    // 0x00000f00 [11:8]  : CLKDIV_RESTART (0): Restart a state machine's clock divider from an initial phase of 0\r\n    // 0x000000f0 [7:4]   : SM_RESTART (0): Write 1 to instantly clear internal SM state which may be otherwise difficult...\r\n    // 0x0000000f [3:0]   : SM_ENABLE (0): Enable/disable each of the four state machines by writing 1/0 to each of these four bits\r\n    io_rw_32 ctrl;\r\n\r\n    _REG_(PIO_FSTAT_OFFSET) // PIO_FSTAT\r\n    // FIFO status register\r\n    // 0x0f000000 [27:24] : TXEMPTY (0xf): State machine TX FIFO is empty\r\n    // 0x000f0000 [19:16] : TXFULL (0): State machine TX FIFO is full\r\n    // 0x00000f00 [11:8]  : RXEMPTY (0xf): State machine RX FIFO is empty\r\n    // 0x0000000f [3:0]   : RXFULL (0): State machine RX FIFO is full\r\n    io_ro_32 fstat;\r\n    ...\r\n```\r\n\r\n### Behavioral Changes\r\n\r\nThere were some behavioral changes in this release:\r\n\r\n#### pico_sync\r\n\r\nSDK 1.2.0 previously added recursive mutex support using the existing (previously non-recursive) `mutex_` functions. This caused a performance regression, and the only clean way to fix the problem was to return the `mutex_` functions to their pre-SDK 1.2.0 behavior, and split the recursive mutex functionality out into separate `recursive_mutex_` functions with a separate `recursive_mutex_` type. \r\n\r\nCode using the SDK 1.2.0 recursive mutex functionality will need to be changed to use the new type and functions, however as a convenience, the pre-processor define `PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY` may be set to 1 to retain the SDK 1.2.0 behavior at the cost of an additional performance penalty. The ability to use this pre-processor define will be removed in a subsequent SDK version.\r\n\r\n#### pico_platform\r\n\r\n* `pico.h` and its dependencies have been slightly refactored so it can be included by assembler code as well as C/C++ code. Thie ensures that assembler code and C/C++ code follow the same board configuration/override order and see the same configuration defines. This should not break any existing code, but is notable enough to mention.\r\n* `pico/platform.h` is now fully documented.\r\n\r\n#### pico_standard_link\r\n\r\n`-Wl,max-page-size=4096` is now passed to the linker, which is beneficial to certain users and should have no discernible impact on the rest.\r\n\r\n### Other Notable Improvements\r\n\r\n#### hardware_base\r\n\r\n* Added `xip_noalloc_alias(addr)`, `xip_nocache_alias(addr)`, `xip_nocache_noalloc_alias(addr)` macros for converting a flash address between XIP aliases (similar to the `hw_xxx_alias(addr)` macros).\r\n\r\n#### hardware_dma\r\n\r\n* Added `dma_timer_claim()`, `dma_timer_unclaim()`, `dma_claim_unused_timer()` and `dma_timer_is_claimed()` to manage ownership of DMA timers.\r\n* Added `dma_timer_set_fraction()` and `dma_get_timer_dreq()` to facilitate pacing DMA transfers using DMA timers.\r\n\r\n#### hardware_i2c\r\n\r\n* Added `i2c_get_dreq()` function to facilitate configuring DMA transfers to/from an I2C instance.\r\n\r\n#### hardware_irq\r\n\r\n* Added `irq_get_priority()`.\r\n* Fixed implementation when `PICO_DISABLE_SHARED_IRQ_HANDLERS=1` is specified, and allowed  `irq_add_shared_handler` to be used in this case (as long as there is only one handler - i.e. it behaves exactly like `irq_set_exclusive_handler`),\r\n* Sped up IRQ priority initialization which was slowing down per core initialization.\r\n\r\n#### hardware_pio\r\n \r\n* `pio_encode_` functions in `hardware/pico_instructions.h` are now documented. \r\n\r\n#### hardware_pwm\r\n\r\n* Added `pwm_get_dreq()` function to facilitate configuring DMA transfers to a PWM slice.\r\n\r\n#### hardware_spi\r\n\r\n* Added `spi_get_dreq()` function to facilitate configuring DMA transfers to/from an SPI instance.\r\n\r\n#### hardware_uart\r\n\r\n* Added `uart_get_dreq()` function to facilitate configuring DMA transfers to/from a UART instance.\r\n\r\n#### hardware_watchdog\r\n\r\n* Added `watchdog_enable_caused_reboot()` to distinguish a watchdog reboot caused by a watchdog timeout after calling `watchdog_enable()` from other watchdog reboots (e.g. that are performed when a UF2 is dragged onto a device in BOOTSEL mode). \r\n\r\n#### pico_bootrom\r\n\r\n* Added new constants and function signature typedefs to `pico/bootrom.h` to facilitate calling bootrom functions directly.\r\n\r\n#### pico_multicore\r\n\r\n* Improved documentation in `pico/multicore.h`; particularly, `multicore_lockout_` functions are newly documented.\r\n\r\n#### pico_platform\r\n\r\n* `PICO_RP2040` is now defined to 1 in `PICO_PLATFORM=rp2040` (i.e. normal) builds.\r\n\r\n#### pico_stdio\r\n* Added `puts_raw()` and `putchar_raw()` to skip CR/LF translation if enabled.\r\n* Added `stdio_usb_connected()` to detect CDC connection when using `stdio_usb`.\r\n* Added `PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS` define that can be set to wait for a CDC connection to be established during initialization of `stdio_usb`. Note: value -1 means indefinite. This can be used to prevent initial program output being lost, at the cost of requiring an active CDC connection.\r\n* Fixed `semihosting_putc` which was completely broken.\r\n\r\n#### pico_usb_reset_interface\r\n\r\n* This new library contains `pico/usb_reset_interface.h` split out from `stdio_usb` to facilitate inclusion in external projects.\r\n\r\n### CMake build\r\n\r\n* `OUTPUT_NAME` target property is now respected when generating supplemental files (`.BIN`, `.HEX`, `.MAP`, `.UF2`)\r\n\r\n### pioasm\r\n\r\n* Operator precedence of `*`, `/`, `-`, `+` have been fixed\r\n* Incorrect MicroPython output has been fixed. \r\n\r\n### elf2uf2\r\n\r\n* A bug causing an error with binaries produces by certain other languages has been fixed.\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/52471118/reactions","total_count":13,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":6,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/44053585","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/44053585/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/44053585/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.2.0","id":44053585,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTQ0MDUzNTg1","tag_name":"1.2.0","target_commitish":"master","name":"SDK version 1.2.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-06-03T15:46:02Z","updated_at":"2021-06-06T01:32:22Z","published_at":"2021-06-03T15:54:17Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.2.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.2.0","body":"This release contains numerous bug fixes and documentation improvements. Additionally it contains the following improvements/notable changes:\r\n\r\n### Updated TinyUSB to 0.10.1\r\nThe `lib/tinyusb` submodule has been updated from 0.8.0 and now tracks upstream https://github.com/hathach/tinyusb.git. It is worth making sure you do a\r\n\r\n```\r\ngit submodule sync\r\ngit submodule update\r\n```\r\n\r\nto make sure you are correctly tracking upstream TinyUSB if you are not checking out a clean pico-sdk repository.\r\n\r\nNote also that moving ffrom TinyUSB 0.8.0 to TinyUSB 0.10.1 may require some minor changes to your USB code.\r\n\r\n### New/improved board headers\r\n* New board headers support for PICO_BOARDs `arduino_nano_rp240_connect`, `pimoroni_picolipo_4mb` and `pimoroni_picolipo_16mb`\r\n* Missing/new `#defines` for default SPI and I2C pins have been added\r\n\r\n### Added CMSIS core headers\r\nCMSIS core headers (e.g. `core_cm0plus.h` and `RP2040.h`) are made available via `cmsis_core` INTERFACE library. Additionally, CMSIS standard exception naming is available via `PICO_CMSIS_RENAME_EXCEPTIONS=1`\r\n\r\n### API improvements\r\n\r\n#### pico_sync\r\n* Added support for recursive mutexes via `recursive_mutex_init()` and `auto_init_recursive_mutex()`\r\n* Added `mutex_enter_timeout_us()`\r\n* Added `critical_section_deinit()` \r\n* Added `sem_acquire_timeout_ms()` and `sem_acquire_block_until()`\r\n\r\n#### hardware_adc\r\n* Added `adc_get_selected_input()`\r\n\r\n#### hardware_clocks\r\n* `clock_get_hz()` now returns actual achieved frequency rather than desired frequency\r\n\r\n#### hardware_dma\r\n* Added `dma_channel_is_claimed()`\r\n* Added new methods for configuring/acknowledging DMA IRQs. `dma_irqn_set_channel_enabled()`, `dma_irqn_set_channel_mask_enabled()`, `dma_irqn_get_channel_status()`, `dma_irqn_acknowledge_channel()` etc.\r\n\r\n#### hardware_exception\r\n\r\nNew library for setting ARM exception handlers:\r\n\r\n* Added `exception_set_exclusive_handler()`, `exception_restore_handler()`, `exception_get_vtable_handler()`\r\n\r\n#### hardware_flash\r\n\r\n* Exposed previously private function `flash_do_cmd()` for low level flash command execution\r\n\r\n#### hardware_gpio\r\n\r\n* Added `gpio_set_input_hysteresis_enabled()`, `gpio_is_input_hysteresis_enabled()`, `gpio_set_slew_rate()`, `gpio_get_slew_rate()`, `gpio_set_drive_strength()`, `gpio_get_drive_strength()`. `gpio_get_out_level()`, `gpio_set_irqover()`\r\n\r\n#### hardware_i2c\r\n\r\n* Corrected a number of incorrect hardware register definitions\r\n* A number of edge case in the i2c code fixed\r\n\r\n#### hardware_interp\r\n* Added `interp_lane_is_claimed()`, `interp_unclaim_lane_mask()`\r\n\r\n#### hardware_irq\r\n* Notably fixed the `PICO_LOWEST/HIGHEST_IRQ_PRIORITY` values which were backwards!\r\n\r\n#### hardware_pio\r\n\r\n* Added new methods for configuring/acknowledging PIO interrupts (`pio_set_irqn_source_enabled()`,\r\n  `pio_set_irqn_source_mask_enabled()`, `pio_interrupt_get()`, `pio_interrupt_clear()` etc.)\r\n* Added `pio_sm_is_claimed()`\r\n\r\n#### hardware_spi\r\n* Added `spi_get_baudrate()`\r\n* Changed `spi_init()` to return the set/achieved baud rate rather than void\r\n* Changed `spi_is_writable()` to return bool not size_t (it was always 1/0)\r\n  \r\n#### hardware_sync\r\n* Notable documentation improvements for spin lock functions\r\n* Added `spin_lock_is_claimed()`\r\n\r\n#### hardware_timer\r\n* Added `busy_wait_ms()` to match `busy_wait_us()`\r\n* Added `hardware_alarm_is_claimed()`\r\n\r\n#### pico_float/pico_double\r\n\r\n* Correctly save/restore divider state if floating point is used from interrupts\r\n\r\n#### pico_int64_ops\r\n\r\n* Added `PICO_INT64_OPS_IN_RAM` flag to move code into RAM to avoid veneers when calling code is in RAM\r\n\r\n#### pico_runtime\r\n\r\n* Added ability to override panic function by setting `PICO_PANIC_FUNCTION=foo` to the use `foo` as the implementation, or setting \r\n`PICO_PANIC_FUNCITON=` to simply breakpoint, saving some code space\r\n\r\n#### pico_unique_id\r\n\r\n* Added `pico_get_unique_board_id_string()`.\r\n\r\n### General code improvements\r\n* Cleanup up some additional classes of compiler warnings\r\n* Adding some missing `const` to method parameters\r\n\r\n### SVD  \r\n* USB DPRAM for device mode is now included\r\n\r\n### pioasm\r\n* Added `#pragma once` to C/C++ output\r\n\r\n### RTOS interoperability\r\n\r\nImprovements designed to make porting RTOSes either based on the SDK or supporting SDK code easier.\r\n\r\n* Added `PICO_DIVIDER_DISABLE_INTERRUPTS` flag to optionally configure all uses of the hardware divider to be guarded by disabling interrupts, rather than requiring on the RTOS to save/restore the divider state on context switch\r\n* Added new abstractions to `pico/lock_core.h` to allow an RTOS to inject replacement code for SDK based\r\nlow level wait, notify and sleep/timeouts used by synchonization primitives in `pico_sync` and for `sleep_` methods. If an RTOS implements these few simple methods, then all SDK semaphore, mutex, queue, sleep methods can be safely used both within/to/from RTOS tasks, but also to communicate with non RTOS task aware code, whether it be existing libraries and IRQ handlers or code running perhaps (though not necessarily) on the other core\r\n\r\n### CMake build changes\r\n\r\nSubstantive changes have been made to the CMake build, so if you are using a hand crafted non-CMake build, you **will** need to update your compile/link flags. Additionally changed some possibly confusing status messages from CMake build generation to be debug only\r\n\r\n### Boot Stage 2\r\n* New boot stage 2 for `AT25SF128A`\r\n\r\n","reactions":{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/44053585/reactions","total_count":8,"+1":2,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":1,"rocket":0,"eyes":1}},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/41058769","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/41058769/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/41058769/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.1.2","id":41058769,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTQxMDU4NzY5","tag_name":"1.1.2","target_commitish":"master","name":"1.1.2 bug fix release","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-04-07T13:17:18Z","updated_at":"2021-04-07T13:21:46Z","published_at":"2021-04-07T13:21:46Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.1.2","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.1.2","body":"Fixes issues with boot stage 2 selection"},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/40850757","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/40850757/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/40850757/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.1.1","id":40850757,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTQwODUwNzU3","tag_name":"1.1.1","target_commitish":"master","name":"1.1.1 bug fix release","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-04-01T22:25:45Z","updated_at":"2021-04-01T22:35:44Z","published_at":"2021-04-01T22:34:16Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.1.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.1.1","body":"This fixes a number of bugs, and additionally adds support for a board configuration header to choose the boot_stage2"},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/39345261","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/39345261/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/39345261/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.1.0","id":39345261,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM5MzQ1MjYx","tag_name":"1.1.0","target_commitish":"master","name":"SDK version 1.1.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-03-05T15:11:54Z","updated_at":"2021-06-03T17:01:34Z","published_at":"2021-03-05T15:16:09Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.1.0","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.1.0","body":"New Feature Highlights\r\n\r\n* Added board headers for Adafruit, Pimoroni & SparkFun boards\r\n    - new values for PICO_BOARD are `adafruit_feather_rp2040`, `adafruit_itsybitsy_rp2040`, `adafruit_qtpy_rp2040`,\r\n      `pimoroni_keybow2040`, `pimoroni_picosystem`, `pimoroni_tiny2040`, `sparkfun_micromod`,\r\n       `sparkfun_promicro`, `sparkfun_thingplus`, in addition to the existing `pico` and `vgaboard`.\r\n    - Added additional definitions for a default SPI, I2C pins as well as the existing ones for UART\r\n    - Allow _default_ pins to be undefined (not all boards have UART for example), and SDK will compile but warn as needed in the absence of default.\r\n    - Added additional definition for a default WS2812 compatible pin (currently unused).\r\n\r\n* New reset options\r\n    - Added `pico_bootsel_via_double_reset` library to allow reset to _BOOTSEL_ mode via double press of a RESET button\r\n    - When using `pico_stdio_usb` i.e. stdio connected via USB CDC to host, setting baud rate to 1200 (by default)\r\n      can optionally be used to reset into _BOOTSEL_ mode.\r\n    - When using `pico-stdio_usb` i.e. stdio connected via USB CDC to host, an additional interface may be added\r\n      to give _picotool_ control over resetting the device.\r\n\r\n* Build improvement for non SDK or existing library builds\r\n    - Removed additional compiler warnings (note register headers now use _u(x) macro for unsigned values though).\r\n    - Made build more clang friendly.\r\n\r\nThis release also contains many bug fixes, documentation updates and minor improvements.\r\n\r\nNote: there are some nominally backwards incompatible changes not worthy of a major version bump:\r\n    - `PICO_DEFAULT_UART_` defines now default to undefined if there is no default rather than -1 previously\r\n    - The broken `multicore_sleep_core1()` API has been removed; `multicore_reset_core1`\r\n      is already available to put core 1 into a deep sleep.\r\n"},{"url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/37201021","assets_url":"https://api.github.com/repos/raspberrypi/pico-sdk/releases/37201021/assets","upload_url":"https://uploads.github.com/repos/raspberrypi/pico-sdk/releases/37201021/assets{?name,label}","html_url":"https://github.com/raspberrypi/pico-sdk/releases/tag/1.0.1","id":37201021,"author":{"login":"kilograham","id":575810,"node_id":"MDQ6VXNlcjU3NTgxMA==","avatar_url":"https://avatars.githubusercontent.com/u/575810?v=4","gravatar_id":"","url":"https://api.github.com/users/kilograham","html_url":"https://github.com/kilograham","followers_url":"https://api.github.com/users/kilograham/followers","following_url":"https://api.github.com/users/kilograham/following{/other_user}","gists_url":"https://api.github.com/users/kilograham/gists{/gist_id}","starred_url":"https://api.github.com/users/kilograham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kilograham/subscriptions","organizations_url":"https://api.github.com/users/kilograham/orgs","repos_url":"https://api.github.com/users/kilograham/repos","events_url":"https://api.github.com/users/kilograham/events{/privacy}","received_events_url":"https://api.github.com/users/kilograham/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM3MjAxMDIx","tag_name":"1.0.1","target_commitish":"master","name":"SDK version 1.0.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-02-01T20:46:45Z","updated_at":"2021-02-01T21:07:28Z","published_at":"2021-02-01T21:07:28Z","assets":[],"tarball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/tarball/1.0.1","zipball_url":"https://api.github.com/repos/raspberrypi/pico-sdk/zipball/1.0.1","body":"- add `pico_get_unique_id` method to return a unique identifier for a Pico board using the identifier of the external flash\r\n- exposed all 4 pacing timers on the DMA peripheral (previously only 2 were exposed)\r\n- fixed ninja build (i.e. `cmake -G ninja .. ; ninja`)\r\n- minor other improvements and bug fixes\r\n\r\nAdditionally, a low level change was made to the way flash binaries start executing after `boot_stage2`. This was at the request of folks implementing other language runtimes. It is not generally of concern to end users, however it did require a change to the linker scripts so if you have cloned those to make modifications then you need to port across the relevant changes. If you are porting a different language runtime using the SDK boot_stage2 implementations then you should be aware that you should now have a vector table (rather than executable code) - at `0x10000100`\r\n\r\n"}]