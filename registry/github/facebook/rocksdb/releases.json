[{"url":"https://api.github.com/repos/facebook/rocksdb/releases/256502419","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/256502419/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/256502419/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.7.5","id":256502419,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84PSeqT","tag_name":"v10.7.5","target_commitish":"10.7.fb","name":"v10.7.5","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-10-20T18:17:17Z","updated_at":"2025-10-22T21:41:35Z","published_at":"2025-10-22T21:41:35Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.7.5","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.7.5","body":"## 10.7.5 (10/20/2025)\r\n### Bug Fixes\r\n* Fix a bug in Page unpinning in MultiScan\r\n\r\n## 10.7.4 (10/14/2025)\r\n### Public API Changes\r\n* The MultiScan API contract is updated. After a multi scan range got prepared with Prepare API call, the following seeks must seek the start of each prepared scan range in order. In addition, when limit is set, upper bound must be set to the same value of limit before each seek\r\n\r\n## 10.7.3 (10/06/2025)\r\n### Bug Fixes\r\n* Fix a few bugs in MultiScan\r\n\r\n## 10.7.2 (09/30/2025)\r\n### Bug Fixes\r\n* Fix incorrect MultiScan seek error status due to bugs in handling range limit falling between adjacent SST files key range.\r\n\r\n### Performance Improvements\r\n* Fixed a performance regression in LZ4 compression that started in version 10.6.0\r\n\r\n## 10.7.0 (09/24/2025)\r\n### New Features\r\n* Add the fail_if_no_udi_on_open flag in BlockBasedTableOption to control whether a missing user defined index block in a SST is a hard error or not.\r\n* A new flag memtable_veirfy_per_key_checksum_on_seek is added to AdvancedColumnFamilyOptions. When it is enabled, it will validate key checksum along the binary search path on skiplist based memtable during seek operation.\r\n* Introduce option MultiScanArgs::use_async_io to enable asynchronous I/O during MultiScan, instead of waiting for I/O to be done in Prepare().\r\n* Add new option `MultiScanArgs::max_prefetch_size` that limits the memory usage of per file pinning of prefetched blocks.\r\n* Improved `sst_dump` by allowing standalone file and directory arguments without `--file=`. Also added new options and better output for `sst_dump --command=recompress`. See `sst_dump --help`\r\n\r\n### Public API Changes\r\n* HyperClockCache with no `estimated_entry_charge` is now production-ready and is the preferred block cache implementation vs. LRUCache. Please consider updating your code to minimize the risk of hitting performance bottlenecks or anomalies from LRUCache. See cache.h for more detail.\r\n* RocksDB now requires a C++20 compatible compiler (GCC >= 11, Clang >= 10, Visual Studio >= 2019), including for any code using RocksDB headers.\r\n* MultiScanArgs used to have a default constructor with default parameter of BytewiseComparator. Now it always requires Comparator in its constructor.\r\n\r\n### Behavior Changes\r\n* The default provided block cache implementation is now HyperClockCache instead of LRUCache, when `block_cache` is nullptr (default) and `no_block_cache==false` (default). We recommend explicitly creating a HyperClockCache block cache based on memory budget and sharing it across all column families and even DB instances. This change could expose previously hidden memory or resource leaks.\r\n* Allow UDIs with a non BytewiseComparator\r\n\r\n### Bug Fixes\r\n* Reported numbers for compaction and flush CPU usage now include time spent by parallel compression worker threads. This now means compaction/flush CPU usage could exceed the wall clock time.\r\n* Fix a race condition in FIFO size-based compaction where concurrent threads could select the same non-L0 file, causing assertion failures in debug builds or \"Cannot delete table file from LSM tree\" errors in release builds.\r\n* Fix a bug in RocksDB MultiScan with UDI when one of the scan ranges is determined to be empty by the UDI, which causes incorrect results.\r\n\r\n### Performance Improvements\r\n* Add a new table property \"rocksdb.key.smallest.seqno\" which records the smallest sequence number of all keys in file. It makes ingesting DB generated files faster by\r\navoiding scanning the whole file to find the smallest sequence number.\r\n* Add a new experimental PerKeyPointLockManager to improve efficiency under high lock contention. PointLockManager was not efficient when there is high write contention on same key, as it uses a single conditional variable per lock stripe. PerKeyPointLockManager uses per thread conditional variable supporting fifo order. Although this is an experimental feature. By default, it is disabled. A new boolean flag TransactionDBOptions::use_per_key_point_lock_mgr is added to optionally enable it. Search the flag in code for more info.\r\nTogether, a new configuration TransactionOptions::deadlock_timeout_us is added, which allows the transaction to wait for a short period before perform deadlock detection. When the workload has low lock contention, the deadlock_timeout_us can be configured to be slightly higher than average transaction execution time, so that transaction would likely be able to take the lock before deadlock detection is performed when it is waiting for a lock. This allows transaction to reduce CPU cost on performing deadlock detection, which could be expensive in CPU time. When the workload has high lock contention, the deadlock_timeout_us can be configured to 0, so that transaction would perform deadlock detection immediately. By default the value is 0 to keep the behavior same as before.\r\n* Majorly improved CPU efficiency and scalability of parallel compression (`CompressionOptions::parallel_threads` > 1), though this efficiency improvement makes parallel compression currently incompatible with UserDefinedIndex and with old setting of `decouple_partitioned_filters=false`. Parallel compression is now considered a production-ready feature. Maximum performance is available with `-DROCKSDB_USE_STD_SEMAPHORES` at compile time, but this is not currently recommended because of reported bugs in implementations of `std::counting_semaphore`/`binary_semaphore`.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/256502419/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":1,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/256440980","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/256440980/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/256440980/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.6.2","id":256440980,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84PSPqU","tag_name":"v10.6.2","target_commitish":"10.6.fb","name":"v10.6.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-09-15T21:24:48Z","updated_at":"2025-10-22T17:48:16Z","published_at":"2025-10-22T17:48:16Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.6.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.6.2","body":"## 10.6.2 (09/15/2025)\r\n### Bug Fixes\r\n* Fix a race condition in FIFO size-based compaction where concurrent threads could select the same non-L0 file, causing assertion failures in debug builds or \"Cannot delete table file from LSM tree\" errors in release builds.\r\n\r\n## 10.6.1 (09/05/2025)\r\n### New Features\r\n* Add the fail_if_no_udi_on_open flag in BlockBasedTableOption to control whether a missing user defined index block in a SST is a hard error or not.\r\n* Add new option `MultiScanArgs::max_prefetch_size` that limits the memory usage of per file pinning of prefetched blocks.\r\n\r\n## 10.6.0 (08/22/2025)\r\n### New Features\r\n* Introduce column family option `cf_allow_ingest_behind`. This option aims to replace `DBOptions::allow_ingest_behind` to enable ingest behind at the per-CF level. `DBOptions::allow_ingest_behind` is deprecated.\r\n* Introduce `MultiScanArgs::io_coalesce_threshold` to allow a configurable IO coalescing threshold.\r\n\r\n### Public API Changes\r\n* `IngestExternalFileOptions::allow_db_generated_files` now allows files ingestion of any DB generated SST file, instead of only the ones with all keys having sequence number 0.\r\n* `decouple_partitioned_filters = true` is now the default in BlockBasedTableOptions.\r\n* GetTtl() API is now available in TTL DB\r\n* Minimum supported version of LZ4 library is now 1.7.0 (r129 from 2015)\r\n* Some changes to experimental Compressor and CompressionManager APIs\r\n* A new Filesystem::SyncFile function is added for syncing a file that was already written, such as on file ingestion. The default implementation matches previous RocksDB behavior: re-open the file for read-write, sync it, and close it. We recommend overriding for FileSystems that do not require syncing for crash recovery or do not handle (well) re-opening for writes.\r\n\r\n### Behavior Changes\r\n* When `allow_ingest_behind` is enabled, compaction will no longer drop tombstones based on the absence of underlying data. Tombstones will be preserved to apply to ingested files.\r\n\r\n### Bug Fixes\r\n* Files in dropped column family won't be returned to the caller upon successful, offline MANIFEST iteration in `GetFileChecksumsFromCurrentManifest`.\r\n* Fix a bug in MultiScan that causes it to fall back to a normal scan when dictionary compression is enabled.\r\n* Fix a crash in iterator Prepare() when fill_cache=false\r\n* Fix a bug in MultiScan where incorrect results can be returned when a Scan's range is across multiple files.\r\n* Fixed a bug in remote compaction that may mistakenly delete live SST file(s) during the cleanup phase when no keys survive the compaction (all expired)\r\n* Allow a user defined index to be configured from a string.\r\n* Make the User Defined Index interface consistently use the user key format, fixing the previous mixed usage of internal and user key.\r\n\r\n### Performance Improvements\r\n* Small improvement to CPU efficiency of compression using built-in algorithms, and a dramatic efficiency improvement for LZ4HC, based on reusing data structures between invocations.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/256440980/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/239087939","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/239087939/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/239087939/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.5.1","id":239087939,"author":{"login":"archang19","id":39173193,"node_id":"MDQ6VXNlcjM5MTczMTkz","avatar_url":"https://avatars.githubusercontent.com/u/39173193?v=4","gravatar_id":"","url":"https://api.github.com/users/archang19","html_url":"https://github.com/archang19","followers_url":"https://api.github.com/users/archang19/followers","following_url":"https://api.github.com/users/archang19/following{/other_user}","gists_url":"https://api.github.com/users/archang19/gists{/gist_id}","starred_url":"https://api.github.com/users/archang19/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/archang19/subscriptions","organizations_url":"https://api.github.com/users/archang19/orgs","repos_url":"https://api.github.com/users/archang19/repos","events_url":"https://api.github.com/users/archang19/events{/privacy}","received_events_url":"https://api.github.com/users/archang19/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84OQDFD","tag_name":"v10.5.1","target_commitish":"10.5.fb","name":"v10.5.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-08-05T17:45:52Z","updated_at":"2025-08-11T15:38:38Z","published_at":"2025-08-11T15:38:38Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.5.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.5.1","body":"## 10.5.1 (08/04/2025)\r\n### Bug Fixes\r\n* Fixed a bug in remote compaction that may mistakenly delete live SST file(s) during the cleanup phase when no keys survive the compaction (all expired)\r\n\r\n## 10.5.0 (07/21/2025)\r\n### Public API Changes\r\n* DB option skip_checking_sst_file_sizes_on_db_open is deprecated, in favor of validating file size in parallel in a thread pool, when db is opened. When DB is opened, with paranoid check enabled, a file with the wrong size would fail the DB open. With paranoid check disabled, the DB open would succeed, the column family with the corrupted file would not be read or write, while the other healthy column families could be read and write normally. When max_open_files option is not set to -1, only a subset of the files will be opened and checked. The rest of the files will be opened and checked when they are accessed.\r\n* GetTtl() API is now available in TTL DB\r\n\r\n### Behavior Changes\r\n* PessimisticTransaction::GetWaitingTxns now returns waiting transaction information even if the current transaction has timed out. This allows the information to be surfaced to users for debugging purposes once it is known that the timeout has occured.\r\n* A new API GetFileSize is added to FSRandomAccessFile interface class. It uses fstat vs stat on the posix implementation which is more efficient. Caller could use it to get file size faster. This function might be required in the future for FileSystem implementation outside of the RocksDB code base.\r\n* RocksDB now triggers eligible compactions every 12 hours when periodic compaction is configured. This solves a limitation of the compaction trigger mechanism, which would only trigger compaction after specific events like flush, compaction, or SetOptions.\r\n\r\n### Bug Fixes\r\n* Fix a bug in BackupEngine that can crash backup due to a null FSWritableFile passed to WritableFileWriter.\r\n* Fix DB::NewMultiScan iterator to respect the scan upper bound specified in ScanOptions\r\n\r\n### Performance Improvements\r\n* Optimized MultiScan using BlockBasedTable to coalesce I/Os and prefetch all data blocks.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/239087939/reactions","total_count":4,"+1":0,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/231636700","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/231636700/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/231636700/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.4.2","id":231636700,"author":{"login":"mszeszko-meta","id":188928785,"node_id":"U_kgDOC0LTEQ","avatar_url":"https://avatars.githubusercontent.com/u/188928785?v=4","gravatar_id":"","url":"https://api.github.com/users/mszeszko-meta","html_url":"https://github.com/mszeszko-meta","followers_url":"https://api.github.com/users/mszeszko-meta/followers","following_url":"https://api.github.com/users/mszeszko-meta/following{/other_user}","gists_url":"https://api.github.com/users/mszeszko-meta/gists{/gist_id}","starred_url":"https://api.github.com/users/mszeszko-meta/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mszeszko-meta/subscriptions","organizations_url":"https://api.github.com/users/mszeszko-meta/orgs","repos_url":"https://api.github.com/users/mszeszko-meta/repos","events_url":"https://api.github.com/users/mszeszko-meta/events{/privacy}","received_events_url":"https://api.github.com/users/mszeszko-meta/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Nzn7c","tag_name":"v10.4.2","target_commitish":"10.4.fb","name":"v10.4.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-07-09T18:14:20Z","updated_at":"2025-07-11T00:32:43Z","published_at":"2025-07-11T00:32:43Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.4.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.4.2","body":"## 10.4.2 (07/09/2025)\r\n### Bug Fixes\r\n* Fix a race condition between concurrent DB::Open sharing the same SstFileManager instance.\r\n\r\n## 10.4.1 (07/01/2025)\r\n### Behavior Changes\r\n* RocksDB now triggers eligible compactions every 12 hours when periodic compaction is configured. This solves a limitation of the compaction trigger mechanism, which would only trigger compaction after specific events like flush, compaction, or SetOptions.\r\n### Bug Fixes\r\n* Fix a bug in BackupEngine that can crash backup due to a null FSWritableFile passed to WritableFileWriter.\r\n\r\n## 10.4.0 (06/20/2025)\r\n### New Features\r\n* Add a new CF option `memtable_avg_op_scan_flush_trigger` that supports triggering memtable flush when an iterator scans through an expensive range of keys, with the average number of skipped keys from the active memtable exceeding the threshold.\r\n* Vector based memtable now supports concurrent writers (DBOptions::allow_concurrent_memtable_write) #13675.\r\n* Add new experimental `TransactionOptions::large_txn_commit_optimize_byte_threshold` to enable optimizations for large transaction commit by transaction batch data size.\r\n* Add a new option `CompactionOptionsUniversal::reduce_file_locking` and if it's true, auto universal compaction picking will adjust to minimize locking of input files when bottom priority compactions are waiting to run. This can increase the likelihood of existing L0s being selected for compaction, thereby improving write stall and reducing read regression.\r\n* Add new `format_version=7` to aid experimental support of custom compression algorithms with CompressionManager and block-based table. This format version includes changing the format of `TableProperties::compression_name`.\r\n\r\n### Public API Changes\r\n* Change NewExternalTableFactory to return a unique_ptr instead of shared_ptr.\r\n* Add an optional min file size requirement for deletion triggered compaction. It can be specified when creating `CompactOnDeletionCollectorFactory`.\r\n\r\n### Behavior Changes\r\n* `TransactionOptions::large_txn_commit_optimize_threshold` now has default value 0 for disabled. `TransactionDBOptions::txn_commit_bypass_memtable_threshold` now has no effect on transactions.\r\n\r\n### Bug Fixes\r\n* Fix a bug where CreateColumnFamilyWithImport() could miss the SST file for the memtable flush it triggered. The exported CF then may not contain the updates in the memtable when CreateColumnFamilyWithImport() is called.\r\n* Fix iterator operations returning NotImplemented status if disallow_memtable_writes and paranoid_memory_checks CF options are both set.\r\n* Fixed handling of file checksums in IngestExternalFile() to allow providing checksums using recognized but not necessarily the DB's preferred checksum function, to ease migration between checksum functions.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/231636700/reactions","total_count":7,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":5,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/215595508","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/215595508/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/215595508/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.2.1","id":215595508,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84M2bn0","tag_name":"v10.2.1","target_commitish":"10.2.fb","name":"","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-04-25T05:12:38Z","updated_at":"2025-05-13T17:02:55Z","published_at":"2025-04-29T21:06:48Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.2.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.2.1","body":"## 10.2.1 (2025-04-24)\r\n### Bug Fixes\r\n* Fix improper initialization of ExternalTableOptions\r\n\r\n## 10.2.0 (2025-04-21)\r\n### New Features\r\n* Provide histogram stats `COMPACTION_PREFETCH_BYTES` to measure number of bytes for RocksDB's prefetching (as opposed to file\r\nsystem's prefetch) on SST file during compaction read\r\n* A new API DB::GetNewestUserDefinedTimestamp is added to return the newest user defined timestamp seen in a column family\r\n* Introduce API `IngestWriteBatchWithIndex()` for ingesting updates into DB while bypassing memtable writes. This improves performance when writing a large write batch to the DB.\r\n* Add a new CF option `memtable_op_scan_flush_trigger` that triggers a flush of the memtable if an iterator's Seek()/Next() scans over a certain number of invisible entries from the memtable.\r\n\r\n### Public API Changes\r\n* AdvancedColumnFamilyOptions.max_write_buffer_number_to_maintain is deleted. It's deprecated since introduction of a better option max_write_buffer_size_to_maintain since RocksDB 6.5.0.\r\n* Deprecated API `DB::MaxMemCompactionLevel()`.\r\n* Deprecated `ReadOptions::ignore_range_deletions`.\r\n* Deprecated API `experimental::PromoteL0()`.\r\n* Added arbitrary string map for additional options to be overriden for remote compactions\r\n* The fail_if_options_file_error option in DBOptions has been removed. The behavior now is to always return failure in any API that fails to persist the OPTIONS file.\r\n\r\n### Behavior Changes\r\n* Make stats `PREFETCH_BYTES_USEFUL`, `PREFETCH_HITS`, `PREFETCH_BYTES` only account for prefetching during user initiated scan\r\n\r\n### Bug Fixes\r\n* Fix a bug in Posix file system that the FSWritableFile created via `FileSystem::ReopenWritableFile` internally does not track the correct file size.\r\n* Fix a bug where tail size of remote compaction output is not persisted in primary db's manifest","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/215595508/reactions","total_count":9,"+1":0,"-1":0,"laugh":0,"hooray":9,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/212316195","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/212316195/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/212316195/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.1.3","id":212316195,"author":{"login":"hx235","id":83968999,"node_id":"MDQ6VXNlcjgzOTY4OTk5","avatar_url":"https://avatars.githubusercontent.com/u/83968999?v=4","gravatar_id":"","url":"https://api.github.com/users/hx235","html_url":"https://github.com/hx235","followers_url":"https://api.github.com/users/hx235/followers","following_url":"https://api.github.com/users/hx235/following{/other_user}","gists_url":"https://api.github.com/users/hx235/gists{/gist_id}","starred_url":"https://api.github.com/users/hx235/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hx235/subscriptions","organizations_url":"https://api.github.com/users/hx235/orgs","repos_url":"https://api.github.com/users/hx235/repos","events_url":"https://api.github.com/users/hx235/events{/privacy}","received_events_url":"https://api.github.com/users/hx235/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Mp7Aj","tag_name":"v10.1.3","target_commitish":"main","name":"v10.1.3","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-04-14T20:46:01Z","updated_at":"2025-05-12T17:46:32Z","published_at":"2025-04-14T20:50:23Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.1.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.1.3","body":"## 10.1.3 (2025-04-09)\r\n### Bug Fixes\r\n* Fix a bug where resurrected full_history_ts_low from a previous session that enables UDT is used by this session that disables UDT.\r\n\r\n## 10.1.2 (2025-04-07)\r\n### Bug Fixes\r\n* Fix a bug where tail size of remote compaction output is not persisted in primary db's manifest\r\n\r\n## 10.1.0 (2025-03-24)\r\n### New Features\r\n* Added a new `DBOptions.calculate_sst_write_lifetime_hint_set` setting that allows to customize which compaction styles SST write lifetime hint calculation is allowed on. Today RocksDB supports only two modes `kCompactionStyleLevel` and `kCompactionStyleUniversal`.\r\n* Add a new field `num_l0_files` in `CompactionJobInfo` about the number of L0 files in the CF right before and after the compaction\r\n* Added per-key-placement feature in Remote Compaction\r\n* Implemented API DB::GetPropertiesOfTablesByLevel that retrieves table properties for files in each LSM tree level\r\n\r\n### Public API Changes\r\n* `GetAllKeyVersions()` now interprets empty slices literally, as valid keys, and uses new `OptSlice` type default value for extreme upper and lower range limits.\r\n* `DeleteFilesInRanges()` now takes `RangeOpt` which is based on `OptSlice`. The overload taking `RangePtr` is deprecated.\r\n* Add an unordered map of name/value pairs, ReadOptions::property_bag, to pass opaque options through to an external table when creating an Iterator.\r\n* Introduced CompactionServiceJobStatus::kAborted to allow handling aborted scenario in Schedule(), Wait() or OnInstallation() APIs in Remote Compactions.\r\n* format\\_version < 2 in BlockBasedTableOptions is no longer supported for writing new files. Support for reading such files is deprecated and might be removed in the future. `CompressedSecondaryCacheOptions::compress_format_version == 1` is also deprecated.\r\n\r\n### Behavior Changes\r\n* `ldb` now returns an error if the specified `--compression_type` is not supported in the build.\r\n* MultiGet with snapshot and ReadOptions::read_tier = kPersistedTier will now read a consistent view across CFs (instead of potentially reading some CF before and some CF after a flush).\r\n* CreateColumnFamily() is no longer allowed on a read-only DB (OpenForReadOnly())\r\n\r\n### Bug Fixes\r\n* Fixed stats for Tiered Storage with preclude_last_level feature","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/212316195/reactions","total_count":5,"+1":0,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":1,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/209174770","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/209174770/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/209174770/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.11.2","id":209174770,"author":{"login":"anand1976","id":33647610,"node_id":"MDQ6VXNlcjMzNjQ3NjEw","avatar_url":"https://avatars.githubusercontent.com/u/33647610?v=4","gravatar_id":"","url":"https://api.github.com/users/anand1976","html_url":"https://github.com/anand1976","followers_url":"https://api.github.com/users/anand1976/followers","following_url":"https://api.github.com/users/anand1976/following{/other_user}","gists_url":"https://api.github.com/users/anand1976/gists{/gist_id}","starred_url":"https://api.github.com/users/anand1976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anand1976/subscriptions","organizations_url":"https://api.github.com/users/anand1976/orgs","repos_url":"https://api.github.com/users/anand1976/repos","events_url":"https://api.github.com/users/anand1976/events{/privacy}","received_events_url":"https://api.github.com/users/anand1976/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Md8Dy","tag_name":"v9.11.2","target_commitish":"9.11.fb","name":"RocksDB 9.11.2 Release","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-03-29T21:42:01Z","updated_at":"2025-05-08T19:58:15Z","published_at":"2025-03-29T21:45:52Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.11.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.11.2","body":"# Rocksdb Change Log\r\n> NOTE: Entries for next release do not go here. Follow instructions in `unreleased_history/README.txt`\r\n\r\n## 9.11.2 (2025-03-29)\r\nBump patch version to fix a mistake in the previous 9.11 release tag\r\n\r\n## 9.11.1 (2025-02-19)\r\n### New Features\r\n* Added the ability to plug-in a custom table reader implementation. See include/rocksdb/external_table_reader.h for more details.\r\n\r\n## 9.11.0 (2025-01-17)\r\n### New Features\r\n* Introduce CancelAwaitingJobs() in CompactionService interface which will allow users to implement cancellation of running remote compactions from the primary instance\r\n* Experimental feature: RocksDB now supports defining secondary indices, which are automatically maintained by the storage engine. Secondary indices provide a new customization point: applications can provide their own by implementing the new `SecondaryIndex` interface. See the `SecondaryIndex` API comments for more details. Note: this feature is currently only available in conjunction with write-committed pessimistic transactions, and `Merge` is not yet supported.\r\n* Provide a new option `track_and_verify_wals` to track and verify various information about WAL during WAL recovery. This is intended to be a better replacement to `track_and_verify_wals_in_manifest`.\r\n\r\n### Public API Changes\r\n* Add `io_buffer_size` to BackupEngineOptions to enable optimal configuration of IO size\r\n* Clean up all the references to `random_access_max_buffer_size`, related rules and all the clients wrappers. This option has been officially deprecated in 5.4.0.\r\n* Add `file_ingestion_nanos` and `file_ingestion_blocking_live_writes_nanos` in PerfContext to observe file ingestions\r\n* Offer new DB::Open and variants that use `std::unique_ptr<DB>*` output parameters and deprecate the old versions that use `DB**` output parameters.\r\n* The DB::DeleteFile API is officially deprecated.\r\n\r\n### Behavior Changes\r\n* For leveled compaction, manual compaction (CompactRange()) will be more strict about keeping compaction size under `max_compaction_bytes`. This prevents overly large compactions in some cases (#13306).\r\n* Experimental tiering options `preclude_last_level_data_seconds` and `preserve_internal_time_seconds` are now mutable with `SetOptions()`. Some changes to handling of these features along with long-lived snapshots and range deletes made this possible.\r\n\r\n### Bug Fixes\r\n* Fix a longstanding major bug with SetOptions() in which setting changes can be quietly reverted.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/209174770/reactions","total_count":6,"+1":3,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":2,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/209422515","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/209422515/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/209422515/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v10.0.1","id":209422515,"author":{"login":"cbi42","id":102700264,"node_id":"U_kgDOBh8U6A","avatar_url":"https://avatars.githubusercontent.com/u/102700264?v=4","gravatar_id":"","url":"https://api.github.com/users/cbi42","html_url":"https://github.com/cbi42","followers_url":"https://api.github.com/users/cbi42/followers","following_url":"https://api.github.com/users/cbi42/following{/other_user}","gists_url":"https://api.github.com/users/cbi42/gists{/gist_id}","starred_url":"https://api.github.com/users/cbi42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbi42/subscriptions","organizations_url":"https://api.github.com/users/cbi42/orgs","repos_url":"https://api.github.com/users/cbi42/repos","events_url":"https://api.github.com/users/cbi42/events{/privacy}","received_events_url":"https://api.github.com/users/cbi42/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Me4iz","tag_name":"v10.0.1","target_commitish":"10.0.fb","name":"RocksDB 10.0.1 Release","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-03-07T01:32:20Z","updated_at":"2025-04-16T18:11:01Z","published_at":"2025-03-31T18:29:41Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v10.0.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v10.0.1","body":"## 10.0.1 (2025-03-05)\r\n### Public API Changes\r\n* Add an unordered map of name/value pairs, ReadOptions::property_bag, to pass opaque options through to an external table when creating an Iterator.\r\n* Introduced CompactionServiceJobStatus::kAborted to allow handling aborted scenario in Schedule(), Wait() or OnInstallation() APIs in Remote Compactions.\r\n* Added a column family option disallow_memtable_writes to safely fail any attempts to write to a non-default column family. This can be used for column families that are ingest only.\r\n\r\n## 10.0.0 (2025-02-21)\r\n### New Features\r\n* Introduced new `auto_refresh_iterator_with_snapshot` opt-in knob that (when enabled) will periodically release obsolete memory and storage resources for as long as the iterator is making progress and its supplied `read_options.snapshot` was initialized with non-nullptr value.\r\n* Added the ability to plug-in a custom table reader implementation. See include/rocksdb/external_table_reader.h for more details.\r\n* Experimental feature: RocksDB now supports FAISS inverted file based indices via the secondary indexing framework. Applications can use FAISS secondary indices to automatically quantize embeddings and perform K-nearest-neighbors similarity searches. See `FaissIVFIndex` and `SecondaryIndex` for more details. Note: the FAISS integration currently requires using the BUCK build.\r\n* Add new DB property `num_running_compaction_sorted_runs` that tracks the number of sorted runs being processed by currently running compactions\r\n* Experimental feature: added support for simple secondary indices that index the specified column as-is. See `SimpleSecondaryIndex` and `SecondaryIndex` for more details.\r\n* Added new `TransactionDBOptions::txn_commit_bypass_memtable_threshold`, which enables optimized transaction commit (see `TransactionOptions::commit_bypass_memtable`) when the transaction size exceeds a configured threshold.\r\n\r\n### Public API Changes\r\n* Updated the query API of the experimental secondary indexing feature by removing the earlier `SecondaryIndex::NewIterator` virtual and adding a `SecondaryIndexIterator` class that can be utilized by applications to find the primary keys for a given search target.\r\n* Added back the ability to leverage the primary key when building secondary index entries. This involved changes to the signatures of `SecondaryIndex::GetSecondary{KeyPrefix,Value}` as well as the addition of a new method `SecondaryIndex::FinalizeSecondaryKeyPrefix`. See the API comments for more details.\r\n* Minimum supported version of ZSTD is now 1.4.0, for code simplification. Obsolete `CompressionType` `kZSTDNotFinalCompression` is also removed.\r\n\r\n### Behavior Changes\r\n* `VerifyBackup` in `verify_with_checksum`=`true` mode will now evaluate checksums in parallel. As a result, unlike in case of original implementation, the API won't bail out on a very first corruption / mismatch and instead will iterate over all the backup files logging success / _degree_of_failure_ for each.\r\n* Reversed the order of updates to the same key in WriteBatchWithIndex. This means if there are multiple updates to the same key, the most recent update is ordered first. This affects the output of WBWIIterator. When WriteBatchWithIndex is created with `overwrite_key=true`, this affects the output only if Merge is used (#13387).\r\n* Added support for Merge operations in transactions using option `TransactionOptions::commit_bypass_memtable`.\r\n\r\n### Bug Fixes\r\n* Fixed GetMergeOperands() API in ReadOnlyDB and SecondaryDB\r\n* Fix a bug in `GetMergeOperands()` that can return incorrect status (MergeInProgress) and incorrect number of merge operands. This can happen when `GetMergeOperandsOptions::continue_cb` is set, both active and immutable memtables have merge operands and the callback stops the look up at the immutable memtable.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/209422515/reactions","total_count":11,"+1":2,"-1":0,"laugh":0,"hooray":5,"confused":0,"heart":4,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/192971290","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/192971290/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/192971290/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.10.0","id":192971290,"author":{"login":"archang19","id":39173193,"node_id":"MDQ6VXNlcjM5MTczMTkz","avatar_url":"https://avatars.githubusercontent.com/u/39173193?v=4","gravatar_id":"","url":"https://api.github.com/users/archang19","html_url":"https://github.com/archang19","followers_url":"https://api.github.com/users/archang19/followers","following_url":"https://api.github.com/users/archang19/following{/other_user}","gists_url":"https://api.github.com/users/archang19/gists{/gist_id}","starred_url":"https://api.github.com/users/archang19/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/archang19/subscriptions","organizations_url":"https://api.github.com/users/archang19/orgs","repos_url":"https://api.github.com/users/archang19/repos","events_url":"https://api.github.com/users/archang19/events{/privacy}","received_events_url":"https://api.github.com/users/archang19/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84LgIIa","tag_name":"v9.10.0","target_commitish":"main","name":"RocksDB 9.10.0 Release","draft":false,"immutable":false,"prerelease":false,"created_at":"2025-01-02T18:23:48Z","updated_at":"2025-01-23T13:14:04Z","published_at":"2025-01-02T18:31:00Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.10.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.10.0","body":"## 9.10.0 (2024-12-12)\r\n### New Features\r\n* Introduce `TransactionOptions::commit_bypass_memtable` to enable transaction commit to bypass memtable insertions. This can be beneficial for transactions with many operations, as it reduces commit time that is mostly spent on memtable insertion.\r\n### Public API Changes\r\n* Deprecated Remote Compaction APIs (StartV2, WaitForCompleteV2) are completely removed from the codebase\r\n### Behavior Changes\r\n* DB::KeyMayExist() now follows its function comment, which means `value` parameter can be null, and it will be set only if `value_found` is passed in.\r\n### Bug Fixes\r\n* Fix the issue where compaction incorrectly drops a key when there is a snapshot with a sequence number of zero.\r\n* Honor ConfigOptions.ignore_unknown_options in ParseStruct()\r\n### Performance Improvements\r\n* Enable reuse of file system allocated buffer for synchronous prefetching.\r\n* In buffered IO mode, try to align writes on power of 2 if checksum handoff is not enabled for the file type being written.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/192971290/reactions","total_count":18,"+1":6,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":3,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/191235396","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/191235396/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/191235396/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.9.3","id":191235396,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84LZgVE","tag_name":"v9.9.3","target_commitish":"main","name":"RocksDB release 9.9.3","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-12-17T18:04:45Z","updated_at":"2025-01-22T17:32:25Z","published_at":"2024-12-17T18:06:55Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.9.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.9.3","body":"## 9.9.3 (2024-12-03)\r\n### Performance Improvements\r\n* In buffered IO mode, try to align writes on power of 2 if checksum handoff is not enabled for the file type being written.\r\n\r\n## 9.9.2 (2024-11-22)\r\n### Bug Fixes\r\n* Honor ConfigOptions.ignore_unknown_options in ParseStruct()\r\n\r\n## 9.9.1 (2024-11-30)\r\n### Behavior Changes\r\n* Updates the hidden hook RocksDbThreadYieldAndCheckAbort() to support MySQL to abort long-running query.\r\n\r\n## 9.9.0 (2024-11-18)\r\n### New Features\r\n* Multi-Column-Family-Iterator (CoalescingIterator/AttributeGroupIterator) is no longer marked as experimental\r\n* Adds a new table property \"rocksdb.newest.key.time\" which records the unix timestamp of the newest key. Uses this table property for FIFO TTL and temperature change compaction.\r\n\r\n### Public API Changes\r\n* Added a new API `Transaction::GetAttributeGroupIterator` that can be used to create a multi-column-family attribute group iterator over the specified column families, including the data from both the transaction and the underlying database. This API is currently supported for optimistic and write-committed pessimistic transactions.\r\n* Added a new API `Transaction::GetCoalescingIterator` that can be used to create a multi-column-family coalescing iterator over the specified column families, including the data from both the transaction and the underlying database. This API is currently supported for optimistic and write-committed pessimistic transactions.\r\n\r\n### Behavior Changes\r\n* `BaseDeltaIterator` now honors the read option `allow_unprepared_value`.\r\n\r\n### Bug Fixes\r\n* `BaseDeltaIterator` now calls `PrepareValue` on the base iterator in case it has been created with the `allow_unprepared_value` read option set. Earlier, such base iterators could lead to incorrect values being exposed from `BaseDeltaIterator`.\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version 9.4.0.\r\n* Fix missing cases of corruption retry during DB open and read API processing.\r\n* Fix a bug for transaction db with 2pc where an old WAL may be retained longer than needed (#13127).\r\n* Fix leaks of some open SST files (until `DB::Close()`) that are written but never become live due to various failures. (We now have a check for such leaks with no outstanding issues.)\r\n* Fix a bug for replaying WALs for WriteCommitted transaction DB when its user-defined timestamps setting is toggled on/off between DB sessions.\r\n\r\n### Performance Improvements\r\n* Fix regression in issue #12038 due to `Options::compaction_readahead_size` greater than `max_sectors_kb` (i.e, largest I/O size that the OS issues to a block device defined in linux)\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/191235396/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":3,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/188808593","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/188808593/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/188808593/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.8.4","id":188808593,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84LQP2R","tag_name":"v9.8.4","target_commitish":"main","name":"RocksDB 9.8.4","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-12-03T21:20:09Z","updated_at":"2025-01-11T15:21:36Z","published_at":"2024-12-03T21:25:53Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.8.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.8.4","body":"## 9.8.4 (2024-11-18)\r\n### Behavior Changes\r\n* When Remote Compaction is enabled, do not purge OPTIONS file immediately by DeleteObsoleteOptionsFiles() after SetOptions(). Rely on PurgeObsoleteFiles() to clean up obsolete OPTIONS file after each compaction.\r\n\r\n## 9.8.3 (2024-11-12)\r\n### Bug Fixes\r\n* Fix missing cases of corruption retry during DB open and read API processing.\r\n\r\n## 9.8.2 (2024-11-06)\r\n### Public API Changes\r\n* Added a new API `Transaction::GetAttributeGroupIterator` that can be used to create a multi-column-family attribute group iterator over the specified column families, including the data from both the transaction and the underlying database. This API is currently supported for optimistic and write-committed pessimistic transactions.\r\n\r\n### Behavior Changes\r\n* `BaseDeltaIterator` now honors the read option `allow_unprepared_value`.\r\n\r\n### Bug Fixes\r\n* `BaseDeltaIterator` now calls `PrepareValue` on the base iterator in case it has been created with the `allow_unprepared_value` read option set. Earlier, such base iterators could lead to incorrect values being exposed from `BaseDeltaIterator`.\r\n* Fix a bug for replaying WALs for WriteCommitted transaction DB when its user-defined timestamps setting is toggled on/off between DB sessions.\r\n## 9.8.1 (2024-10-31)\r\n### Bug Fixes\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version \r\n9.4.0.\r\n\r\n## 9.8.0 (2024-10-25)\r\n### New Features\r\n* All non-`block_cache` options in `BlockBasedTableOptions` are now mutable with `DB::SetOptions()`.\r\n See also Bug Fixes below.\r\n* When using iterators with BlobDB, it is now possible to load large values on an on-demand basis, i\r\n.e. only if they are actually needed by the application. This can save I/O in use cases where the va\r\nlues associated with certain keys are not needed. For more details, see the new read option `allow_u\r\nnprepared_value` and the iterator API `PrepareValue`.\r\n* Add a new file ingestion option `IngestExternalFileOptions::fill_cache` to support not adding bloc\r\nks from ingested files into block cache during file ingestion.\r\n* The option `allow_unprepared_value` is now also supported for multi-column-family iterators (i.e. \r\n`CoalescingIterator` and `AttributeGroupIterator`).\r\n* When a file with just one range deletion (standalone range deletion file) is ingested via bulk loa\r\nding, it will be marked for compaction. During compaction, this type of files can be used to directl\r\ny filter out some input files that are not protected by any snapshots and completely deleted by the \r\nstandalone range deletion file.\r\n\r\n### Behavior Changes\r\n* During file ingestion, overlapping files level assignment are done in multiple batches, so that th\r\ney can potentially be assigned to lower levels other than always land on L0.\r\n* OPTIONS file to be loaded by remote worker is now preserved so that it does not get purged by the \r\nprimary host. A similar technique as how we are preserving new SST files from getting purged is used\r\n for this. min_options_file_numbers_ is tracked like pending_outputs_ is tracked.\r\n* Trim readahead_size during scans so data blocks containing keys that are not in the same prefix as\r\n the seek key in `Seek()` are not prefetched when `ReadOptions::auto_readahead_size=true` (default v\r\nalue) and `ReadOptions::prefix_same_as_start = true`\r\n* Assigning levels for external files are done in the same way for universal compaction and leveled \r\ncompaction. The old behavior tends to assign files to L0 while the new behavior will assign the file\r\ns to the lowest level possible.\r\n\r\n### Bug Fixes\r\n* Fix a longstanding race condition in SetOptions for `block_based_table_factory` options. The fix h\r\nas some subtle behavior changes because of copying and replacing the TableFactory on a change with S\r\netOptions, including requiring an Iterator::Refresh() for an existing Iterator to use the latest opt\r\nions.\r\n* Fix under counting of allocated memory in the compressed secondary cache due to looking at the com\r\npressed block size rather than the actual memory allocated, which could be larger due to internal fr\r\nagmentation.\r\n* `GetApproximateMemTableStats()` could return disastrously bad estimates 5-25% of the time. The fun\r\nction has been re-engineered to return much better estimates with similar CPU cost.\r\n* Skip insertion of compressed blocks in the secondary cache if the lowest_used_cache_tier DB option\r\n is kVolatileTier.\r\n* Fix an issue in level compaction where a small CF with small compaction debt can cause the DB to a\r\nllow parallel compactions. (#13054)\r\n* Several DB option settings could be lost through `GetOptionsFromString()`, possibly elsewhere as w\r\nell. Affected options, now fixed:`background_close_inactive_wals`, `write_dbid_to_manifest`, `write_\r\nidentity_file`, `prefix_seek_opt_in_only`","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/188808593/reactions","total_count":3,"+1":1,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":1,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183132707","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/183132707/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/183132707/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.7.4","id":183132707,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84K6mIj","tag_name":"v9.7.4","target_commitish":"main","name":"RocksDB 9.7.4","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-11-01T16:34:21Z","updated_at":"2025-01-10T09:10:01Z","published_at":"2024-11-01T16:39:27Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.7.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.7.4","body":"## 9.7.4 (2024-10-31)\r\n### Bug Fixes\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version 9.4.0.\r\n\r\n## 9.7.3 (2024-10-16)\r\n### Behavior Changes\r\n* OPTIONS file to be loaded by remote worker is now preserved so that it does not get purged by the primary host. A similar technique as how we are preserving new SST files from getting purged is used for this. min_options_file_numbers_ is tracked like pending_outputs_ is tracked.\r\n\r\n## 9.7.2 (2024-10-08)\r\n### Bug Fixes\r\n* Fix a bug for surfacing write unix time: `Iterator::GetProperty(\"rocksdb.iterator.write-time\")` for non-L0 files.\r\n\r\n## 9.7.1 (2024-09-26)\r\n### Bug Fixes\r\n* Several DB option settings could be lost through `GetOptionsFromString()`, possibly elsewhere as well. Affected options, now fixed:`background_close_inactive_wals`, `write_dbid_to_manifest`, `write_identity_file`, `prefix_seek_opt_in_only`\r\n* Fix under counting of allocated memory in the compressed secondary cache due to looking at the compressed block size rather than the actual memory allocated, which could be larger due to internal fragmentation.\r\n* Skip insertion of compressed blocks in the secondary cache if the lowest_used_cache_tier DB option is kVolatileTier.\r\n\r\n## 9.7.0 (2024-09-20)\r\n### New Features\r\n* Make Cache a customizable class that can be instantiated by the object registry.\r\n* Add new option `prefix_seek_opt_in_only` that makes iterators generally safer when you might set a `prefix_extractor`. When `prefix_seek_opt_in_only=true`, which is expected to be the future default, prefix seek is only used when `prefix_same_as_start` or `auto_prefix_mode` are set. Also, `prefix_same_as_start` and `auto_prefix_mode` now allow prefix filtering even with `total_order_seek=true`.\r\n* Add a new table property \"rocksdb.key.largest.seqno\" which records the largest sequence number of all keys in file. It is verified to be zero during SST file ingestion.\r\n\r\n### Behavior Changes\r\n* Changed the semantics of the BlobDB configuration option `blob_garbage_collection_force_threshold` to define \r\na threshold for the overall garbage ratio of all blob files currently eligible for garbage collection (accordin\r\ng to `blob_garbage_collection_age_cutoff`). This can provide better control over space amplification at the cos\r\nt of slightly higher write amplification.\r\n* Set `write_dbid_to_manifest=true` by default. This means DB ID will now be preserved through backups, checkpo\r\nints, etc. by default. Also add `write_identity_file` option which can be set to false for anticipated future b\r\nehavior.\r\n* In FIFO compaction, compactions for changing file temperature (configured by option `file_temperature_age_thr\r\nesholds`) will compact one file at a time, instead of merging multiple eligible file together (#13018).\r\n* Support ingesting db generated files using hard link, i.e. IngestExternalFileOptions::move_files/link_files a\r\nnd IngestExternalFileOptions::allow_db_generated_files.\r\n* Add a new file ingestion option `IngestExternalFileOptions::link_files` to hard link input files and preserve\r\n original files links after ingestion.\r\n* DB::Close now untracks files in SstFileManager, making avaialble any space used\r\nby them. Prior to this change they would be orphaned until the DB is re-opened.\r\n\r\n### Bug Fixes\r\n* Fix a bug in CompactRange() where result files may not be compacted in any future compaction. This can only h\r\nappen when users configure CompactRangeOptions::change_level to true and the change level step of manual compac\r\ntion fails (#13009).\r\n* Fix handling of dynamic change of `prefix_extractor` with memtable prefix filter. Previously, prefix seek cou\r\nld mix different prefix interpretations between memtable and SST files. Now the latest `prefix_extractor` at th\r\ne time of iterator creation or refresh is respected.\r\n* Fix a bug with manual_wal_flush and auto error recovery from WAL failure that may cause CFs to be inconsisten\r\nt (#12995). The fix will set potential WAL write failure as fatal error when manual_wal_flush is true, and disa\r\nbles auto error recovery from these errors.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183132707/reactions","total_count":10,"+1":3,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":1,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183128063","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/183128063/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/183128063/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.6.2","id":183128063,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84K6k__","tag_name":"v9.6.2","target_commitish":"main","name":"RocksDB 9.6.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-11-01T15:59:43Z","updated_at":"2024-11-01T16:06:40Z","published_at":"2024-11-01T16:06:40Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.6.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.6.2","body":"## 9.6.2 (10/31/2024)\r\n### Bug Fixes\r\n* Fix a leak of obsolete blob files left open until DB::Close(). This bug was introduced in version 9.4.0.\r\n\r\n## 9.6.1 (08/24/2024)\r\n### Bug Fixes\r\n* Fix correctness of MultiGet across column families with user timestamp.\r\n\r\n## 9.6.0 (08/19/2024)\r\n### New Features\r\n* *Best efforts recovery supports recovering to incomplete Version with a clean seqno cut that presents a valid point in time view from the user's perspective, if versioning history doesn't include atomic flush.\r\n* New option `BlockBasedTableOptions::decouple_partitioned_filters` should improve efficiency in serving read queries because filter and index partitions can consistently target the configured `metadata_block_size`. This option is currently opt-in.\r\n* Introduce a new mutable CF option `paranoid_memory_checks`. It enables additional validation on data integrity during reads/scanning. Currently, skip list based memtable will validate key ordering during look up and scans.\r\n\r\n### Public API Changes\r\n* Add ticker stats to count file read retries due to checksum mismatch\r\n* Adds optional installation callback function for remote compaction\r\n\r\n### Behavior Changes\r\n* There may be less intra-L0 compaction triggered by total L0 size being too small. We now use compensated file size (tombstones are assigned some value size) when calculating L0 size and reduce the threshold for L0 size limit. This is to avoid accumulating too much data/tombstones in L0.\r\n\r\n### Bug Fixes\r\n* *Make DestroyDB supports slow deletion when it's configured in `SstFileManager`. The slow deletion is subject to the configured `rate_bytes_per_sec`, but not subject to the `max_trash_db_ratio`.\r\n* Fixed a bug where we set unprep_seqs_ even when WriteImpl() fails. This was caught by stress test write fault injection in WriteImpl(). This may have incorrectly caused iteration creation failure for unvalidated writes or returned wrong result for WriteUnpreparedTxn::GetUnpreparedSequenceNumbers().\r\n* Fixed a bug where successful write right after error recovery for last failed write finishes causes duplicate WAL entries\r\n* Fixed a data race involving the background error status in `unordered_write` mode.\r\n* *Fix a bug where file snapshot functions like backup, checkpoint may attempt to copy a non-existing manifest \r\nfile. #12882\r\n* Fix a bug where per kv checksum corruption may be ignored in MultiGet().\r\n* Fix a race condition in pessimistic transactions that could allow multiple transactions with the same name to\r\n be registered simultaneously, resulting in a crash or other unpredictable behavior.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/183128063/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":1,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/179868289","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/179868289/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/179868289/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.7.3","id":179868289,"author":{"login":"ltamasi","id":47607618,"node_id":"MDQ6VXNlcjQ3NjA3NjE4","avatar_url":"https://avatars.githubusercontent.com/u/47607618?v=4","gravatar_id":"","url":"https://api.github.com/users/ltamasi","html_url":"https://github.com/ltamasi","followers_url":"https://api.github.com/users/ltamasi/followers","following_url":"https://api.github.com/users/ltamasi/following{/other_user}","gists_url":"https://api.github.com/users/ltamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ltamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ltamasi/subscriptions","organizations_url":"https://api.github.com/users/ltamasi/orgs","repos_url":"https://api.github.com/users/ltamasi/repos","events_url":"https://api.github.com/users/ltamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ltamasi/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84KuJKB","tag_name":"v9.7.3","target_commitish":"main","name":"RocksDB 9.7.3","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-10-17T20:40:11Z","updated_at":"2024-11-19T14:01:05Z","published_at":"2024-10-14T17:43:41Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.7.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.7.3","body":"## 9.7.3 (2024-10-16)\r\n### Behavior Changes\r\n* OPTIONS file to be loaded by remote worker is now preserved so that it does not get purged by the primary host. A similar technique as how we are preserving new SST files from getting purged is used for this. min_options_file_numbers_ is tracked like pending_outputs_ is tracked.\r\n\r\n## 9.7.2 (2024-08-10)\r\n### Bug Fixes\r\n* Fix a bug for surfacing write unix time: `Iterator::GetProperty(\"rocksdb.iterator.write-time\")` for non-L0 files.\r\n\r\n## 9.7.1 (2024-09-26)\r\n### Bug Fixes\r\n* Several DB option settings could be lost through `GetOptionsFromString()`, possibly elsewhere as well. Affected options, now fixed:`background_close_inactive_wals`, `write_dbid_to_manifest`, `write_identity_file`, `prefix_seek_opt_in_only`\r\n* Fix under counting of allocated memory in the compressed secondary cache due to looking at the compressed block size rather than the actual memory allocated, which could be larger due to internal fragmentation.\r\n* Skip insertion of compressed blocks in the secondary cache if the lowest_used_cache_tier DB option is kVolatileTier.\r\n\r\n## 9.7.0 (2024-09-20)\r\n### New Features\r\n* Make Cache a customizable class that can be instantiated by the object registry.\r\n* Add new option `prefix_seek_opt_in_only` that makes iterators generally safer when you might set a `prefix_extractor`. When `prefix_seek_opt_in_only=true`, which is expected to be the future default, prefix seek is only used when `prefix_same_as_start` or `auto_prefix_mode` are set. Also, `prefix_same_as_start` and `auto_prefix_mode` now allow prefix filtering even with `total_order_seek=true`.\r\n* Add a new table property \"rocksdb.key.largest.seqno\" which records the largest sequence number of all keys in file. It is verified to be zero during SST file ingestion.\r\n\r\n### Behavior Changes\r\n* Changed the semantics of the BlobDB configuration option `blob_garbage_collection_force_threshold` to define a threshold for the overall garbage ratio of all blob files currently eligible for garbage collection (according to `blob_garbage_collection_age_cutoff`). This can provide better control over space amplification at the cost of slightly higher write amplification.\r\n* Set `write_dbid_to_manifest=true` by default. This means DB ID will now be preserved through backups, checkpoints, etc. by default. Also add `write_identity_file` option which can be set to false for anticipated future behavior.\r\n* In FIFO compaction, compactions for changing file temperature (configured by option `file_temperature_age_thresholds`) will compact one file at a time, instead of merging multiple eligible file together (#13018).\r\n* Support ingesting db generated files using hard link, i.e. IngestExternalFileOptions::move_files/link_files and IngestExternalFileOptions::allow_db_generated_files.\r\n* Add a new file ingestion option `IngestExternalFileOptions::link_files` to hard link input files and preserve original files links after ingestion.\r\n* DB::Close now untracks files in SstFileManager, making avaialble any space used\r\nby them. Prior to this change they would be orphaned until the DB is re-opened.\r\n\r\n### Bug Fixes\r\n* Fix a bug in CompactRange() where result files may not be compacted in any future compaction. This can only happen when users configure CompactRangeOptions::change_level to true and the change level step of manual compaction fails (#13009).\r\n* Fix handling of dynamic change of `prefix_extractor` with memtable prefix filter. Previously, prefix seek could mix different prefix interpretations between memtable and SST files. Now the latest `prefix_extractor` at the time of iterator creation or refresh is respected.\r\n* Fix a bug with manual_wal_flush and auto error recovery from WAL failure that may cause CFs to be inconsistent (#12995). The fix will set potential WAL write failure as fatal error when manual_wal_flush is true, and disables auto error recovery from these errors.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/179868289/reactions","total_count":13,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":4,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/173898088","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/173898088/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/173898088/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.6.1","id":173898088,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84KXXlo","tag_name":"v9.6.1","target_commitish":"main","name":"RocksDB 9.6.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-09-06T18:08:46Z","updated_at":"2024-09-16T14:50:37Z","published_at":"2024-09-06T18:11:59Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.6.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.6.1","body":"## 9.6.1 (2024-08-24)\r\n### Bug Fixes\r\n* Fix correctness of MultiGet across column families with user timestamp.\r\n\r\n## 9.6.0 (2024-08-19)\r\n### New Features\r\n* *Best efforts recovery supports recovering to incomplete Version with a clean seqno cut that presents a valid point in time view from the user's perspective, if versioning history doesn't include atomic flush.\r\n* New option `BlockBasedTableOptions::decouple_partitioned_filters` should improve efficiency in serving read queries because filter and index partitions can consistently target the configured `metadata_block_size`. This option is currently opt-in.\r\n* Introduce a new mutable CF option `paranoid_memory_checks`. It enables additional validation on data integrity during reads/scanning. Currently, skip list based memtable will validate key ordering during look up and scans.\r\n\r\n### Public API Changes\r\n* Add ticker stats to count file read retries due to checksum mismatch\r\n* Adds optional installation callback function for remote compaction\r\n\r\n### Behavior Changes\r\n* There may be less intra-L0 compaction triggered by total L0 size being too small. We now use compensated file size (tombstones are assigned some value size) when calculating L0 size and reduce the threshold for L0 size limit. This is to avoid accumulating too much data/tombstones in L0.\r\n\r\n### Bug Fixes\r\n* *Make DestroyDB supports slow deletion when it's configured in `SstFileManager`. The slow deletion is subject to the configured `rate_bytes_per_sec`, but not subject to the `max_trash_db_ratio`.\r\n* Fixed a bug where we set unprep_seqs_ even when WriteImpl() fails. This was caught by stress test write fault injection in WriteImpl(). This may have incorrectly caused iteration creation failure for unvalidated writes or returned wrong result for WriteUnpreparedTxn::GetUnpreparedSequenceNumbers().\r\n* Fixed a bug where successful write right after error recovery for last failed write finishes causes duplicate WAL entries\r\n* Fixed a data race involving the background error status in `unordered_write` mode.\r\n* *Fix a bug where file snapshot functions like backup, checkpoint may attempt to copy a non-existing manifest file. #12882\r\n* Fix a bug where per kv checksum corruption may be ignored in MultiGet().\r\n* Fix a race condition in pessimistic transactions that could allow multiple transactions with the same name to be registered simultaneously, resulting in a crash or other unpredictable behavior.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/173898088/reactions","total_count":8,"+1":0,"-1":0,"laugh":0,"hooray":5,"confused":0,"heart":3,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/171297416","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/171297416/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/171297416/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.5.2","id":171297416,"author":{"login":"hx235","id":83968999,"node_id":"MDQ6VXNlcjgzOTY4OTk5","avatar_url":"https://avatars.githubusercontent.com/u/83968999?v=4","gravatar_id":"","url":"https://api.github.com/users/hx235","html_url":"https://github.com/hx235","followers_url":"https://api.github.com/users/hx235/followers","following_url":"https://api.github.com/users/hx235/following{/other_user}","gists_url":"https://api.github.com/users/hx235/gists{/gist_id}","starred_url":"https://api.github.com/users/hx235/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hx235/subscriptions","organizations_url":"https://api.github.com/users/hx235/orgs","repos_url":"https://api.github.com/users/hx235/repos","events_url":"https://api.github.com/users/hx235/events{/privacy}","received_events_url":"https://api.github.com/users/hx235/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84KNcqI","tag_name":"v9.5.2","target_commitish":"main","name":"RocksDB 9.5.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-08-21T15:27:54Z","updated_at":"2024-09-10T08:50:43Z","published_at":"2024-08-21T15:10:36Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.5.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.5.2","body":"## 9.5.2 (2024-08-13)\r\n### Bug Fixes\r\n* Fix a race condition in pessimistic transactions that could allow multiple transactions with the same name to be registered simultaneously, resulting in a crash or other unpredictable behavior.\r\n\r\n### Public API Changes\r\n* Add ticker stats to count file read retries due to checksum mismatch\r\n\r\n## 9.5.1 (2024-08-02)\r\n### Bug Fixes\r\n* *Make DestroyDB supports slow deletion when it's configured in `SstFileManager`. The slow deletion is subject to the configured `rate_bytes_per_sec`, but not subject to the `max_trash_db_ratio`.\r\n\r\n## 9.5.0 (2024-07-19)\r\n### Public API Changes\r\n* Introduced new C API function rocksdb_writebatch_iterate_cf for column family-aware iteration over the contents of a WriteBatch\r\n* Add support to ingest SST files generated by a DB instead of SstFileWriter. This can be enabled with experimental option `IngestExternalFileOptions::allow_db_generated_files`.\r\n\r\n### Behavior Changes\r\n* When calculating total log size for the `log_size_for_flush` argument in `CreateCheckpoint` API, the size of the archived log will not be included to avoid unnecessary flush\r\n\r\n### Bug Fixes\r\n* Fix a major bug in which an iterator using prefix filtering and SeekForPrev might miss data when the DB is using `whole_key_filtering=false` and `partition_filters=true`.\r\n* Fixed a bug where `OnErrorRecoveryBegin()` is not called before auto recovery starts.\r\n* Fixed a bug where event listener reads ErrorHandler's `bg_error_` member without holding db mutex(#12803).\r\n* Fixed a bug in handling MANIFEST write error that caused the latest valid MANIFEST file to get deleted, resulting in the DB being unopenable.\r\n* Fixed a race between error recovery due to manifest sync or write failure and external SST file ingestion. Both attempt to write a new manifest file, which causes an assertion failure.\r\n\r\n### Performance Improvements\r\n* Fix an issue where compactions were opening table files and reading table properties while holding db mutex_.\r\n* Reduce unnecessary filesystem queries and DB mutex acquires in creating backups and checkpoints.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/171297416/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/165265553","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/165265553/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/165265553/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.4.0","id":165265553,"author":{"login":"cbi42","id":102700264,"node_id":"U_kgDOBh8U6A","avatar_url":"https://avatars.githubusercontent.com/u/102700264?v=4","gravatar_id":"","url":"https://api.github.com/users/cbi42","html_url":"https://github.com/cbi42","followers_url":"https://api.github.com/users/cbi42/followers","following_url":"https://api.github.com/users/cbi42/following{/other_user}","gists_url":"https://api.github.com/users/cbi42/gists{/gist_id}","starred_url":"https://api.github.com/users/cbi42/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cbi42/subscriptions","organizations_url":"https://api.github.com/users/cbi42/orgs","repos_url":"https://api.github.com/users/cbi42/repos","events_url":"https://api.github.com/users/cbi42/events{/privacy}","received_events_url":"https://api.github.com/users/cbi42/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84J2cCR","tag_name":"v9.4.0","target_commitish":"9.4.fb","name":"RocksDB 9.4.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-06-24T23:48:34Z","updated_at":"2024-07-13T09:01:19Z","published_at":"2024-07-12T23:07:26Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.4.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.4.0","body":"## 9.4.0 (2024-06-23)\r\n### New Features\r\n* Added a `CompactForTieringCollectorFactory` to auto trigger compaction for tiering use case.\r\n* Optimistic transactions and pessimistic transactions with the WriteCommitted policy now support the `GetEntityForUpdate` API.\r\n* Added a new \"count\" command to the ldb repl shell. By default, it prints a count of keys in the database from start to end. The options --from=<key> and/or --to=<key> can be specified to limit the range.\r\n* Add `rocksdb_writebatch_update_timestamps`, `rocksdb_writebatch_wi_update_timestamps` in C API.\r\n* Add `rocksdb_iter_refresh` in C API.\r\n* Add `rocksdb_writebatch_create_with_params`, `rocksdb_writebatch_wi_create_with_params` to create WB and WBWI with all options in C API\r\n\r\n### Public API Changes\r\n* Deprecated names `LogFile` and `VectorLogPtr` in favor of new names `WalFile` and `VectorWalPtr`.\r\n* Introduce a new universal compaction option CompactionOptionsUniversal::max_read_amp which allows user to define the limit on the number of sorted runs separately from the trigger for compaction (`level0_file_num_compaction_trigger`) #12477.\r\n\r\n### Behavior Changes\r\n* Inactive WALs are immediately closed upon being fully sync-ed rather than in a background thread. This is to ensure LinkFile() is not called on files still open for write, which might not be supported by some FileSystem implementations. This should not be a performance issue, but an opt-out is available with with new DB option `background_close_inactive_wals`.\r\n\r\n### Bug Fixes\r\n* Fix a rare case in which a hard-linked WAL in a Checkpoint is not fully synced (so might lose data on power loss).\r\n* Fixed the output of the `ldb dump_wal` command for `PutEntity` records so it prints the key and correctly resets the hexadecimal formatting flag after printing the wide-column entity.\r\n* Fixed an issue where `PutEntity` records were handled incorrectly while rebuilding transactions during recovery.\r\n* Various read operations could ignore various ReadOptions that might be relevant. Fixed many such cases, which can result in behavior change but a better reflection of specified options.\r\n\r\n### Performance Improvements\r\n* Improved write throughput to memtable when there's a large number of concurrent writers and allow_concurrent_memtable_write=true(#12545)","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/165265553/reactions","total_count":9,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":7,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/163059580","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/163059580/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/163059580/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.3.1","id":163059580,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JuBd8","tag_name":"v9.3.1","target_commitish":"9.3.fb","name":"RocksDB 9.3.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-06-04T18:43:02Z","updated_at":"2024-07-02T09:19:24Z","published_at":"2024-06-28T20:38:18Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.3.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.3.1","body":"## 9.3.1 (2024-05-25)\r\n### Bug Fixes\r\n* [internal only] Build script improvement\r\n\r\n## 9.3.0 (2024-05-17)\r\n### New Features\r\n* Optimistic transactions and pessimistic transactions with the WriteCommitted policy now support the `GetEntity` API.\r\n* Added new `Iterator` property, \"rocksdb.iterator.is-value-pinned\", for checking whether the `Slice` returned by `Iterator::value()` can be used until the `Iterator` is destroyed.\r\n* Optimistic transactions and WriteCommitted pessimistic transactions now support the `MultiGetEntity` API.\r\n* Optimistic transactions and pessimistic transactions with the WriteCommitted policy now support the `PutEntity` API. Support for read APIs and other write policies (WritePrepared, WriteUnprepared) will be added later.\r\n\r\n### Public API Changes\r\n* Exposed block based metadata cache options via C API\r\n* Exposed compaction pri via c api.\r\n* Add a kAdmPolicyAllowAll option to TieredAdmissionPolicy that admits all blocks evicted from the primary block cache into the compressed secondary cache.\r\n\r\n### Behavior Changes\r\n* CompactRange() with change_level=true on a CF with FIFO compaction will return Status::NotSupported().\r\n* External file ingestion with FIFO compaction will always ingest to L0.\r\n\r\n### Bug Fixes\r\n* Fixed a bug for databases using `DBOptions::allow_2pc == true` (all `TransactionDB`s except `OptimisticTransactionDB`) that have exactly one column family. Due to a missing WAL sync, attempting to open the DB could have returned a `Status::Corruption` with a message like \"SST file is ahead of WALs\".\r\n* Fix a bug in CreateColumnFamilyWithImport() where if multiple CFs are imported, we were not resetting files' epoch number and L0 files can have overlapping key range but the same epoch number.\r\n* Fixed race conditions when `ColumnFamilyOptions::inplace_update_support == true` between user overwrites and reads on the same key.\r\n* Fix a bug where `CompactFiles()` can compact files of range conflict with other ongoing compactions' when `preclude_last_level_data_seconds > 0` is used\r\n* Fixed a false positive `Status::Corruption` reported when reopening a DB that used `DBOptions::recycle_log_file_num > 0` and `DBOptions::wal_compression != kNoCompression`.\r\n* While WAL is locked with LockWAL(), some operations like Flush() and IngestExternalFile() are now blocked as they should have been.\r\n* Fixed a bug causing stale memory access when using the TieredSecondaryCache with an NVM secondary cache, and a file system that supports return an FS allocated buffer for MultiRead (FSSupportedOps::kFSBuffer is set).","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/163059580/reactions","total_count":5,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":5,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/157175383","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/157175383/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/157175383/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.2.1","id":157175383,"author":{"login":"anand1976","id":33647610,"node_id":"MDQ6VXNlcjMzNjQ3NjEw","avatar_url":"https://avatars.githubusercontent.com/u/33647610?v=4","gravatar_id":"","url":"https://api.github.com/users/anand1976","html_url":"https://github.com/anand1976","followers_url":"https://api.github.com/users/anand1976/followers","following_url":"https://api.github.com/users/anand1976/following{/other_user}","gists_url":"https://api.github.com/users/anand1976/gists{/gist_id}","starred_url":"https://api.github.com/users/anand1976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/anand1976/subscriptions","organizations_url":"https://api.github.com/users/anand1976/orgs","repos_url":"https://api.github.com/users/anand1976/repos","events_url":"https://api.github.com/users/anand1976/events{/privacy}","received_events_url":"https://api.github.com/users/anand1976/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JXk5X","tag_name":"v9.2.1","target_commitish":"9.2.fb","name":"RocksDB 9.2.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-05-08T23:03:15Z","updated_at":"2024-05-23T18:36:25Z","published_at":"2024-05-23T17:14:58Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.2.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.2.1","body":"## 9.2.1 (2024-05-03)\r\n### Public API Changes\r\n* Add a kAdmPolicyAllowAll option to TieredAdmissionPolicy that admits all blocks evicted from the primary block cache into the compressed secondary cache.\r\n\r\n## 9.2.0 (2024-05-01)\r\n### New Features\r\n* Added two options `deadline` and `max_size_bytes` for CacheDumper to exit early\r\n* Added a new API `GetEntityFromBatchAndDB` to `WriteBatchWithIndex` that can be used for wide-column point lookups with read-your-own-writes consistency. Similarly to `GetFromBatchAndDB`, the API can combine data from the write batch with data from the underlying database if needed. See the API comments for more details.\r\n* [Experimental] Introduce two new cross-column-family iterators - CoalescingIterator and AttributeGroupIterator. The CoalescingIterator enables users to iterate over multiple column families and access their values and columns. During this iteration, if the same key exists in more than one column family, the keys in the later column family will overshadow the previous ones. The AttributeGroupIterator allows users to gather wide columns per Column Family and create attribute groups while iterating over keys across all CFs.\r\n* Added a new API `MultiGetEntityFromBatchAndDB` to `WriteBatchWithIndex` that can be used for batched wide-column point lookups with read-your-own-writes consistency. Similarly to `MultiGetFromBatchAndDB`, the API can combine data from the write batch with data from the underlying database if needed. See the API comments for more details.\r\n* *Adds a `SstFileReader::NewTableIterator` API to support programmatically read a SST file as a raw table file.\r\n* Add an option to `WaitForCompactOptions` - `wait_for_purge` to make `WaitForCompact()` API wait for background purge to complete\r\n\r\n### Public API Changes\r\n* DeleteRange() will return NotSupported() if row_cache is configured since they don't work together in some cases.\r\n* Deprecated `CompactionOptions::compression` since `CompactionOptions`'s API for configuring compression was incomplete, unsafe, and likely unnecessary\r\n* Using `OptionChangeMigration()` to migrate from non-FIFO to FIFO compaction\r\nwith `Options::compaction_options_fifo.max_table_files_size` > 0 can cause\r\nthe whole DB to be dropped right after migration if the migrated data is larger than\r\n`max_table_files_size`\r\n\r\n### Behavior Changes\r\n* Enabling `BlockBasedTableOptions::block_align` is now incompatible (i.e., APIs will return `Status::InvalidArgument`) with more ways of enabling compression: `CompactionOptions::compression`, `ColumnFamilyOptions::compression_per_level`, and `ColumnFamilyOptions::bottommost_compression`.\r\n* Changed the default value of `CompactionOptions::compression` to `kDisableCompressionOption`, which means the compression type is determined by the `ColumnFamilyOptions`.\r\n* `BlockBasedTableOptions::optimize_filters_for_memory` is now set to true by default. When `partition_filters=false`, this could lead to somewhat increased average RSS memory usage by the block cache, but this \"extra\" usage is within the allowed memory budget and should make memory usage more consistent (by minimizing internal fragmentation for more kinds of blocks).\r\n* Dump all keys for cache dumper impl if `SetDumpFilter()` is not called\r\n* `CompactRange()` with `CompactRangeOptions::change_level = true` and `CompactRangeOptions::target_level = 0` that ends up moving more than 1 file from non-L0 to L0 will return `Status::Aborted()`.\r\n* On distributed file systems that support file system level checksum verification and reconstruction reads, RocksDB will now retry a file read if the initial read fails RocksDB block level or record level checksum verification. This applies to MANIFEST file reads when the DB is opened, and to SST file reads at all times.\r\n\r\n### Bug Fixes\r\n* Fix a bug causing `VerifyFileChecksums()` to return false-positive corruption under `BlockBasedTableOptions::block_align=true`\r\n* Provide consistent view of the database across the column families for `NewIterators()` API.\r\n* Fixed feature interaction bug for `DeleteRange()` together with `ColumnFamilyOptions::memtable_insert_with_hint_prefix_extractor`. The impact of this bug would likely be corruption or crashing.\r\n* Fixed hang in `DisableManualCompactions()` where compactions waiting to be scheduled due to conflicts would not be canceled promptly\r\n* Fixed a regression when `ColumnFamilyOptions::max_successive_merges > 0` where the CPU overhead for deciding whether to merge could have increased unless the user had set the option `ColumnFamilyOptions::strict_max_successive_merges`\r\n* Fixed a bug in `MultiGet()` and `MultiGetEntity()` together with blob files (`ColumnFamilyOptions::enable_blob_files == true`). An error looking up one of the keys could cause the results to be wrong for other keys for which the statuses were `Status::OK`.\r\n* Fixed a bug where wrong padded bytes are used to generate file checksum and `DataVerificationInfo::checksum` upon file creation\r\n* Correctly implemented the move semantics of `PinnableWideColumns`.\r\n* Fixed a bug when the recycle_log_file_num in DBOptions is changed from 0 to non-zero when a DB is reopened. On a subsequent reopen, if a log file created when recycle_log_file_num==0 was reused previously, is alive and is empty, we could end up inserting stale WAL records into the memtable.\r\n* *Fix a bug where obsolete files' deletion during DB::Open are not rate limited with `SstFilemManager`'s slow deletion feature even if it's configured.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/157175383/reactions","total_count":6,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":5,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/152271174","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/152271174/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/152271174/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.1.1","id":152271174,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JE3lG","tag_name":"v9.1.1","target_commitish":"9.1.fb","name":"RocksDB 9.1.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-04-22T18:35:44Z","updated_at":"2024-04-23T06:52:42Z","published_at":"2024-04-22T18:36:27Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.1.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.1.1","body":"## 9.1.1 (2024-04-17)\r\n### Bug Fixes\r\n* Fixed Java `SstFileMetaData` to prevent throwing `java.lang.NoSuchMethodError`\r\n* Fixed a regression when `ColumnFamilyOptions::max_successive_merges > 0` where the CPU overhead for deciding whether to merge could have increased unless the user had set the option `ColumnFamilyOptions::strict_max_successive_merges`"},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151805611","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/151805611/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/151805611/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.1.0","id":151805611,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JDF6r","tag_name":"v9.1.0","target_commitish":"main","name":"RocksDB 9.1.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-04-18T18:45:47Z","updated_at":"2024-04-22T08:25:21Z","published_at":"2024-04-18T18:47:06Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.1.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.1.0","body":"## 9.1.0 (2024-03-22)\r\n### New Features\r\n* Added an option, `GetMergeOperandsOptions::continue_cb`, to give users the ability to end `GetMergeOperands()`'s lookup process before all merge operands were found.\r\n* *Add sanity checks for ingesting external files that currently checks if the user key comparator used to create the file is compatible with the column family's user key comparator.\r\n*Support ingesting external files for column family that has user-defined timestamps in memtable only enabled.\r\n* On file systems that support storage level data checksum and reconstruction, retry SST block reads for point lookups, scans, and flush and compaction if there's a checksum mismatch on the initial read.\r\n* Some enhancements and fixes to experimental Temperature handling features, including new `default_write_temperature` CF option and opening an `SstFileWriter` with a temperature.\r\n* `WriteBatchWithIndex` now supports wide-column point lookups via the `GetEntityFromBatch` API. See the API comments for more details.\r\n* *Implement experimental features: API `Iterator::GetProperty(\"rocksdb.iterator.write-time\")` to allow users to get data's approximate write unix time and write data with a specific write time via `WriteBatch::TimedPut` API.\r\n\r\n### Public API Changes\r\n* Best-effort recovery (`best_efforts_recovery == true`) may now be used together with atomic flush (`atomic_flush == true`). The all-or-nothing recovery guarantee for atomically flushed data will be upheld.\r\n* Remove deprecated option `bottommost_temperature`, already replaced by `last_level_temperature`\r\n* Added new PerfContext counters for block cache bytes read - block_cache_index_read_byte, block_cache_filter_read_byte, block_cache_compression_dict_read_byte, and block_cache_read_byte.\r\n* Deprecate experimental Remote Compaction APIs - StartV2() and WaitForCompleteV2() and introduce Schedule() and Wait(). The new APIs essentially does the same thing as the old APIs. They allow taking externally generated unique id to wait for remote compaction to complete.\r\n* *For API `WriteCommittedTransaction::GetForUpdate`, if the column family enables user-defined timestamp, it was mandated that argument `do_validate` cannot be false, and UDT based validation has to be done with a user set read timestamp. It's updated to make the UDT based validation optional if user sets `do_validate` to false and does not set a read timestamp. With this, `GetForUpdate` skips UDT based validation and it's users' responsibility to enforce the UDT invariant. SO DO NOT skip this UDT-based validation if users do not have ways to enforce the UDT invariant. Ways to enforce the invariant on the users side include manage a monotonically increasing timestamp, commit transactions in a single thread etc.\r\n* Defined a new PerfLevel `kEnableWait` to measure time spent by user threads blocked in RocksDB other than mutex, such as a write thread waiting to be added to a write group, a write thread delayed or stalled etc.\r\n* `RateLimiter`'s API no longer requires the burst size to be the refill size. Users of `NewGenericRateLimiter()` can now provide burst size in `single_burst_bytes`. Implementors of `RateLimiter::SetSingleBurstBytes()` need to adapt their implementations to match the changed API doc.\r\n* Add `write_memtable_time` to the newly introduced PerfLevel `kEnableWait`.\r\n\r\n### Behavior Changes\r\n* `RateLimiter`s created by `NewGenericRateLimiter()` no longer modify the refill period when `SetSingleBurstBytes()` is called.\r\n* Merge writes will only keep merge operand count within `ColumnFamilyOptions::max_successive_merges` when the key's merge operands are all found in memory, unless `strict_max_successive_merges` is explicitly set.\r\n\r\n### Bug Fixes\r\n* Fixed `kBlockCacheTier` reads to return `Status::Incomplete` when I/O is needed to fetch a merge chain's base value from a blob file.\r\n* Fixed `kBlockCacheTier` reads to return `Status::Incomplete` on table cache miss rather than incorrectly returning an empty value.\r\n* Fixed a data race in WalManager that may affect how frequent PurgeObsoleteWALFiles() runs.\r\n* Re-enable the recycle_log_file_num option in DBOptions for kPointInTimeRecovery WAL recovery mode, which was previously disabled due to a bug in the recovery logic. This option is incompatible with WriteOptions::disableWAL. A Status::InvalidArgument() will be returned if disableWAL is specified.\r\n\r\n### Performance Improvements\r\n* Java API `multiGet()` variants now take advantage of the underlying batched `multiGet()` performance improvements.\r\nBefore\r\n```\r\nBenchmark (columnFamilyTestType) (keyCount) (keySize) (multiGetSize) (valueSize) Mode Cnt Score Error Units\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 64 thrpt 25 6315.541 ± 8.106 ops/s\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 1024 thrpt 25 6975.468 ± 68.964 ops/s\r\n```\r\nAfter\r\n```\r\nBenchmark (columnFamilyTestType) (keyCount) (keySize) (multiGetSize) (valueSize) Mode Cnt Score Error Units\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 64 thrpt 25 7046.739 ± 13.299 ops/s\r\nMultiGetBenchmarks.multiGetList10 no_column_family 10000 16 100 1024 thrpt 25 7654.521 ± 60.121 ops/s\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151805611/reactions","total_count":7,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":3,"rocket":2,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151633981","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/151633981/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/151633981/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.0.1","id":151633981,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84JCcA9","tag_name":"v9.0.1","target_commitish":"9.0.fb","name":"RocksDB 9.0.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-04-17T20:46:25Z","updated_at":"2024-04-22T08:24:50Z","published_at":"2024-04-17T20:51:13Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.0.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.0.1","body":"## 9.0.1 (2024-04-11)\r\n### Bug Fixes\r\n* Fixed CMake Javadoc and source jar builds\r\n* Fixed Java `SstFileMetaData` to prevent throwing `java.lang.NoSuchMethodError`","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/151633981/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":2,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/150462309","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/150462309/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/150462309/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.11.4","id":150462309,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84I999l","tag_name":"v8.11.4","target_commitish":"8.11.fb","name":"RocksDB 8.11.4","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-04-09T19:40:06Z","updated_at":"2024-04-22T08:24:29Z","published_at":"2024-04-09T19:44:45Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.11.4","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.11.4","body":"## 8.11.4 (2024-04-09)\r\n### Bug Fixes\r\n* Fixed CMake Javadoc build\r\n* Fixed Java `SstFileMetaData` to prevent throwing `java.lang.NoSuchMethodError`","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/150462309/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/147279474","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/147279474/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/147279474/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v9.0.0","id":147279474,"author":{"login":"jowlyzhang","id":5846404,"node_id":"MDQ6VXNlcjU4NDY0MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/5846404?v=4","gravatar_id":"","url":"https://api.github.com/users/jowlyzhang","html_url":"https://github.com/jowlyzhang","followers_url":"https://api.github.com/users/jowlyzhang/followers","following_url":"https://api.github.com/users/jowlyzhang/following{/other_user}","gists_url":"https://api.github.com/users/jowlyzhang/gists{/gist_id}","starred_url":"https://api.github.com/users/jowlyzhang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jowlyzhang/subscriptions","organizations_url":"https://api.github.com/users/jowlyzhang/orgs","repos_url":"https://api.github.com/users/jowlyzhang/repos","events_url":"https://api.github.com/users/jowlyzhang/events{/privacy}","received_events_url":"https://api.github.com/users/jowlyzhang/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Ix05y","tag_name":"v9.0.0","target_commitish":"main","name":"RocksDB 9.0.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-03-19T16:43:17Z","updated_at":"2024-03-25T14:21:49Z","published_at":"2024-03-19T16:44:47Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v9.0.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v9.0.0","body":"## 9.0.0 (2024-02-16)\r\n### New Features\r\n* Provide support for FSBuffer for point lookups. Also added support for scans and compactions that don't go through prefetching.\r\n* *Make `SstFileWriter` create SST files without persisting user defined timestamps when the `Option.persist_user_defined_timestamps` flag is set to false.\r\n* Add support for user-defined timestamps in APIs `DeleteFilesInRanges` and `GetPropertiesOfTablesInRange`.\r\n* Mark wal\\_compression feature as production-ready. Currently only compatible with ZSTD compression.\r\n\r\n### Public API Changes\r\n* Allow setting Stderr logger via C API\r\n* Declare one Get and one MultiGet variant as pure virtual, and make all the other variants non-overridable. The methods required to be implemented by derived classes of DB allow returning timestamps. It is up to the implementation to check and return an error if timestamps are not supported. The non-batched MultiGet APIs are reimplemented in terms of batched MultiGet, so callers might see a performance improvement.\r\n* Exposed mode option to Rate Limiter via c api.\r\n* Removed deprecated option `access_hint_on_compaction_start`\r\n* Removed deprecated option `ColumnFamilyOptions::check_flush_compaction_key_order`\r\n* *Remove the default `WritableFile::GetFileSize` and `FSWritableFile::GetFileSize` implementation that returns 0 and make it pure virtual, so that subclasses are enforced to explicitly provide an implementation.\r\n* Removed deprecated option `ColumnFamilyOptions::level_compaction_dynamic_file_size`\r\n* *Removed tickers with typos \"rocksdb.error.handler.bg.errro.count\", \"rocksdb.error.handler.bg.io.errro.count\", \"rocksdb.error.handler.bg.retryable.io.errro.count\".\r\n* Remove the force mode for `EnableFileDeletions` API because it is unsafe with no known legitimate use.\r\n* Removed deprecated option `ColumnFamilyOptions::ignore_max_compaction_bytes_for_input`\r\n* `sst_dump --command=check` now compares the number of records in a table with `num_entries` in table property, and reports corruption if there is a mismatch. API `SstFileDumper::ReadSequential()` is updated to optionally do this verification. (#12322)\r\n\r\n### Behavior Changes\r\n* format\\_version=6 is the new default setting in BlockBasedTableOptions, for more robust data integrity checking. DBs and SST files written with this setting cannot be read by RocksDB versions before 8.6.0.\r\n* Compactions can be scheduled in parallel in an additional scenario: multiple files are marked for compaction within a single column family\r\n* For leveled compaction, RocksDB will try to do intra-L0 compaction if the total L0 size is small compared to Lbase (#12214). Users with atomic_flush=true are more likely to see the impact of this change.\r\n\r\n### Bug Fixes\r\n* Fixed a data race in `DBImpl::RenameTempFileToOptionsFile`.\r\n* Fix some perf context statistics error in write steps. which include missing write_memtable_time in unordered_write. missing write_memtable_time in PipelineWrite when Writer stat is STATE_PARALLEL_MEMTABLE_WRITER. missing write_delay_time when calling DelayWrite in WriteImplWALOnly function.\r\n* Fixed a bug that can, under rare circumstances, cause MultiGet to return an incorrect result for a duplicate key in a MultiGet batch.\r\n* Fix a bug where older data of an ingested key can be returned for read when universal compaction is used","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/147279474/reactions","total_count":18,"+1":11,"-1":0,"laugh":0,"hooray":4,"confused":0,"heart":0,"rocket":2,"eyes":1}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/143908923","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/143908923/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/143908923/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.11.3","id":143908923,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Ik-A7","tag_name":"v8.11.3","target_commitish":"main","name":"RocksDB 8.11.3","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-02-28T01:48:37Z","updated_at":"2024-03-25T14:22:33Z","published_at":"2024-02-28T01:51:42Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.11.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.11.3","body":"## 8.11.3 (2024-02-27)\r\n* Correct CMake Javadoc and source jar builds\r\n\r\n## 8.11.2 (2024-02-16)\r\n* Update zlib to 1.3.1 for Java builds\r\n\r\n## 8.11.1 (2024-01-25)\r\n### Bug Fixes\r\n* Fix a bug where older data of an ingested key can be returned for read when universal compaction is used\r\n* Apply appropriate rate limiting and priorities in more places.\r\n\r\n## 8.11.0 (2024-01-19)\r\n### New Features\r\n* Add new statistics: `rocksdb.sst.write.micros` measures time of each write to SST file; `rocksdb.file.write.{flush|compaction|db.open}.micros` measure time of each write to SST table (currently only block-based table format) and blob file for flush, compaction and db open.\r\n\r\n### Public API Changes\r\n* Added another enumerator `kVerify` to enum class `FileOperationType` in listener.h. Update your `switch` statements as needed.\r\n* Add CompressionOptions to the CompressedSecondaryCacheOptions structure to allow users to specify library specific options when creating the compressed secondary cache.\r\n* Deprecated several options: `level_compaction_dynamic_file_size`, `ignore_max_compaction_bytes_for_input`, `check_flush_compaction_key_order`, `flush_verify_memtable_count`, `compaction_verify_record_count`, `fail_if_options_file_error`, and `enforce_single_del_contracts`\r\n* Exposed options ttl via c api.\r\n\r\n### Behavior Changes\r\n* `rocksdb.blobdb.blob.file.write.micros` expands to also measure time writing the header and footer. Therefore the COUNT may be higher and values may be smaller than before. For stacked BlobDB, it no longer measures the time of explictly flushing blob file.\r\n* Files will be compacted to the next level if the data age exceeds periodic_compaction_seconds except for the last level.\r\n* Reduced the compaction debt ratio trigger for scheduling parallel compactions\r\n* For leveled compaction with default compaction pri (kMinOverlappingRatio), files marked for compaction will be prioritized over files not marked when picking a file from a level for compaction.\r\n\r\n### Bug Fixes\r\n* Fix bug in auto_readahead_size that combined with IndexType::kBinarySearchWithFirstKey + fails or iterator lands at a wrong key\r\n* Fixed some cases in which DB file corruption was detected but ignored on creating a backup with BackupEngine.\r\n* Fix bugs where `rocksdb.blobdb.blob.file.synced` includes blob files failed to get synced and `rocksdb.blobdb.blob.file.bytes.written` includes blob bytes failed to get written.\r\n* Fixed a possible memory leak or crash on a failure (such as I/O error) in automatic atomic flush of multiple column families.\r\n* Fixed some cases of in-memory data corruption using mmap reads with `BackupEngine`, `sst_dump`, or `ldb`.\r\n* Fixed issues with experimental `preclude_last_level_data_seconds` option that could interfere with expected data tiering.\r\n* Fixed the handling of the edge case when all existing blob files become unreferenced. Such files are now correctly deleted.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/143908923/reactions","total_count":17,"+1":6,"-1":0,"laugh":0,"hooray":5,"confused":0,"heart":6,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/142874963","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/142874963/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/142874963/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.10.2","id":142874963,"author":{"login":"pdillinger","id":7980268,"node_id":"MDQ6VXNlcjc5ODAyNjg=","avatar_url":"https://avatars.githubusercontent.com/u/7980268?v=4","gravatar_id":"","url":"https://api.github.com/users/pdillinger","html_url":"https://github.com/pdillinger","followers_url":"https://api.github.com/users/pdillinger/followers","following_url":"https://api.github.com/users/pdillinger/following{/other_user}","gists_url":"https://api.github.com/users/pdillinger/gists{/gist_id}","starred_url":"https://api.github.com/users/pdillinger/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdillinger/subscriptions","organizations_url":"https://api.github.com/users/pdillinger/orgs","repos_url":"https://api.github.com/users/pdillinger/repos","events_url":"https://api.github.com/users/pdillinger/events{/privacy}","received_events_url":"https://api.github.com/users/pdillinger/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84IhBlT","tag_name":"v8.10.2","target_commitish":"main","name":"RocksDB 8.10.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-02-20T23:12:16Z","updated_at":"2024-03-25T14:23:11Z","published_at":"2024-02-20T23:14:30Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.10.2","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.10.2","body":"## 8.10.2 (2024-02-16)\r\n* Update zlib to 1.3.1 for Java builds\r\n\r\n## 8.10.1 (2024-01-16)\r\n### Bug Fixes\r\n* Fix bug in auto_readahead_size that combined with IndexType::kBinarySearchWithFirstKey + fails or iterator lands at a wrong key","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/142874963/reactions","total_count":6,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":3,"eyes":3}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/136548247","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/136548247/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/136548247/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.10.0","id":136548247,"author":{"login":"ltamasi","id":47607618,"node_id":"MDQ6VXNlcjQ3NjA3NjE4","avatar_url":"https://avatars.githubusercontent.com/u/47607618?v=4","gravatar_id":"","url":"https://api.github.com/users/ltamasi","html_url":"https://github.com/ltamasi","followers_url":"https://api.github.com/users/ltamasi/followers","following_url":"https://api.github.com/users/ltamasi/following{/other_user}","gists_url":"https://api.github.com/users/ltamasi/gists{/gist_id}","starred_url":"https://api.github.com/users/ltamasi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ltamasi/subscriptions","organizations_url":"https://api.github.com/users/ltamasi/orgs","repos_url":"https://api.github.com/users/ltamasi/repos","events_url":"https://api.github.com/users/ltamasi/events{/privacy}","received_events_url":"https://api.github.com/users/ltamasi/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84II4-X","tag_name":"v8.10.0","target_commitish":"main","name":"RocksDB 8.10.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-01-10T19:44:11Z","updated_at":"2024-01-20T10:10:52Z","published_at":"2024-01-10T19:52:20Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.10.0","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.10.0","body":"## 8.10.0 (2023-12-15)\r\n### New Features\r\n* Provide support for async_io to trim readahead_size by doing block cache lookup\r\n* Added initial wide-column support in `WriteBatchWithIndex`. This includes the `PutEntity` API and support for wide columns in the existing read APIs (`GetFromBatch`, `GetFromBatchAndDB`, `MultiGetFromBatchAndDB`, and `BaseDeltaIterator`).\r\n\r\n### Public API Changes\r\n* Custom implementations of `TablePropertiesCollectorFactory` may now return a `nullptr` collector to decline processing a file, reducing callback overheads in such cases.\r\n\r\n### Behavior Changes\r\n* Make ReadOptions.auto_readahead_size default true which does prefetching optimizations for forward scans if iterate_upper_bound and block_cache is also specified.\r\n* Compactions can be scheduled in parallel in an additional scenario: high compaction debt relative to the data size\r\n* HyperClockCache now has built-in protection against excessive CPU consumption under the extreme stress condition of no (or very few) evictable cache entries, which can slightly increase memory usage such conditions. New option `HyperClockCacheOptions::eviction_effort_cap` controls the space-time trade-off of the response. The default should be generally well-balanced, with no measurable affect on normal operation.\r\n\r\n### Bug Fixes\r\n* Fix a corner case with auto_readahead_size where Prev Operation returns NOT SUPPORTED error when scans direction is changed from forward to backward.\r\n* Avoid destroying the periodic task scheduler's default timer in order to prevent static destruction order issues.\r\n* Fix double counting of BYTES_WRITTEN ticker when doing writes with transactions.\r\n* Fix a WRITE_STALL counter that was reporting wrong value in few cases.\r\n* A lookup by MultiGet in a TieredCache that goes to the local flash cache and finishes with very low latency, i.e before the subsequent call to WaitAll, is ignored, resulting in a false negative and a memory leak.\r\n\r\n### Performance Improvements\r\n* Java API extensions to improve consistency and completeness of APIs\r\n  - Extended `RocksDB.get([ColumnFamilyHandle columnFamilyHandle,] ReadOptions opt, ByteBuffer key, ByteBuffer value)` which now accepts indirect buffer parameters as well as direct buffer parameters\r\n  - Extended `RocksDB.put( [ColumnFamilyHandle columnFamilyHandle,] WriteOptions writeOpts, final ByteBuffer key, final ByteBuffer value)` which now accepts indirect buffer parameters as well as direct buffer parameters\r\n  - Added `RocksDB.merge([ColumnFamilyHandle columnFamilyHandle,] WriteOptions writeOptions, ByteBuffer key, ByteBuffer value)` methods with the same parameter options as `put(...)` - direct and indirect buffers are supported\r\n  - Added `RocksIterator.key( byte[] key [, int offset, int len])` methods which retrieve the iterator key into the supplied buffer\r\n  - Added `RocksIterator.value( byte[] value [, int offset, int len])` methods which retrieve the iterator value into the supplied buffer\r\n  - Deprecated `get(final ColumnFamilyHandle columnFamilyHandle, final ReadOptions readOptions, byte[])` in favour of `get(final ReadOptions readOptions, final ColumnFamilyHandle columnFamilyHandle, byte[])` which has consistent parameter ordering with other methods in the same class\r\n  - Added `Transaction.get( ReadOptions opt, [ColumnFamilyHandle columnFamilyHandle, ] byte[] key, byte[] value)` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.get( ReadOptions opt, [ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value)` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.getForUpdate( ReadOptions readOptions, [ColumnFamilyHandle columnFamilyHandle, ] byte[] key, byte[] value, boolean exclusive [, boolean doValidate])` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.getForUpdate( ReadOptions readOptions, [ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value, boolean exclusive [, boolean doValidate])` methods which retrieve the requested value into the supplied buffer\r\n  - Added `Transaction.getIterator()` method as a convenience which defaults the `ReadOptions` value supplied to existing `Transaction.iterator()` methods. This mirrors the existing `RocksDB.iterator()` method.\r\n  - Added `Transaction.put([ColumnFamilyHandle columnFamilyHandle, ]  ByteBuffer key, ByteBuffer value [, boolean assumeTracked])` methods which supply the key, and the value to be written in a `ByteBuffer` parameter\r\n  - Added `Transaction.merge([ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value [,  boolean assumeTracked])` methods which supply the key, and the value to be written/merged in a `ByteBuffer` parameter\r\n  - Added `Transaction.mergeUntracked([ColumnFamilyHandle columnFamilyHandle, ] ByteBuffer key, ByteBuffer value)` methods which supply the key, and the value to be written/merged in a `ByteBuffer` parameter\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/136548247/reactions","total_count":7,"+1":7,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/133486188","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/133486188/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/133486188/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.9.1","id":133486188,"author":{"login":"jaykorean","id":5925327,"node_id":"MDQ6VXNlcjU5MjUzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/5925327?v=4","gravatar_id":"","url":"https://api.github.com/users/jaykorean","html_url":"https://github.com/jaykorean","followers_url":"https://api.github.com/users/jaykorean/followers","following_url":"https://api.github.com/users/jaykorean/following{/other_user}","gists_url":"https://api.github.com/users/jaykorean/gists{/gist_id}","starred_url":"https://api.github.com/users/jaykorean/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jaykorean/subscriptions","organizations_url":"https://api.github.com/users/jaykorean/orgs","repos_url":"https://api.github.com/users/jaykorean/repos","events_url":"https://api.github.com/users/jaykorean/events{/privacy}","received_events_url":"https://api.github.com/users/jaykorean/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84H9NZs","tag_name":"v8.9.1","target_commitish":"main","name":"RocksDB 8.9.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-12-11T22:09:55Z","updated_at":"2024-01-10T10:43:52Z","published_at":"2023-12-11T22:14:12Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.9.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.9.1","body":"## 8.9.1 (2023-12-08)\r\n### Bug Fixes\r\n* Avoid destroying the periodic task scheduler's default timer in order to prevent static destruction order issues.\r\n\r\n## 8.9.0 (2023-11-17)\r\n### New Features\r\n* Add GetEntity() and PutEntity() API implementation for Attribute Group support. Through the use of Column Families, AttributeGroup enables users to logically group wide-column entities.\r\n\r\n### Public API Changes\r\n* Added rocksdb_ratelimiter_create_auto_tuned API to create an auto-tuned GenericRateLimiter.\r\n* Added clipColumnFamily() to the Java API to clip the entries in the CF according to the range [begin_key, end_key).\r\n* Make the `EnableFileDeletion` API not default to force enabling. For users that rely on this default behavior and still\r\nwant to continue to use force enabling, they need to explicitly pass a `true` to `EnableFileDeletion`.\r\n* Add new Cache APIs GetSecondaryCacheCapacity() and GetSecondaryCachePinnedUsage() to return the configured capacity, and cache reservation charged to the secondary cache.\r\n\r\n### Behavior Changes\r\n* During off-peak hours defined by `daily_offpeak_time_utc`, the compaction picker will select a larger number of files for periodic compaction. This selection will include files that are projected to expire by the next off-peak start time, ensuring that these files are not chosen for periodic compaction outside of off-peak hours.\r\n* If an error occurs when writing to a trace file after `DB::StartTrace()`, the subsequent trace writes are skipped to avoid writing to a file that has previously seen error. In this case, `DB::EndTrace()` will also return a non-ok status with info about the error occured previously in its status message.\r\n* Deleting stale files upon recovery are delegated to SstFileManger if available so they can be rate limited.\r\n* Make RocksDB only call `TablePropertiesCollector::Finish()` once.\r\n* When `WAL_ttl_seconds > 0`, we now process archived WALs for deletion at least every `WAL_ttl_seconds / 2` seconds. Previously it could be less frequent in case of small `WAL_ttl_seconds` values when size-based expiration (`WAL_size_limit_MB > 0 `) was simultaneously enabled.\r\n\r\n### Bug Fixes\r\n* Fixed a crash or assertion failure bug in experimental new HyperClockCache variant, especially when running with a SecondaryCache.\r\n* Fix a race between flush error recovery and db destruction that can lead to db crashing.\r\n* Fixed some bugs in the index builder/reader path for user-defined timestamps in Memtable only feature.","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/133486188/reactions","total_count":11,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":0,"rocket":4,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/131039583","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/131039583/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/131039583/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.8.1","id":131039583,"author":{"login":"hx235","id":83968999,"node_id":"MDQ6VXNlcjgzOTY4OTk5","avatar_url":"https://avatars.githubusercontent.com/u/83968999?v=4","gravatar_id":"","url":"https://api.github.com/users/hx235","html_url":"https://github.com/hx235","followers_url":"https://api.github.com/users/hx235/followers","following_url":"https://api.github.com/users/hx235/following{/other_user}","gists_url":"https://api.github.com/users/hx235/gists{/gist_id}","starred_url":"https://api.github.com/users/hx235/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hx235/subscriptions","organizations_url":"https://api.github.com/users/hx235/orgs","repos_url":"https://api.github.com/users/hx235/repos","events_url":"https://api.github.com/users/hx235/events{/privacy}","received_events_url":"https://api.github.com/users/hx235/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84Hz4Ff","tag_name":"v8.8.1","target_commitish":"main","name":"RocksDB 8.8.1","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-11-22T17:57:31Z","updated_at":"2023-11-23T22:17:35Z","published_at":"2023-11-22T18:00:46Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.8.1","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.8.1","body":"## 8.8.1 (2023-11-17)\r\n### Bug fixes\r\n* Make the cache memory reservation accounting in Tiered cache (primary and compressed secondary cache) more accurate to avoid over/under charging the secondary cache.\r\n* Allow increasing the compressed_secondary_ratio in the Tiered cache after setting it to 0 to disable.\r\n\r\n## 8.8.0 (2023-10-23)\r\n### New Features\r\n* Introduce AttributeGroup by adding the first AttributeGroup support API, MultiGetEntity(). Through the use of Column Families, AttributeGroup enables users to logically group wide-column entities. More APIs to support AttributeGroup will come soon, including GetEntity, PutEntity, and others.\r\n* Added new tickers `rocksdb.fifo.{max.size|ttl}.compactions` to count FIFO compactions that drop files for different reasons\r\n* Add an experimental offpeak duration awareness by setting `DBOptions::daily_offpeak_time_utc` in \"HH:mm-HH:mm\" format. This information will be used for resource optimization in the future\r\n* Users can now change the max bytes granted in a single refill period (i.e, burst) during runtime by `SetSingleBurstBytes()` for RocksDB rate limiter\r\n\r\n### Public API Changes\r\n* The default value of `DBOptions::fail_if_options_file_error` changed from `false` to `true`. Operations that set in-memory options (e.g., `DB::Open*()`, `DB::SetOptions()`, `DB::CreateColumnFamily*()`, and `DB::DropColumnFamily()`) but fail to persist the change will now return a non-OK `Status` by default.\r\n* Add new Cache APIs GetSecondaryCacheCapacity() and GetSecondaryCachePinnedUsage() to return the configured capacity, and cache reservation charged to the secondary cache.\r\n\r\n### Behavior Changes\r\n* For non direct IO, eliminate the file system prefetching attempt for compaction read when `Options::compaction_readahead_size` is 0\r\n* During a write stop, writes now block on in-progress recovery attempts\r\n* Deleting stale files upon recovery are delegated to SstFileManger if available so they can be rate limited.\r\n\r\n### Bug Fixes\r\n* Fix a bug in auto_readahead_size where first_internal_key of index blocks wasn't copied properly resulting in corruption error when first_internal_key was used for comparison.\r\n* Fixed a bug where compaction read under non direct IO still falls back to RocksDB internal prefetching after file system's prefetching returns non-OK status other than `Status::NotSupported()`\r\n* Add bounds check in WBWIIteratorImpl and make BaseDeltaIterator, WriteUnpreparedTxn and WritePreparedTxn respect the upper bound and lower bound in ReadOption. See 11680.\r\n* Fixed the handling of wide-column base values in the `max_successive_merges` logic.\r\n* Fixed a rare race bug involving a concurrent combination of Create/DropColumnFamily and/or Set(DB)Options that could lead to inconsistency between (a) the DB's reported options state, (b) the DB options in effect, and (c) the latest persisted OPTIONS file.\r\n* Fixed a possible underflow when computing the compressed secondary cache share of memory reservations while updating the compressed secondary to total block cache ratio.\r\n\r\n### Performance Improvements\r\n* Improved the I/O efficiency of DB::Open a new DB with `create_missing_column_families=true` and many column families.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/131039583/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/facebook/rocksdb/releases/130464727","assets_url":"https://api.github.com/repos/facebook/rocksdb/releases/130464727/assets","upload_url":"https://uploads.github.com/repos/facebook/rocksdb/releases/130464727/assets{?name,label}","html_url":"https://github.com/facebook/rocksdb/releases/tag/v8.7.3","id":130464727,"author":{"login":"ajkr","id":4780362,"node_id":"MDQ6VXNlcjQ3ODAzNjI=","avatar_url":"https://avatars.githubusercontent.com/u/4780362?v=4","gravatar_id":"","url":"https://api.github.com/users/ajkr","html_url":"https://github.com/ajkr","followers_url":"https://api.github.com/users/ajkr/followers","following_url":"https://api.github.com/users/ajkr/following{/other_user}","gists_url":"https://api.github.com/users/ajkr/gists{/gist_id}","starred_url":"https://api.github.com/users/ajkr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajkr/subscriptions","organizations_url":"https://api.github.com/users/ajkr/orgs","repos_url":"https://api.github.com/users/ajkr/repos","events_url":"https://api.github.com/users/ajkr/events{/privacy}","received_events_url":"https://api.github.com/users/ajkr/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOAGnPe84HxrvX","tag_name":"v8.7.3","target_commitish":"8.7.fb","name":"RocksDB 8.7.3","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-10-31T20:22:47Z","updated_at":"2023-11-22T11:10:15Z","published_at":"2023-11-20T17:28:00Z","assets":[],"tarball_url":"https://api.github.com/repos/facebook/rocksdb/tarball/v8.7.3","zipball_url":"https://api.github.com/repos/facebook/rocksdb/zipball/v8.7.3","body":"## 8.7.3 (2023-10-30)\r\n### Behavior Changes\r\n* Deleting stale files upon recovery are delegated to SstFileManger if available so they can be rate limited.\r\n\r\n## 8.7.2 (2023-10-25)\r\n### Public API Changes\r\n* Add new Cache APIs GetSecondaryCacheCapacity() and GetSecondaryCachePinnedUsage() to return the configured capacity, and cache reservation charged to the secondary cache.\r\n\r\n### Bug Fixes\r\n* Fixed a possible underflow when computing the compressed secondary cache share of memory reservations while updating the compressed secondary to total block cache ratio.\r\n* Fix an assertion failure when UpdeteTieredCache() is called in an idempotent manner.\r\n\r\n## 8.7.1 (2023-10-20)\r\n### Bug Fixes\r\n* Fix a bug in auto_readahead_size where first_internal_key of index blocks wasn't copied properly resulting in corruption error when first_internal_key was used for comparison.\r\n* Add bounds check in WBWIIteratorImpl and make BaseDeltaIterator, WriteUnpreparedTxn and WritePreparedTxn respect the upper bound and lower bound in ReadOption. See 11680.\r\n\r\n## 8.7.0 (2023-09-22)\r\n### New Features\r\n* Added an experimental new \"automatic\" variant of HyperClockCache that does not require a prior estimate of the average size of cache entries. This variant is activated when HyperClockCacheOptions::estimated\\_entry\\_charge = 0 and has essentially the same concurrency benefits as the existing HyperClockCache.\r\n* Add a new statistic `COMPACTION_CPU_TOTAL_TIME` that records cumulative compaction cpu time. This ticker is updated regularly while a compaction is running.\r\n* Add `GetEntity()` API for ReadOnly DB and Secondary DB.\r\n* Add a new iterator API `Iterator::Refresh(const Snapshot *)` that allows iterator to be refreshed while using the input snapshot to read.\r\n* Added a new read option `merge_operand_count_threshold`. When the number of merge operands applied during a successful point lookup exceeds this threshold, the query will return a special OK status with a new subcode `kMergeOperandThresholdExceeded`. Applications might use this signal to take action to reduce the number of merge operands for the affected key(s), for example by running a compaction.\r\n* For `NewRibbonFilterPolicy()`, made the `bloom_before_level` option mutable through the Configurable interface and the SetOptions API, allowing dynamic switching between all-Bloom and all-Ribbon configurations, and configurations in between. See comments on `NewRibbonFilterPolicy()`\r\n* RocksDB now allows the block cache to be stacked on top of a compressed secondary cache and a non-volatile secondary cache, thus creating a three-tier cache. To set it up, use the `NewTieredCache()` API in rocksdb/cache.h..\r\n* Added a new wide-column aware full merge API called `FullMergeV3` to `MergeOperator`. `FullMergeV3` supports wide columns both as base value and merge result, which enables the application to perform more general transformations during merges. For backward compatibility, the default implementation implements the earlier logic of applying the merge operation to the default column of any wide-column entities. Specifically, if there is no base value or the base value is a plain key-value, the default implementation falls back to `FullMergeV2`. If the base value is a wide-column entity, the default implementation invokes `FullMergeV2` to perform the merge on the default column, and leaves any other columns unchanged.\r\n* Add wide column support to ldb commands (scan, dump, idump, dump_wal) and sst_dump tool's scan command\r\n\r\n### Public API Changes\r\n* Expose more information about input files used in table creation (if any) in `CompactionFilter::Context`. See `CompactionFilter::Context::input_start_level`,`CompactionFilter::Context::input_table_properties` for more.\r\n* `Options::compaction_readahead_size` 's default value is changed from 0 to 2MB.\r\n* When using LZ4 compression, the `acceleration` parameter is configurable by setting the negated value in `CompressionOptions::level`. For example, `CompressionOptions::level=-10` will set `acceleration=10`\r\n* The `NewTieredCache` API has been changed to take the total cache capacity (inclusive of both the primary and the compressed secondary cache) and the ratio of total capacity to allocate to the compressed cache. These are specified in `TieredCacheOptions`. Any capacity specified in `LRUCacheOptions`, `HyperClockCacheOptions` and `CompressedSecondaryCacheOptions` is ignored. A new API, `UpdateTieredCache` is provided to dynamically update the total capacity, ratio of compressed cache, and admission policy.\r\n* The `NewTieredVolatileCache()` API in rocksdb/cache.h has been renamed to `NewTieredCache()`.\r\n\r\n### Behavior Changes\r\n* Compaction read performance will regress when `Options::compaction_readahead_size` is explicitly set to 0\r\n* Universal size amp compaction will conditionally exclude some of the newest L0 files when selecting input with a small negative impact to size amp. This is to prevent a large number of L0 files from being locked by a size amp compaction, potentially leading to write stop with a few more flushes.\r\n* Change ldb scan command delimiter from ':' to '==>'.\r\n* For non direct IO, eliminate the file system prefetching attempt for compaction read when `Options::compaction_readahead_size` is 0\r\n\r\n### Bug Fixes\r\n* Fix a bug where if there is an error reading from offset 0 of a file from L1+ and that the file is not the first file in the sorted run, data can be lost in compaction and read/scan can return incorrect results.\r\n* Fix a bug where iterator may return incorrect result for DeleteRange() users if there was an error reading from a file.\r\n* Fix a bug with atomic_flush=true that can cause DB to stuck after a flush fails (#11872).\r\n* Fix a bug where RocksDB (with atomic_flush=false) can delete output SST files of pending flushes when a previous concurrent flush fails (#11865). This can result in DB entering read-only state with error message like `IO error: No such file or directory: While open a file for random read: /tmp/rocksdbtest-501/db_flush_test_87732_4230653031040984171/000013.sst`.\r\n* Fix an assertion fault during seek with async_io when readahead trimming is enabled.\r\n* When the compressed secondary cache capacity is reduced to 0, it should be completely disabled. Before this fix, inserts and lookups would still go to the backing `LRUCache` before returning, thus incurring locking overhead. With this fix, inserts and lookups are no-ops and do not add any overhead.\r\n* Updating the tiered cache (cache allocated using NewTieredCache()) by calling SetCapacity() on it was not working properly. The initial creation would set the primary cache capacity to the combined primary and compressed secondary cache capacity. But SetCapacity() would just set the primary cache capacity. With this fix, the user always specifies the total budget and compressed secondary cache ratio on creation. Subsequently, SetCapacity() will distribute the new capacity across the two caches by the same ratio.\r\n* Fixed a bug in `MultiGet` for cleaning up SuperVersion acquired with locking db mutex.\r\n* Fix a bug where row cache can falsely return kNotFound even though row cache entry is hit.\r\n* Fixed a race condition in `GenericRateLimiter` that could cause it to stop granting requests\r\n* Fix a bug (Issue #10257) where DB can hang after write stall since no compaction is scheduled (#11764).\r\n* Add a fix for async_io where during seek, when reading a block for seeking a target key in a file without any readahead, the iterator aligned the read on a page boundary and reading more than necessary. This increased the storage read bandwidth usage.\r\n* Fix an issue in sst dump tool to handle bounds specified for data with user-defined timestamps.\r\n* When auto_readahead_size is enabled, update readahead upper bound during readahead trimming when reseek changes iterate_upper_bound dynamically.\r\n* Fixed a bug where `rocksdb.file.read.verify.file.checksums.micros` is not populated\r\n* Fixed a bug where compaction read under non direct IO still falls back to RocksDB internal prefetching after file system's prefetching returns non-OK status other than `Status::NotSupported()`\r\n\r\n### Performance Improvements\r\n* Added additional improvements in tuning readahead_size during Scans when auto_readahead_size is enabled. However it's not recommended for backward scans and might impact the performance. More details in options.h.\r\n* During async_io, the Seek happens in 2 phases. Phase 1 starts an asynchronous read on a block cache miss, and phase 2 waits for it to complete and finishes the seek. In both phases, it tries to lookup the block cache for the data block first before looking in the prefetch buffer. It's optimized by doing the block cache lookup only in the first phase that would save some CPU.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/rocksdb/releases/130464727/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":3,"eyes":0}}]