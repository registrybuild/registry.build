[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/251027764","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/251027764/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/251027764/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.4-rc2","id":251027764,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4O9mE0","tag_name":"v0.8.4-rc2","target_commitish":"master","name":"v0.8.4-rc2","draft":false,"immutable":false,"prerelease":true,"created_at":"2025-09-25T16:08:10Z","updated_at":"2025-10-07T10:37:26Z","published_at":"2025-09-30T08:05:06Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.4-rc2","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.4-rc2","body":"# What's Changed since v0.8.4-rc1\r\n\r\n* prefer NATIVE implementations over SIMDE_VECTOR_SUBSCRIPT_OPS by @mr-c in https://github.com/simd-everywhere/simde/commit/4f11a25dd68117b0947c52c5e87b20fa50567acc\r\n* Fix the portable memory functions and test them in CI by @mr-c in https://github.com/simd-everywhere/simde/pull/1311\r\n* psabi warnings: always silence by @mr-c in https://github.com/simd-everywhere/simde/pull/1332\r\n\r\n## Clang\r\n* detect-clang: detect version 20 by @mr-c  in https://github.com/simd-everywhere/simde/pull/1303/commits/7c7031e7f0ee9bd5343c4c7bbe2478ad7a4677b6\r\n* clang: mark two bugs as being fixed in Clang 19 by @mr-c in https://github.com/simd-everywhere/simde/commit/d6b282d94278121f6304bc8344eeb8dc68c5e77a\r\n\r\n## GCC\r\n* arm64 gcc FRINT: skip native call on GCC by @mr-c in https://github.com/simd-everywhere/simde/pull/1299\r\n* gcc 13 + 15: two bugs fixed, skip their workarounds if possible by @mr-c in https://github.com/simd-everywhere/simde/pull/1300\r\n* silence some warnings when in `-pedantic` mode by @mr-c in https://github.com/simd-everywhere/simde/pull/1302\r\n\r\n## MSCV\r\n* x86 avx: fix test for MSVC where CONSTIFY doesn't work by @mr-c in https://github.com/simd-everywhere/simde/pull/1338/commits/a5f746b9a9cb4d4727fdea76ff3033548dff47c6\r\n\r\n## loongarch implementations\r\n* x86 sse2 for loongarch: fix GCC build failure by @jinboson in https://github.com/simd-everywhere/simde/pull/1287\r\n* x86 sse2: `_mm_div_pd` remove broken LSX implementation by @mr-c in https://github.com/simd-everywhere/simde/commit/239188b9bde2cce47d6e3b9cb9bda9ac2340c4bd\r\n* x86 sse2: LSX fix for simde_x_mm_select_pd by @mr-c in https://github.com/simd-everywhere/simde/commit/c05bb8148fb1d27f3dc5c9b881e42ca620098327\r\n\r\n## PowerPC implementations\r\n* x86 sse2: add powerpc*-darwin support for `simde_mm_pause` by @barracuda156 in https://github.com/simd-everywhere/simde/pull/1319\r\n\r\n## X86\r\n* sse2,sse3, avx: silence some false-positive warnings about uninitialized structs by @mr-c in https://github.com/simd-everywhere/simde/commit/437b4f2cb7e2aa264afa92d158dd1918636a4fdd\r\n### MMX\r\n* sll,srl,sra}: clamp and test out-of-range variable shift amounts by @aqrit in https://github.com/simd-everywhere/simde/commit/606ceb3a28e1fd6ddb2611cdd2fb5a83aa56bc3e https://github.com/simd-everywhere/simde/commit/caf9394227378ce2dff2c7d9bf0cd53ec26a8192\r\n### SSE*\r\n* {sll,srl,sra}: clamp and test out-of-range variable shift amounts by @aqrit in https://github.com/simd-everywhere/simde/commit/cf4ec2d5cc4340efd6e20801d58ef537ef670478 https://github.com/simd-everywhere/simde/commit/11ac5d8980ac9e9e61026e2bf14ab2cb8c61379b\r\n### AVX*\r\n* use memcpy instead of HEDLEY_REINTERPRET_CAST by @mr-c in https://github.com/simd-everywhere/simde/commit/40f8f99dfff0a66e4ad1f4738e8f11d0c09ac457\r\n* avx: fix native implementation of `simde_mm256_permute2f128_si256` by @ethomag in https://github.com/simd-everywhere/simde/pull/1338\r\n* {sll,srl,sra}: clamp and test out-of-range variable shift amounts by @aqrit in https://github.com/simd-everywhere/simde/commit/7bf15892d2190113b1d2dba4e2d59d731e6fc6ba https://github.com/simd-everywhere/simde/commit/edb6dfd8aabec9c360522718b1c38a1c48c37ea1\r\n* avx2: make simde_mm256_blend_epi16(a, b, imm8) map to native intrinsic by @ethomag in https://github.com/simd-everywhere/simde/pull/1342\r\n* avx2: `_mm256_permute4x64_epi64`: Avoid \"may be used uninitialized\" warning by @ethomag in https://github.com/simd-everywhere/simde/commit/9898205de0e81c23b0c409edb704bd88675c24a4\r\n\r\n### AVX512\r\n* misc fixes for `AVX512{F,VL}_NATIVE` by @mr-c in https://github.com/simd-everywhere/simde/pull/1279\r\n* srli: add mask{,z} varients by @mr-c in https://github.com/simd-everywhere/simde/pull/1310\r\n* expand{,loadu}: implement more intrinsics by @mr-c in https://github.com/simd-everywhere/simde/pull/1312\r\n* cmpeq: finish the rest of the intrinsics by @mr-c in https://github.com/simd-everywhere/simde/pull/1314\r\n* slli & srli: add missing intrinsics by @mr-c in https://github.com/simd-everywhere/simde/pull/1317\r\n* loadu: almost all of the remaining intrinsics by @mr-c in https://github.com/simd-everywhere/simde/pull/1320\r\n* `__mmask8` native by @mr-c in https://github.com/simd-everywhere/simde/pull/1323\r\n* sub: add mask{,z} varients by @michael-chuh in https://github.com/simd-everywhere/simde/pull/1327\r\n* storeu: add `_mm256_mask_storeu_epi{8,32,64}` by @michael-chuh in https://github.com/simd-everywhere/simde/pull/1328\r\n* storeu: fix mask storeu zeroing out original memory by @michael-chuh in https://github.com/simd-everywhere/simde/pull/1331\r\n* storeu: implement remaining instrinsics by @mr-c in https://github.com/simd-everywhere/simde/pull/1334\r\n* AVX512CD: implement remaining instrinsics by @mr-c in https://github.com/simd-everywhere/simde/pull/1336\r\n* cmpneq: finish the implementations; synch with cmpeq by @mr-c in https://github.com/simd-everywhere/simde/commit/83141fd6b78ef7181c33858d1ef9a774cb5033fd\r\n\r\n## RISC-V\r\n* arm neon cge: riscv64 remove broken vcge_s32 impl by @mr-c in https://github.com/simd-everywhere/simde/commit/942df2bf5176ff4841d9567f6b9184084f209057\r\n* [Neon][RVV] Enable RVV when there are zve64d and zvl128b flags. by @Ruhung in https://github.com/simd-everywhere/simde/pull/1284\r\n* [Neon][RVV] Enable RVV segment load/store only when we have __riscv_zvlsseg flag. by @Ruhung in https://github.com/simd-everywhere/simde/pull/1285\r\n* [Neon][RVV] add min.h and max.h RVV implementations. by @Ruhung in https://github.com/simd-everywhere/simde/pull/1283\r\n* [Neon][RVV] Fallback to autovec without mrvv-vector-bits flag. by @Ruhung in https://github.com/simd-everywhere/simde/pull/1282\r\n* [NEON] Fix mvn.h to correctly handle RVV instructions. by @Ruhung in https://github.com/simd-everywhere/simde/commit/1d74b5b536c8881ada5474f15490115e22341e84\r\n\r\n## wasm\r\n* remove use of non-standard `_div` instructions by @mr-c in https://github.com/simd-everywhere/simde/commit/36e30c5ead9c34725d72beef1b3259d7137ac72a\r\n* `__wasm_fp16__` is required for Float16 with emscripten or wasi by @mr-c in https://github.com/simd-everywhere/simde/pull/1333\r\n\r\n## ARM\r\n* arm fp16 misc cleanups by @mr-c in https://github.com/simd-everywhere/simde/pull/1335\r\n### NEON\r\n* `ld1{,q_x[234]}`: speedups on SSE[32] & WASM by @mr-c in https://github.com/simd-everywhere/simde/pull/1329\r\n* Avoid undefined behaviour with signed integer multiplication by @rathann in https://github.com/simd-everywhere/simde/pull/1296\r\n* Add NEON float16 multi-vectors to native aliases by @stellar-aria in https://github.com/simd-everywhere/simde/commit/bb7c56f062879911987eda48e43d6ac64e1526cd\r\n\r\n## CI / testing\r\n* build(deps): bump hendrikmuhs/ccache-action from 1.2.16 to 1.2.17 by @dependabot[bot] in https://github.com/simd-everywhere/simde/pull/1278\r\n* gh-action: test on clang 19 & 20 by @mr-c in https://github.com/simd-everywhere/simde/pull/1303\r\n* build(deps): bump actions/checkout from 4 to 5 by @dependabot[bot] in https://github.com/simd-everywhere/simde/pull/1305\r\n* build(deps): bump actions/setup-python from 5 to 6 by @dependabot[bot] in https://github.com/simd-everywhere/simde/pull/1316\r\n* build(deps): bump actions/setup-dotnet from 4 to 5 by @dependabot[bot] in https://github.com/simd-everywhere/simde/pull/1315\r\n* gh-actions: x86 upgrade to GCC-14 by @mr-c in https://github.com/simd-everywhere/simde/commit/1995014c5990566f41cf78daa2f281b20898a6d6\r\n* emscripten64 testing: the \"--experimental-wasm-memory64\" flag is no longer needed by @mr-c in https://github.com/simd-everywhere/simde/pull/1280\r\n* gh-actions: run actionlint automatically by @mr-c in https://github.com/simd-everywhere/simde/commit/7da3fb1d7f9ad859290f7141403036c3c90bf668\r\n* gh-actions: make actionlint/shellcheck clean by @mr-c in https://github.com/simd-everywhere/simde/commit/0f2aecfa4a0e595dcb4bcb050759472e78b52d9d\r\n* gh-actions: simplify gcc loongarch64 testing by @mr-c in https://github.com/simd-everywhere/simde/commit/c9ee1e6598a3a9cd5c31eeab21a33394906c4bde\r\n* gh-actions: macos 16, undef _LIBCPP_ENABLE_ASSERTIONS by @mr-c in https://github.com/simd-everywhere/simde/commit/51743e7920b6e867678cb50e9c62effe28f70b33\r\n* arm neon: extend native alias testing to the vector types by @mr-c in https://github.com/simd-everywhere/simde/commit/53f8c0853a7231dbf5d1efb0f0eba3529850e996\r\n* circleci: drop loongson test, already covered better in gh-actions by @mr-c in https://github.com/simd-everywhere/simde/commit/1dd80a3c29c5b0d5c89458c148de43cfc562d73d\r\n* test.h: define `__STDC_FORMAT_MACROS` if not defined by @barracuda156 in https://github.com/simd-everywhere/simde/pull/1318\r\n* Add i686 and clang packit config by @rathann in https://github.com/simd-everywhere/simde/pull/1297\r\n* build(deps): bump ad-m/github-push-action from 0.8.0 to 1.0.0 by @dependabot[bot] in https://github.com/simd-everywhere/simde/pull/1325\r\n* ccache upgrade by @mr-c in https://github.com/simd-everywhere/simde/pull/1324\r\n* gh-actions emscripten: silence several warnings by @mr-c in https://github.com/simd-everywhere/simde/commit/47513c1868833f524740db01928bf4bdb3fd504c\r\n* Revert \"gh-actions: pin emsdk to earlier version until https://github.com/llvm/llvm-project/issues/117200 is fixed and released\" by @mr-c in https://github.com/simd-everywhere/simde/commit/ced7f1e73bbd53497b9ac9d274f2cf21cce0cee2\r\n* x86 avx512: skip testing NANs with fpclass if -ffast-math or equivalent by @mr-c in https://github.com/simd-everywhere/simde/commit/0efee69e5c16185cad512aefe503b812167e15fe\r\n\r\n# New Contributors\r\n* @rathann made their first contribution in https://github.com/simd-everywhere/simde/pull/1296\r\n* @stellar-aria made their first contribution in https://github.com/simd-everywhere/simde/pull/1291\r\n* @aqrit made their first contribution in https://github.com/simd-everywhere/simde/pull/1309\r\n* @barracuda156 made their first contribution in https://github.com/simd-everywhere/simde/pull/1319\r\n* @michael-chuh made their first contribution in https://github.com/simd-everywhere/simde/pull/1327\r\n* @ethomag made their first contribution in https://github.com/simd-everywhere/simde/pull/1338\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.8.4-rc1...v0.8.4-rc2","mentions_count":10},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/197925589","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/197925589/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/197925589/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.4-rc1","id":197925589,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4LzBrV","tag_name":"v0.8.4-rc1","target_commitish":"master","name":"v0.8.4-rc1","draft":false,"immutable":false,"prerelease":true,"created_at":"2025-02-01T13:42:16Z","updated_at":"2025-02-01T14:12:51Z","published_at":"2025-02-01T14:12:51Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.4-rc1","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.4-rc1","body":"# SIMDe 0.8.4\r\n\r\n# Summary\r\nTBD\r\n# Details\r\n### NEON\r\n- avoid warnings when \"__ARM_NEON_FP\" is not defined. f046ab7 @clopez\r\n- Rename ARM ROL/ROR functions with a SIMDE prefix. cb846d9 @Syonyk\r\n- define native alias only under the inverse of the conditions of a pass-through 2b450c0 @mr-c\r\n- cmla{_rot{90,180,270},}_lane: fix implementations with correct tests (confirmed on an ARMv8.3 system) 00ea77e @wewe5215\r\n- crc32: define `SIMDE_ARCH_ARM_CRC32` and consistently use it 01470d2 @mr-c\r\n- qdmlal: fix saturation (#1194) cf1db25 @Ryo-not-rio\r\n- qdmlsl: fix instructions to use saturation correctly 44a748a @Ryo-not-rio\r\n- qdmulh: Fix vqdmulhs_s32 native alias. 403e942 @Syonyk\r\n- qdmull: Fix SQDMULL implementation for 32-bit inputs. (#1255) 948b236 @Syonyk\r\n- qrdmulh: Remove incorrect SSE code. 8e27139 @Syonyk\r\n- qrshl: Fix incorrect UQRSHL implementation. 2c6adb6 @Syonyk \r\n- qshl: Fix UQSHL to match hardware.  Add extensive test vectors. (#1256) e5d5064 @Syonyk\r\n- qshlu: Fix vqshlud_n_s64 implementation to be 64-bit. 3527e86 @Syonyk\r\n- sli_n: Fix invalid shifts (#1253) 8067442 @Syonyk \r\n- vminnmv_f16: remove duplicate statement (#1208) d1d9f82 @mr-c\r\n## x86 intrinsics\r\n- avx512f: new intrinsics family: fmaddsub (#1246) 6daf535 @robinchrist\r\n- fma: Use 128 bit fnmadd_pd to do 256 bit fnmadd_pd (#1197) bd05320 @AlexK-BD\r\n- avx: `_mm256_storeu_pd` and `_mm256_loadu_pd` using 128 bit lanes 96054b8 @AlexK-BD\r\n- avx: use INT64_C when the destination is i64 (#1238) 60a3a24 @jinboson\r\n- sse4.2: Apply half tabular method in `_mm_crc32` family for the best trade-off between performance and lookup table size 0f68b62 @Cuda-Chen\r\n- sse2: move definition of 'value' to correct branch in `simde_mm_loadl_epi64` b8e468a @K-os\r\n- sse2: fix overflow error detected by clang scan-build in simde_mm_srl_epi{16,32,64} when count is too high 1a9d47f @mr-c\r\n- some better implementations for MSVC and others without `SIMDE_STATEMENT_EXPR_` 1691ae0 @mr-c\r\n## Arch support\r\n### Altivec\r\n- wasm: add u16x8 and u8x16 avgr AltiVec optimized implementations f9bf637 @wrv\r\n### arm / arm64\r\n- wasm: add u16x8 and u8x16 avgr NEON optimized implementations 7e65734 @wrv\r\n- wasm simd128: fix a FAST_NANS error on arm64 a9ebb8a @mr-c\r\n- arm neon native: FCMLA with 16-bit floats, requires the FP16 feature 4936149 @mr-c\r\n- arm neon native: replace use of `SIMDE_ARCH_ARM_CHECK(8+)` with feature checks. afd77a9 @mr-c\r\n### LongAarch\r\n- float16: use a portable version to avoid compilation errors 600050d @XiWeiGu\r\n- x86/sse2: add lsx support b331ea2 @HecaiYuan\r\n- x86/sse2: small fixes for loongarch d344e3c @jinboson\r\n- x86/sse4.2: add loongarch lsx optimized implementations fa6a869 @HecaiYuan      \r\n- x86/sse4.1: add loongarch lsx optimized implementations f85ad3b @HecaiYuan      \r\n- x86/ssse3: add loongarch lsx optimized implementations 879be03 @HecaiYuan       \r\n- x86/sse3: add loongarch lsx optimized implementations 8fdc0e8 @HecaiYuan        \r\n- x86/sse: Fix type convert error for LSX. a6d4207 @yinshiyou\r\n- x86/sse: add loongarch lsx optimized implementations 49f73d9 @HecaiYuan         \r\n- x86/avx2: add loongarch lasx optimized implementations (#1241) d62ab5a @jinboson\r\n- x86/avx2: small fixes for loongarch 1bbb5af @jinboson                           \r\n- x86/avx: add loongarch lasx optimized implementations (#1239) 5e406dc @jinboson\r\n- x86/avx: reoptimized `simde_mm256_addsub_ps/d` with lasx 4242de3 @jinboson        \r\n- x86/clmul: `_x_bitreverse_u64`: add loongarch implementation (#1249) 866cc57 @jinboson\r\n- x86/fma: add loongarch lasx optimized implementations d2cd71b @jinboson         \r\n- x86/f16c: add loongarch lasx optimized implementations a70fca2 @jinboso\r\n### RISCV64\r\n- arm: improve performance in vqadd and vmvn in risc-v 17416b1 @zengdage\r\n- arm/neon: additional RVV implementations (43 instructions) - part 1 (#1188) 6346405 @Ruhung\r\n- arm/neon: additional RVV implementations (34 instructions) - part 2. (#1189) c903416 @wewe5215\r\n- x86 sse2: fix `_mm_pause` for RISCV systems ed042d5 @mr-c\r\n### WASM\r\n- arm neon st2: add vst2_u8 WASM optimized implementation 9aeb89e @wrv                     \r\n- arm neon shll_n: add vshll WASM optimized implementations 1fdca85 @wrv                      \r\n- arm neon st4: add vst4_u8 WASM optimized implementation 7f47244 @wrv\r\n- sse2: remove redundant `mm_add_pd` optimized implementation for WASM (#1190) 8ee42f6 @wrv\r\n- sse2: Wasm SIMD version of `_mm_sad_epu8` bc37d4b @wrv\r\n### z/Arch\r\n- neon/cvz: stop using deprecated functions. 776d0b6 @mr-c\r\n## Compiler Specific\r\n### Clang\r\n- Don't use `_Float16` on s390x a1ce45c @mcatanzaro\r\n- Don't use `_Float16` on non-SSE2 x86 40f4d28 @mcatanzaro\r\n- x86 avx512: fix clang type redef error f4daa86 @bd-jahn \r\n### GCC\r\n- Use `_Float16` in C++ on aarch64 with GCC 13+ e30e6ec @mcatanzaro\r\n- arm neon: fix arm64 gcc11 build excess elements in vector failure d370f28 @Qingwu-Li\r\n- arm neon: avoid vst1_*_x4 built-in functions in GCC 11 and before 557fd6d @Qingwu-Li\r\n- arm neon sm3: gcc-14 -O3 complained about some possible uninitialized values 99ac62b @mr-c\r\n- arm neon `_vext_p6`: reverse logic to avoid GCC14 i586 bug (#1251) e958b0a @mr-c\r\n- risc64 gcc-14: Disable uninitialized variable warnings for some ARM neon SM3 functions b2ad094 @Syonyk\r\n- simde-aes: gcc 13.2+ ignore unused variable warnings f4f5904 @mr-c\r\n- arm neon gcc-12 FRINT workaround e5605e9 @mr-c\r\n### MSVC\r\n- add `simde_MemoryBarrier` to avoid including `<windows.h>` f47e3c5 @Epixu\r\n## Testing with Docker/Podman & CI\r\n- meson: 0.55.1 is needed for Python 3.12+ 030c07c @mr-c\r\n- x86/avx: Adding several overflow tests for various avx functions e8c881d @qvd808\r\n- arm neon qdmlsl: unroll SIMDE_CONSTIFY for testing macro implemented functions 858b005 @mr-c\r\n- native-aliases test: allow running on macos 6b6e4ef @mr-c\r\n- arm neon abd & cvt tests: add missing import ab5c3e5 @mr-c\r\n- Add tests for vqdmulhs_s32. f56ef45 @Syonyk\r\n- x86 sse2: skip two extreme test cases for `mm_cvtps_epi32` if `SIMDE_FAST_ROUND_TIES` is active. 0e6756b @mr-c\r\n### [Appveyor](https://ci.appveyor.com/project/nemequ/simde/history)\r\n- stop testing with MSVC 2022 until they fix their regressions b6ea9ba @mr-c\r\n### [Circle CI](https://app.circleci.com/pipelines/github/simd-everywhere/simde)\r\n- switch container for gcc11 i686 -O2 test 56b7c7a @mr-c\r\n- run on the primary development branch to prime the cache f0de562 @mr-c\r\n- always save ccache cache 02cc09b 6eabe36 @mr-c                                \r\n- add linux arm64 native aliases testing b036110 @mr-c\r\n- use ccache consistently ab758b5 @mr-c\r\n### [GitHub Actions](https://github.com/simd-everywhere/simde/actions)\r\n- GitHub has retired the macos-11 runners, add some more -13 (x86-64) and -14 (arm64) testing 32c959c @mr-c\r\n- ensure that gcov is present when needed 6f52a1d @mr-c\r\n- upgrade to Ubuntu 24.04 LTS; upgrade/add GCC 13 / clang 18 d67c190 @mr-c\r\n- test loongson + lsx with gcc14 from Ubuntu Oracular 59bf8de @mr-c\r\n- add CI testing for gcc 11 aarch64/arm64 4b96738 @mr-c\r\n- upgrade gcc-qemu to gcc-14 561556c @mr-c\r\n- test aarch64 without extra features 6686232 @mr-c\r\n- add loongarch64 clang-18 test ac3870b @mr-c\r\n- clean up install list 9cbeced @mr-c\r\n- pin emsdk to earlier version until https://github.com/llvm/llvm-project/issues/117200 is fixed and released 3257054 @mr-c\r\n- upgrade Ubuntu Mantic to Ubuntu Noble (24.04) e1bc420 @mr-c\r\n- macos: xcode 14.3.1 is no longer available, switch to macos-15 to test xcode 16.0 7035777 @mr-c\r\n- msvc-arm64: turn off due to compiler issue 6802efa @mr-c\r\n- macos 12: deprecated, going offline on 2024-12-03 2bb7f48 @mr-c\r\n- update CI test for loongarch 0cf3528 @jinboson\r\n- Add some native Linux arm64 clang builds 2f0c939 @mr-c\r\n- aarch64 qemu testing: increase arm levels and features targeted. 067ab5d @mr-c\r\n- Add more native Linux arm64 builds 693337a @mr-c\r\n- more ccache 17b2cbf @mr-c \r\n## Misc\r\n- pow: consistently use simde_math_pow 8f727c0 @mr-c\r\n- math: typo fix, check `SIMDE_MATH_NANF` instead of the old-style `SIMDE_NANF` 40567df @mr-c\r\n- math: Whoops, missing comma 73e43dd @Dave-Lowndes\r\n- remove extraneous semicolons from many macro-defined functions 01f7a4f @mr-c\r\n\r\n## New Contributors\r\n* @clopez made their first contribution in https://github.com/simd-everywhere/simde/pull/1179\r\n* @mcatanzaro made their first contribution in https://github.com/simd-everywhere/simde/pull/1182\r\n* @Ruhung made their first contribution in https://github.com/simd-everywhere/simde/pull/1188\r\n* @AlexK-BD made their first contribution in https://github.com/simd-everywhere/simde/pull/1197\r\n* @Epixu made their first contribution in https://github.com/simd-everywhere/simde/pull/1199\r\n* @yinshiyou made their first contribution in https://github.com/simd-everywhere/simde/pull/1215\r\n* @Qingwu-Li made their first contribution in https://github.com/simd-everywhere/simde/pull/1216\r\n* @K-os made their first contribution in https://github.com/simd-everywhere/simde/pull/1223\r\n* @XiWeiGu made their first contribution in https://github.com/simd-everywhere/simde/pull/1224\r\n* @Dave-Lowndes made their first contribution in https://github.com/simd-everywhere/simde/pull/1233\r\n* @bd-jahn made their first contribution in https://github.com/simd-everywhere/simde/pull/1232\r\n* @qvd808 made their first contribution in https://github.com/simd-everywhere/simde/pull/1226\r\n* @HecaiYuan made their first contribution in https://github.com/simd-everywhere/simde/pull/1236\r\n* @jinboson made their first contribution in https://github.com/simd-everywhere/simde/pull/1238\r\n* @robinchrist made their first contribution in https://github.com/simd-everywhere/simde/pull/1246\r\n* @Syonyk made their first contribution in https://github.com/simd-everywhere/simde/pull/1253\r\n* @Ryo-not-rio made their first contribution in https://github.com/simd-everywhere/simde/pull/1195\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.8.2...v0.8.4-rc1","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/197925589/reactions","total_count":3,"+1":1,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"mentions_count":22},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/153793153","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/153793153/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/153793153/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.2","id":153793153,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4JKrKB","tag_name":"v0.8.2","target_commitish":"master","name":"v0.8.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-04-30T16:35:50Z","updated_at":"2024-05-02T10:46:54Z","published_at":"2024-05-02T09:58:14Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/165552374","id":165552374,"node_id":"RA_kwDOBSfaCM4J3iD2","name":"simde-amalgamated-0.8.2.tar.xz","label":null,"uploader":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":464088,"digest":null,"download_count":160984,"created_at":"2024-05-02T10:05:45Z","updated_at":"2024-05-02T10:09:26Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.8.2/simde-amalgamated-0.8.2.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.2","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.2","body":"# SIMDe 0.8.2\r\n\r\n# Summary\r\n- Start of RISCV64 optimized implementation using the RVV1.0 vector extension! Thank you @eric900115 @howjmay @zengdage\r\n- 62 of the ARM Neon intrinsics added in SIMDe 0.8.0 had to be removed for not exactly matching the specs and real hardware\r\n(from the FCVTZS/FCVTMS/FCVTPS/FCVTNS families). This brings us down from 100% coverage of the NEON functions to [99.07%](https://github.com/simd-everywhere/implementation-status/blob/1266db91f06e9281601ad91f0b3950a16ce97feb/neon.md#incomplete-families).\r\n\r\nFor the entire project: 126 files changed, 5522 insertions(+), 2772 deletions(-)<br />\r\nFor just the `simde` folder: 89 files changed, 4330 insertions(+), 2199 deletions(-)\r\n\r\n# Details\r\n## Implementation of Arm intrinsics\r\n### NEON\r\n- arm neon: disable some FCVTZS/FCVTMS/FCVTPS/FCVTNS family intrinsics 339ffe4 @mr-c\r\n- arm neon sm3: check constant range 3d34fcd @mr-c\r\n- arm 32 bits: native def fixes; workarounds for gcc 22900e6 @Cuda-Chen\r\n- x86 implementations: allow _m128 access from SSE 114c3cd @mr-c\r\n## WASM intrinsics\r\n- wasm x86 impl: some were incorrectly marked SSE instead of SSE2 fee149a @mr-c\r\n## x86 intrinsics\r\n### SVML\r\n- SSE is good enough for native m128i and m128d types & functions 9982b27 @mr-c\r\n### XOP\r\n- fix some native functions 608200b @mr-c\r\n## Arch support\r\n### arm / arm64\r\n- arm platform: cleanup feature detection. 08c21f3 @mr-c\r\n- arm: enable more intrinsic function for armv7 416091e @zengdage\r\n### RISCV64\r\n- Initial Support for the RISC-V Vector Extension (RVV1.0) in ARM NEON (#1130) b4e805a @eric900115\r\n- arm: fix some neon2rvv intrinsic function error 2a548e5 @zengdage\r\n- arm: Add neon2rvv support in vand series intrinsics dac67f3 @howjmay\r\n- arm: improve performance in vabd_xxx for risc-v b63ba04 @zengdage               \r\n- arm: improve performance in vhadd_xxx for risc-v a68fa90 @zengdage\r\n## Compiler Specific\r\n### Clang\r\n- detect clang versions 18 & 19 ed4a5cd @mr-c\r\n- arm neon clang: skip vrnd native before clang v18 e647f10 @mr-c\r\n- apple clang arm64: ignore SHA2 be48ef8 @mr-c\r\n### Emscripten\r\n- use `__builtin_roundeven{f,}` from version 3.1.43 onwards 4379740 @mr-c\r\n### MSVC\r\n- x86 test msvc: really disable warning 4799,4730 487507d @mr-c\r\n- sse2 MSVC `_mm_pause` implementaiton for x86 8d95f83 @mr-c \r\n- SSE is good enough for native m128i and m128d types & functions 9982b27 @mr-c\r\n## Testing with Docker/Podman & CI\r\n- CI: don't run twice on dependabot branches 70748cd @mr-c\r\n### [Cirrus CI](https://cirrus-ci.com/github/simd-everywhere/simde)\r\n- upgrade to clang-17 7ab3240 @mr-c\r\n### [GitHub Actions](https://github.com/simd-everywhere/simde/actions)\r\n- test Mac arm64 0080b28 @mr-c\r\n- macos: report log if there is a configuration failure. df3e930 @mr-c\r\n- build(deps): bump actions/checkout from 3 to 4 (#1149) 9605608 @dependabot[bot]\r\n- build(deps): bump codecov/codecov-action from 3 to 4 25382c1 @dependabot[bot]\r\n- codecov: use token 2c45dd4 @mr-c\r\n- Add gcc arm 32bit armv8-a test in CI 72bde75 @Cuda-Chen\r\n- build for AMD Buildozer version 2 9746537 @mr-c\r\n### [Packit CI](https://dashboard.packit.dev/projects/github.com/simd-everywhere/simde)\r\n- Drop i386 (i686) support. (#1155) cf68aaf @junaruga\r\n### [Semaphore CI](https://nemequ.semaphoreci.com/projects/simde)\r\n- stop testing on GCC 5 & 6, clang 3.9 & 4 due to forced upgrade to Ubuntu 20.04 9982f10 @mr-c\r\n## Misc\r\n- update list of fully implemented instruction sets (#1152) b568fcd @mr-c\r\n- typo fixes from codespell 8639fef @mr-c                                         \r\n- README.md - move CLMUL to partial, list more of the CI.yml architectures 285b50d @Torinde\r\n- Update README.md - link to VPCLMULQDQ; mention MSA (#1157) 517da84 @Torinde     \r\n- Update README.md (#1156) b88a66d @mr-c \r\n- README: two more related projects 7429dff @mr-c\r\n\r\n## New Contributors\r\n* @eric900115 made their first contribution in https://github.com/simd-everywhere/simde/pull/1130\r\n* @Cuda-Chen made their first contribution in https://github.com/simd-everywhere/simde/pull/1116\r\n* @Torinde made their first contribution in https://github.com/simd-everywhere/simde/pull/1157\r\n* @zengdage made their first contribution in https://github.com/simd-everywhere/simde/pull/1172\r\n* @howjmay made their first contribution in https://github.com/simd-everywhere/simde/pull/1174\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.8.0...v0.8.2","mentions_count":8},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/153545870","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/153545870/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/153545870/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.2-rc1","id":153545870,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4JJuyO","tag_name":"v0.8.2-rc1","target_commitish":"master","name":"v0.8.2-rc1","draft":false,"immutable":false,"prerelease":true,"created_at":"2024-04-30T16:35:50Z","updated_at":"2024-04-30T16:39:20Z","published_at":"2024-04-30T16:39:20Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.2-rc1","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.2-rc1","body":"See draft release notes at https://github.com/simd-everywhere/simde/wiki/Release-Notes for changes since 0.8.0\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.8.0...v0.8.2-rc1","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/153545870/reactions","total_count":2,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/146578374","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/146578374/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/146578374/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.0","id":146578374,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4IvJvG","tag_name":"v0.8.0","target_commitish":"master","name":"v0.8.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2024-03-07T14:55:14Z","updated_at":"2024-03-14T13:09:16Z","published_at":"2024-03-14T13:03:28Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/156663620","id":156663620,"node_id":"RA_kwDOBSfaCM4JVn9E","name":"simde-amalgamated-0.8.0.tar.xz","label":null,"uploader":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":457396,"digest":null,"download_count":870,"created_at":"2024-03-14T13:09:14Z","updated_at":"2024-03-14T13:09:16Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.8.0/simde-amalgamated-0.8.0.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.0","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.0","body":"# SIMDe 0.8.0\r\n\r\n# Summary\r\n\r\n* Complete set of implementations for all NEON intrinsics have been finished, up from 56.46% in the previous release! (@yyctw @wewe5215)\r\n* SIMDe PRs are tested using Fedora Rawhide (@junaruga)\r\n\r\nFor the entire project: 656 files changed, 202635 insertions(+), 1724 deletions(-)<br />\r\nFor just the `simde` folder: 295 files changed, 47053 insertions(+), 896 deletions(-)\r\n\r\n## [X86](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md)\r\nThere are a total of 6876 SIMD functions on x86, 2930 (43.17%) of which have been implemented in SIMDe so far. Specifically for AVX-512, of the 5160 functions currently in AVX-512, SIMDe implements 1510 (29.26%).\r\n\r\nNote: Intel has removed the intrinsics that were unique to Intel Xeon Phi (`ER`, `PF`, `4MAPS`, and `4VNNIW`) from their intrinsic list. SIMDe will retain those few implementations we already had, but this [changes how our completeness statistics are calculated](https://github.com/simd-everywhere/implementation-status/commit/f2e41cd88b41b299002b09d95e8fc7f761332926).\r\n\r\n### Newly added function families\r\n* [AES](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#aes): 5 of 6 (83.33%)\r\n### Newly AVX512 added function families\r\n* [castph](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#castph): 1 of 9 (11.11%) implemented.\r\n* [cvtus_storeu](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#cvtus_storeu): 1 of 18 (5.56%) implemented.\r\n* [fpclass](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#fpclass): 3 of 24 (12.50%) implemented.\r\n* [i32gather](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#i32gather): 1 of 8 (12.50%) implemented.\r\n* [i64gather](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#i64gather): 8 of 8 :100:\r\n* [permutex](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#permutex): 3 of 12 (25.00%) implemented.\r\n* [rcp14](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#rcp14): 1 of 24 (4.17%) implemented.\r\nreduce\r\n* [reduce_max](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#reduce_max): 7 of 31 (22.58%) implemented.\r\n* [reduce_min](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#reduce_min): 7 of 31 (22.58%) implemented.\r\n* [shufflehi](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#shufflehi): 1 of 7 (14.29%) implemented.\r\n* [shufflelo](https://github.com/simd-everywhere/implementation-status/blob/main/avx512.md#shufflelo): 1 of 7 (14.29%) implemented.\r\n### Additions to existing families\r\n* [AVX512BW](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512bw): 7 additional, 337 of 790 (42.66%)\r\n* [AVX512DQ](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512dq): 5 additional, 112 total of 376 (29.79%)\r\n* [AVX512F](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512f): 48 additional, 1087 total of 2812 (38.66%)\r\n* [AVX512_FP16](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_fp16): 15 additional, 17 total of 1105 (1.54%)\r\n## [Neon](https://github.com/simd-everywhere/implementation-status/blob/main/neon.md)\r\n SIMDe currently implements 6670 out of 6670 (100.00%) NEON functions; up from 56.46% in the previous release!\r\n### Newly added families\r\n* abal\r\n* abal_high\r\n* abd\r\n* abdh\r\n* abdl_high\r\n* addhn_high\r\n* aes\r\n* bfdot\r\n* bfdot_lane\r\n* cadd_rot\r\n* cale\r\n* calt\r\n* cmla_lane\r\n* cmla_rot_lane\r\n* copy_lane\r\n* cvt_high\r\n* cvt_n\r\n* cvta\r\n* cvtn\r\n* cvtp\r\n* cvtx\r\n* cvtx_high\r\n* div\r\n* dupb_lane\r\n* duph_lane\r\n* eor3\r\n* fmlal\r\n* fms\r\n* fms_lane\r\n* fms_n\r\n* ld2_dup\r\n* ld2_lane\r\n* ld3_dup\r\n* ld3_lane\r\n* ld4_dup\r\n* maxnmv\r\n* minnmv\r\n* mla_lane\r\n* mla_high_lane\r\n* mls_lane\r\n* mlsl_high_lane\r\n* mmla\r\n* mull_high_lane\r\n* mull_high_n\r\n* mulx\r\n* mulx_lane\r\n* pmaxnm\r\n* pminnm\r\n* qdmlal\r\n* qdmlal_high\r\n* qdmlal_high_lane\r\n* qdmlal_high_n\r\n* qdmlal_lane\r\n* qdmlal_n\r\n* qdmlsl\r\n* qdmlsl_high\r\n* qdmlsl_high_lane\r\n* qdmlsl_high_n\r\n* qdmlsl_lane\r\n* qdmlsl_n\r\n* qdmlslh\r\n* qdmlslh_lane\r\n* qdmulhh\r\n* qdmulhh_lane\r\n* qdmull_high\r\n* qdmull_high_lane\r\n* qdmull_high_n\r\n* qdmull_lane\r\n* qdmull_n\r\n* qdmullh_lane\r\n* qmovun_high\r\n* qrdmlah\r\n* qrdmlah_lane\r\n* qrdmlahh\r\n* qrdmlahh_lane\r\n* qrdmlsh\r\n* qrdmlsh_lane\r\n* qrdmlshh\r\n* qrdmlshh_lane\r\n* qrdmulhh_lane\r\n* qrshl\r\n* qrshlh\r\n* qrshrn_high_n\r\n* qrshrnh_n\r\n* qrshrun_high_n\r\n* qrshrunh_n\r\n* qshl_n\r\n* qshlh_n\r\n* qshluh_n\r\n* qshrn_high_n\r\n* qshrnh_n\r\n* qshrun_high_n\r\n* qshrunh_n\r\n* raddhn\r\n* raddhn_high\r\n* rax\r\n* recp\r\n* rnd32x\r\n* rnd32x\r\n* rnd32x\r\n* rnd64z\r\n* rnda\r\n* rndx\r\n* rshrn_high_n\r\n* rsubhn\r\n* rsubhn\r\n* set_lane\r\n* sha1\r\n* sha1h\r\n* sha256\r\n* sha512\r\n* shll_high_n\r\n* shrn_high_n\r\n* sli_n\r\n* sm3\r\n* sm4\r\n* sqrt\r\n* st1_x2\r\n* st1_x3\r\n* st1_x4\r\n* st1q_x2\r\n* st1q_x3\r\n* st1q_x4\r\n* subhn_high\r\n* sudot_lane\r\n* usdot\r\n* usdot_lane\r\n\r\nFinally complete families\r\n* cvtn\r\n* mla_lane\r\n\r\n# Details\r\n* simde-f16: improve `_Float16` usage; better INFHF/NANHF defs 8910057 @mr-c\r\n* simde_float16: prefer `__fp16` if available aba26f6 @mr-c\r\n\r\n## Implementation of Arm intrinsics\r\n### NEON\r\n* cvtn: `vcvtnq_{s32_f32,s64_f64}`: add SSE & AVX512 optimized implementations e134cc7 @mr-c\r\n* cvtn: `vcvtnq_u32_f32` is a V8 function 8432c70 @mr-c\r\n* min: Remove non-working MMX specialization from `simde_vmin_s16` 6858b92 @M-HT\r\n* shll: Extend constant range in `simde_vshll_n_XXX` intrinsics (#1064) beb1c61 @M-HT\r\n* various: Implement some f16XN types and f16 related intrinsics. (#1071) aae2245 @yyctw\r\n* qtbl/qtbx polyfills for A32V7 a2fef9e @easyaspi314\r\n* arm: use `SIMDE_ARCH_ARM_FMA` 7198d6d @mr-c\r\n* arm neon: Complex operations from Armv8.3-a (#1077) d08d67c @wewe5215\r\n* more fp16 using intrinsics supported by architecture v7 (skip version) (#1081) 5e7c4d4 @yyctw\r\n* `st1{,q}_*_x{2,3,4}`: initial implementation (#1082) 879d1a0 @yyctw\r\n* part 1 of implement all intrinsics supported by architecture A64 (#1090) 2eedece @yyctw\r\n* Add AES instructions. 23adcd2 805ccd2 @yyctw\r\n* Modified `simde_float16` to `simde_float16_t` (#1100) 8a05dc6 @yyctw\r\n* implement all intrinsics supported by architecture A64-remaining part (#1093) 018ba24 @yyctw\r\n* add enable `vmlaq_laneq_f32` and `vcvtq_n_f64_u64` c7d314b @yyctw\r\n* implement all bf16-related intrinsics (#1110) c59db7c @yyctw \r\n* arm/neon abs: negating `INT_MIN` is undefined behavior in C/C++ c200c16 @mr-c \r\n### SVE Intrinsics\r\n* Improve performance of `simde_mm512_add_epi32` (#1126) 6cde31c @AymenQ\r\n## WASM intrinsics\r\n* simd128: fix altivec_p7 version of `wasm_f64x2_pmin` 96d6e53 @mr-c\r\n* simd128: add missing unsigned functions ea5e283 @mr-c\r\n* simd128 `f{32x4,64x2}_min`: add workaround for a gcc<6 issue d5d6d10 @mr-c\r\n* detect support for Relaxed SIMD mode 2e66dd4 @mr-c\r\n* simd128/relaxed: begin MIPS implementations db8ad84 @mr-c\r\n* relaxed: add `f{32x4,64x2}_relaxed_{min,max}` 9d1a34e @mr-c\r\n* relaxed: updated names; reordered FMA operations 8cc8874 @mr-c\r\n## x86 intrinsics\r\n* sse{,2,4.1}, avx{,2} `*_stream_{,load}`: use `__builtin_nontemporal_{load,store}` 6ce6030 @mr-c\r\n### SSE*\r\n* sse: Fix issues related to MXCSR register (#1060) 653aba8 @M-HT\r\n* sse: implement `_mm_movelh_ps` for Arm64 514564e @mr-c\r\n* sse `_mm_movemask_ps`: remove unused code fba97e4 @mr-c\r\n* sse2 mm_pause: more archs, add a basic test 692a2e8 @mr-\r\n* sse4.1: use logical OR instead of bitwise OR in neon impl of `_mm_testnzc_si128` edd4678 @mr-c\r\n* sse4.1 `_mm_testz_si128`: fix backwards short circuit logic f132275 @mr-c\r\n### AVX\r\n* run test from #926 ce9708c @mr-c\r\n* `simde_mm256_shuffle_pd` fix for natural vector size < 128 1594d7c @mr-c\r\n### AVX2\r\n* correction of `simde_mm256_sign_epi{8,16,32}` (#1123) c376610 @Proudsalsa\r\n### AVX512\r\n* fpclass: naive implementation 353bf5f @mr-c\r\n* loadu: fix native detection 305f434 @mr-c\r\n* set: add `simde_x_mm512_set_m256{,d}` 67e0c50 @mr-c\r\n* gather: add MSVC native fallbacks 7b7e3f6 @mr-c\r\n* AVX512FP16 / m512h initial support e97691c @mr-c\r\n* fix many native aliases 75014b9 @mr-c\r\n### CLMUL\r\n* fix natives, some require VPCLMULQDQ f819c52 @mr-c\r\n### SVML\r\n* enable SIMDE_X86_SVML_NATIVE for MSVC 2019+ 593af95 @mr-c\r\n### AES\r\n* aes: initial implementation of most aes instructions (#1072) 8632391 @Vineg\r\n## MIPS MSA intrinics\r\n* msa neon impl: `float64x2_t` is not avail in A32V7 ae4c4ab @mr-c \r\n## Arch support\r\n### x86(-64)\r\n* fix `SIMDE_ARCH_X86_SSE4_2` define 5e4b308 @cbielow\r\n### arm64\r\n* x86 aes: add neon implementation using the crypto extension fb3554f @mr-\r\n### Altivec\r\n* neon/st1: disable last remaining AltiVec implementation 0521245 @mr-c\r\n### Power\r\n* sse2,wasm simd128: skip `SIMDE_CONVERT_VECTOR_` impementations on PowerPC 4de999a @mr-c\r\n* wasm simd128: more powerpc fixes 7cb5691 @mr-c\r\n## Compiler Specific\r\n### GCC\r\n* GCC AVX512F: `SIMDE_BUG_GCC_95399` was fixed in GCC 9.5, 10.4, 11.4, 12+ 3fa89c5 @mr-c\r\n* GCC x86/x64: `SIMDE_BUG_GCC_98521` was fixed in 10.3 edde42e @mr-c                \r\n* GCC x86: `SIMDE_BUG_GCC_94482` was fixed in 8.5, 9.4, 10+ 43d86a3 @mr-c\r\n* Add workaround for GCC bug 111609 fdafd8e @M-HT\r\n* arm neon ld2: silence warnings at -O3 on gcc risc-v 8f56628 @mr-c\r\n* avx512 abs: refine GCC compiler checks for `_mm512{,_mask}_abs_pd` (#1118) 5405bbd @thomas-schlichter\r\n### Clang\r\n* clang powerpc: `vec_bperm` bug was fixed in clang-14 6feb28a @mr-c\r\n* clmul: aarch64 clang has difficulties with poly64x1_t 1e1bd76 @mr-c\r\n* aarch64: optimization bug 45541 was fixed in clang-15 7ca5712 @mr-c\r\n* A32V7: Don't trust clang for load multiple on A32V7 927f141 @easyaspi314\r\n* wasm: `SIMDE_BUG_CLANG_60655` is fixed in the upcoming 17.0 release 25cebbe @mr-c\r\n* `simde-detect-clang.h`: add clang 17 detection 923f8ac 684baa1 50d98c1 @Coeur\r\n### ClangCL\r\n* fp16: don't use `_Float16` on ClangCL if not supported 8a6b8c5 @mr-c\r\n* svml: don't enable `SIMDE_X86_SVML_NATIVE` for ClangCl c877fe5 @mr-\r\n### Emscripten\r\n* emcc tot: set `-Wno-switch-default` fdbd6b2 @mr-c\r\n### MSVC\r\n* avx512 types: avoid using native AVX512 types on MSVC unless required 029d749 @mr-c\r\n* arm neon: `{u,s}addh` apply arm64 windows workaround only on msvc<1938 (#1121) 14311d6 @Changqing-JING\r\n## Testing with Docker/Podman & CI\r\n* Update recipe for qemu git mode 54b8c8f @mr-c\r\n* riscv64 gcc: typo fix for endian little 7423339 @mr-c\r\n* add new cross sets; Ubuntu Focal and Bionic support b0b9710 @mr-c\r\n* native tests: also AVX512, MSA; fix WASM SIMD128 path bdd075b @mr-c\r\n* test-flags: support the x86 microarchitecture levels 518b777 @mr-c\r\n* ignore common build paths b3689ea @mr-c\r\n### [Appveyor](https://ci.appveyor.com/project/nemequ/simde/history)\r\n* preserve test log 9815161 @mr-c                                       \r\n* save meson log on error 5207d83 @mr-\r\n### [Circle CI](https://app.circleci.com/pipelines/github/simd-everywhere/simde)\r\n* circleci: clang, set -Wno-unsafe-buffer-usage 24c93c2 @mr-c\r\n### [GitHub Actions](https://github.com/simd-everywhere/simde/actions)\r\n* upgrade qemu ; fixes remaining ppc64el fails! e91944b @mr-c         \r\n* tidy matrix ordering for easier to read job names b52ac36 @mr-c\r\n* add clang-qemu: aarch64, riscv64, ppc64el, s390x 8a6dbab @mr-c\r\n* test armv7 with gcc-12 via qemu 8cd8de1 @mr-c\r\n* add armel to gcc and clang qemu matrices 4ca849b @mr-c              \r\n* add armv7 to clang-qemu matrix a144aca @mr-c\r\n* use GCC 12 for adv x64 native testing + AVX512FP f156b41 @mr-c\r\n* expand mac-os/xcode testing matrix 8055410 @mr-c\r\n* fix macos-13+brew failure c6149de @mr-c\r\n* test with clang-16 e25ced8 @mr-c                                    \r\n* add gcc-13 43ac8fc @mr-c\r\n* simplify x86 ISA matrix 6b7c1b3 @mr-c\r\n* run on commits to the primary branch to prime the cache 6055bfb @mr-c\r\n* build(deps): bump actions/checkout from 3 to 4 149d0af @dependabot[bot]\r\n* build(deps): bump github/codeql-action from 2 to 3 (#1138) 5026e66 @dependabot[bot]\r\n* build(deps): bump actions/setup-python from 4 to 5 (#1137) 2768da8 @dependabot[bot]\r\n* build(deps): bump actions/setup-dotnet from 3 to 4 (#1135) ed382cb @dependabot[bot]\r\n* build(deps): bump ad-m/github-push-action from 0.6.0 to 0.8.0 (#1134) 193be1b @dependabot[bot]\r\n* add new repo for clang-16 7ebd267 @mr-c\r\n* add clang-17 (#1127) d31de99 @mr-c\r\n* test mips64el using qemu on gcc12/clang16 934d86d @mr-c\r\n* disable {clang,gcc}-qemu mips64el; needs newer Ubuntu version 471a342 @mr-c\r\n* test WASM Relaxed SIMD da0604f @mr-c\r\n### [Packit CI](https://dashboard.packit.dev/projects/github.com/simd-everywhere/simde)\r\n* Start testing SIMDe PRs using Fedora Rawhide d64b103 6ae0763 b309d89 4d55fc2 643c419 @junaruga\r\n### [Travis](https://app.travis-ci.com/github/simd-everywhere/simde)\r\n* restart testing with Travis CI 93905f5 @mr-c\r\n## Misc\r\n* README: mark F16C as complete 2d87cf5 @mr-c\r\n* README: Give credit to creator/maintainer of the vcpkg for SIMDe ceb1e73 @mr-c\r\n* README: related projects: add AvxToNeon 13bf92a @mr-c\r\n* README: add more background links for supported ISAs c76450d @mr-c\r\n* README: turn Packit CI link into a deep link e9e1901 @mr-c\r\n* README: NEON is complete 7412139 @mr-c \r\n* docs: explain how to target a single test 2158ac7 @mr-c\r\n\r\n## New Contributors\r\n* @thomas-schlichter made their first contribution in https://github.com/simd-everywhere/simde/pull/1118\r\n* @Proudsalsa made their first contribution in https://github.com/simd-everywhere/simde/pull/1123\r\n* @Changqing-JING made their first contribution in https://github.com/simd-everywhere/simde/pull/1121\r\n* @AymenQ made their first contribution in https://github.com/simd-everywhere/simde/pull/1126\r\n* @Coeur made their first contribution in https://github.com/simd-everywhere/simde/pull/1129\r\n* @dependabot made their first contribution in https://github.com/simd-everywhere/simde/pull/1134\r\n* @cbielow made their first contribution in https://github.com/simd-everywhere/simde/pull/1055\r\n* @M-HT made their first contribution in https://github.com/simd-everywhere/simde/pull/1060\r\n* @yyctw made their first contribution in https://github.com/simd-everywhere/simde/pull/1071\r\n* @Vineg made their first contribution in https://github.com/simd-everywhere/simde/pull/1072\r\n* @wewe5215 made their first contribution in https://github.com/simd-everywhere/simde/pull/1077\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.7.6...v0.8.0","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/146578374/reactions","total_count":7,"+1":3,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":2,"eyes":0},"mentions_count":15},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/145271779","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/145271779/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/145271779/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.0-rc2","id":145271779,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4IqKvj","tag_name":"v0.8.0-rc2","target_commitish":"master","name":"v0.8.0-rc2","draft":false,"immutable":false,"prerelease":true,"created_at":"2024-02-22T15:52:17Z","updated_at":"2024-03-07T14:48:16Z","published_at":"2024-03-07T14:15:32Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.0-rc2","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.0-rc2","body":"See draft release notes at https://github.com/simd-everywhere/simde/wiki/Release-Notes for changes since 0.7.6\r\n\r\n## What's Changed since RC1\r\n* WASM Relaxed SIMD updates by @mr-c in https://github.com/simd-everywhere/simde/pull/1112\r\n* emcc tot: set -Wno-switch-default by @mr-c in https://github.com/simd-everywhere/simde/pull/1115\r\n* avx512 abs: refine GCC compiler checks for `_mm512{,_mask}_abs_pd` by @thomas-schlichter in https://github.com/simd-everywhere/simde/pull/1118\r\n* correction of simde_mm256_sign_epi16(). by @Proudsalsa in https://github.com/simd-everywhere/simde/pull/1123\r\n* apply arm64 windows workaround only on older version msvc by @Changqing-JING in https://github.com/simd-everywhere/simde/pull/1121\r\n* gh-actions: add clang-17 by @mr-c in https://github.com/simd-everywhere/simde/pull/1127\r\n* Improve performance of simde_mm512_add_epi32 by @AymenQ in https://github.com/simd-everywhere/simde/pull/1126\r\n* typo: XCode -> Xcode by @Coeur in https://github.com/simd-everywhere/simde/pull/1129\r\n* Update simde-detect-clang.h for clang 13 detection by @Coeur in https://github.com/simd-everywhere/simde/pull/1131\r\n* Update simde-detect-clang.h for clang 17 detection by @Coeur in https://github.com/simd-everywhere/simde/pull/1132\r\n* build(deps): bump ad-m/github-push-action from 0.6.0 to 0.8.0 by @dependabot in https://github.com/simd-everywhere/simde/pull/1134\r\n* build(deps): bump actions/setup-dotnet from 3 to 4 by @dependabot in https://github.com/simd-everywhere/simde/pull/1135\r\n* build(deps): bump actions/setup-python from 4 to 5 by @dependabot in https://github.com/simd-everywhere/simde/pull/1137\r\n* build(deps): bump github/codeql-action from 2 to 3 by @dependabot in https://github.com/simd-everywhere/simde/pull/1138\r\n* GitHub Actions emscripten: use older release for now by @mr-c in https://github.com/simd-everywhere/simde/pull/1133\r\n* build(deps): bump actions/checkout from 3 to 4 by @dependabot in https://github.com/simd-everywhere/simde/pull/1139\r\n* docs: explain how to target a single test by @mr-c in https://github.com/simd-everywhere/simde/pull/1140\r\n* arm/neon abs: negating INT_MIN is undefined behavior by @mr-c in https://github.com/simd-everywhere/simde/pull/1141\r\n\r\n## New Contributors\r\n* @thomas-schlichter made their first contribution in https://github.com/simd-everywhere/simde/pull/1118\r\n* @Proudsalsa made their first contribution in https://github.com/simd-everywhere/simde/pull/1123\r\n* @Changqing-JING made their first contribution in https://github.com/simd-everywhere/simde/pull/1121\r\n* @AymenQ made their first contribution in https://github.com/simd-everywhere/simde/pull/1126\r\n* @Coeur made their first contribution in https://github.com/simd-everywhere/simde/pull/1129\r\n* @dependabot made their first contribution in https://github.com/simd-everywhere/simde/pull/1134\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.8.0-rc1...v0.8.0-rc2","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/145271779/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"mentions_count":7},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/130466220","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/130466220/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/130466220/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.8.0-rc1","id":130466220,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4HxsGs","tag_name":"v0.8.0-rc1","target_commitish":"master","name":"v0.8.0-rc1","draft":false,"immutable":false,"prerelease":true,"created_at":"2023-11-20T17:39:19Z","updated_at":"2024-03-10T16:51:51Z","published_at":"2023-11-20T17:41:02Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.8.0-rc1","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.8.0-rc1","body":"See draft release notes at https://github.com/simd-everywhere/simde/wiki/Release-Notes\r\n\r\n## New Contributors\r\n* @cbielow made their first contribution in https://github.com/simd-everywhere/simde/pull/1055\r\n* @M-HT made their first contribution in https://github.com/simd-everywhere/simde/pull/1060\r\n* @yyctw made their first contribution in https://github.com/simd-everywhere/simde/pull/1071\r\n* @Vineg made their first contribution in https://github.com/simd-everywhere/simde/pull/1072\r\n* @wewe5215 made their first contribution in https://github.com/simd-everywhere/simde/pull/1077\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.7.6...v0.8.0-rc1","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/130466220/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"mentions_count":5},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/103194524","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/103194524/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/103194524/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.6","id":103194524,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4GJp-c","tag_name":"v0.7.6","target_commitish":"master","name":"v0.7.6","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-05-13T16:15:11Z","updated_at":"2023-05-16T16:56:58Z","published_at":"2023-05-16T16:51:09Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/108439471","id":108439471,"node_id":"RA_kwDOBSfaCM4Gdqev","name":"simde-amalgamated-0.7.6.tar.xz","label":null,"uploader":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":376012,"digest":null,"download_count":296,"created_at":"2023-05-16T16:56:55Z","updated_at":"2023-05-16T16:56:58Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.7.6/simde-amalgamated-0.7.6.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.6","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.6","body":"# Summary\r\n\r\nSee, I knew we should release more often!\r\n\r\n# Details\r\n## Implementation of Arm intrinsics\r\n### NEON\r\nneon/abd,ext,cmla{,_rot{180,270,90}}: additional wasm128 implementations 3a18dff @mr-c\r\nneon/cvtn: basic implementation of a few functions fefc785 @mr-c\r\nneon/mla_lane: initial implementation using mla+dup 554ab18 @ngzhian\r\nneon/shl,rshl: fix avx include to unbreak amalgamated hearders 3748a9f @mr-c\r\nneon/shll_n: make vshll_n_u32 test operational 356db0c @mr-c\r\nneon/qabs: restore SSE2 impl for vqabsq_s8 f614843 @mr-c\r\n\r\n## x86 intrinsics\r\nmmx: loogson impl promotions over SIMDE_SHUFFLE_VECTOR_ 51bf6f2 @mr-c\r\nx86/sse*,avx: add additional SIMD128 implementations e28a87e @mr-c              \r\n### SSE*\r\nsse{,2,3,4.1},avx: more WASM shuffle implementations 097dd12 @mr-c\r\nsse*,avx: add additional SIMD128 implementations e28a87e @mr-c\r\nsse: allow native _mm_loadh_pi on MSVC x64 314452b @mr-c\r\n### AVX512\r\navx512: typo fix for typedef of __mmask64 e8390a3 4a9f01a @mr-c\r\navx512/madd: fix native alias arguments for _mm512_madd_epi16 bcf4adb @mr-c\r\n## Arch support\r\nsimde-arch: #include Hedley for setting F16C for MSVC 2022+ with AVX2 f9cf467 @mr-c\r\n## Testing with Docker/Podman & CI\r\ntests: simde_assert_equal_{v,}f funcs were silently failing 395efd9 @mr-c\r\ntests: Quiet another Clang < v5 warning that resurfaced d9d2b45 @mr-c\r\ntests: audit use of HEDLEY_DIAGNOSTIC_PUSH and _POP 284c88a @mr-c\r\ntest: ignore -Wc99-extensions e264ff5 @mr-c\r\nneon/aba: vaba_s32 test was not being run f86346a @mr-c\r\nsve/and: the svand_n_s8_m test is incomplete, mark it as such b962f07 @mr-c\r\ntests: combine declarations in test functions 76c7d37 @mr-c\r\n### [Local testing with Docker/Podman](https://github.com/simd-everywhere/simde/tree/master/docker#readme)\r\ndocker: add wasm64 target 29db539 @mr-c\r\n### [Drone.io](https://cloud.drone.io/simd-everywhere/simde)\r\nremove Drone.io fd10911 @mr-c\r\n### [GitHub Actions](https://github.com/simd-everywhere/simde/actions)\r\ngh-actions: confirm that all header files are installed 8d5e05a @mr-c\r\ngh-actions: put wasm64 under CI 6702820 @mr-c\r\n### [Netlify](https://app.netlify.com/sites/simde/)\r\nnetlify: disable for now caa0929 @mr-c\r\n## Misc\r\nmeson install: arm/neon/ld1 & x86/avx512.h 27836b1 @mr-c\r\nUpdate clang version detection for 14..16 and add link 4957a9e @jan-wassenberg\r\n","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/103194524/reactions","total_count":5,"+1":2,"-1":0,"laugh":0,"hooray":3,"confused":0,"heart":0,"rocket":0,"eyes":0},"mentions_count":3},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/101962455","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/101962455/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/101962455/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.4","id":101962455,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4GE9LX","tag_name":"v0.7.4","target_commitish":"master","name":"v0.7.4","draft":false,"immutable":false,"prerelease":false,"created_at":"2023-05-04T19:56:42Z","updated_at":"2023-05-05T05:35:31Z","published_at":"2023-05-05T05:35:31Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/106797458","id":106797458,"node_id":"RA_kwDOBSfaCM4GXZmS","name":"simde-amalgamated-0.7.4.tar.xz","label":null,"uploader":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":372192,"digest":null,"download_count":36,"created_at":"2023-05-05T05:21:37Z","updated_at":"2023-05-05T05:21:39Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.7.4/simde-amalgamated-0.7.4.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.4","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.4","body":"# SIMDe 0.7.4\r\n\r\n# Summary\r\n- Minimum meson version is now 0.54\r\n- 40 new NEON families implemented, SVE API implementation started ([14 families](https://github.com/simd-everywhere/simde/issues/609))\r\n- Initial support for x86 [F16C](https://en.wikipedia.org/wiki/F16C) API\r\n- [Initial support](https://github.com/simd-everywhere/implementation-status/blob/main/msa.md) for MIPS MSA API\r\n- Initial support for Arm Scalable Vector Extensions (SVE) API\r\n- Initial support for WASM SIMD128 API\r\n- Initial support for the E2K (Elbrus) architecture\r\n- MSVC has many fixes, now compiled in CI using `/ARCH:AVX`, `/ARCH:AVX2`, and `/ARCH:AVX512`\r\n\r\n## [X86](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md)\r\nThere are a total of 7470 SIMD functions on x86, 2971 (39.77%) of which have been implemented in SIMDe so far.\r\nSpecifically for AVX-512, of the 5270 functions currently in AVX-512, SIMDe implements 1439 (27.31%)\r\n\r\n### Newly added function families\r\n- [AVX512CD](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512cd): 21 of 42 (50.00%)\r\n- [AVX512VPOPCNTDQ](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512vpopcntdq): 18 of 18 :100:\r\n- [AVX512_4VNNIW](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_4vnniw): 6 of 6 (100.00%)\r\n- [AVX512_BF16](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_bf16): 9 of 38 (23.68%)\r\n- [AVX512_BITALG](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_bitalg): 24 of 24 :100: \r\n- [AVX512_FP16](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_fp16): 2 of 1105 (0.18%)\r\n- [AVX512_VBMI2](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_vbmi2) 3 of 150 (2.00%)\r\n- [AVX512_VNNI](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_vnni): 36 of 36 :100:\r\n- [AVX_VNNI](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx_vnni): 8 of 16 (50.00%)\r\n\r\n### Additions to existing families\r\n- [AVX512F](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512f): 579 additional, 856 total of 2660 (31.80%)\r\n- [AVX512BW](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512bw): 178 additional, 335 total of 828 (40.46%)\r\n- [AVX512DQ](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512dq): 77 additional, 111 total of 399 (27.82%)\r\n- [AVX512_VBMI](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#avx512_vbmi): 9 additional, 30 total of 30 :100:\r\n- [KNCNI](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#kncni): 113 additional, 114 total of 595 (19.16%)\r\n- [VPCLMULQDQ](https://github.com/simd-everywhere/implementation-status/blob/main/x86.md#vpclmulqdq): 1 additional, 2 total of 2 :100:\r\n\r\n## [Neon](https://github.com/simd-everywhere/implementation-status/blob/main/neon.md)\r\nSIMDe currently implements 3745 out of 6670 (56.15%) NEON functions. If you don't count 16-bit floats and poly types, it's 3745 / 4969 (75.37%).\r\n\r\n### Newly added families\r\n- addhn\r\n- bcax\r\n- cage\r\n- cmla\r\n- cmla_rot90\r\n- cmla_rot180\r\n- cmla_rot270\r\n- fma\r\n- fma_lane\r\n- fma_n\r\n- ld2\r\n- ld4_lane\r\n- mlal_high_n\r\n- mlal_lane\r\n- mls_n\r\n- mlsl_high_n\r\n- mlsl_lane\r\n- mull_lane\r\n- qdmulh_lane\r\n- qdmulh_n\r\n- qrdmulh_lane\r\n- qrshrn_n\r\n- qrshrun_n\r\n- qshlu_n\r\n- qshrn_n\r\n- qshrun_n\r\n- recpe\r\n- recps\r\n- rshrn_n\r\n- rsqrte\r\n- rsqrts\r\n- shll_n\r\n- shrn_n\r\n- sqadd\r\n- sri_n\r\n- st2\r\n- st2_lane\r\n- st3_lane\r\n- st4_lane\r\n- subhn\r\n- subl_high\r\n- xar\r\n\r\n## [MSA](https://github.com/simd-everywhere/implementation-status/blob/main/msa.md)\r\nOverall, SIMDe implementents 40 of 533 (7.50%) functions from MSA.\r\n\r\n# Details\r\n\r\n## Implementation of Arm intrinsics\r\n\r\n### NEON\r\n- aarch64 + clang-1[345] fix for \"implicit conversion changes signedness\" a22c3cc @mr-c\r\n- neon: Implement f16 types 21496f6 @Glitch18\r\n- neon: port additional code to new style 1c744fd @nemequ\r\n- neon: replace some more abs/labs/llabs usage with simde_math_* versions c59853a @nemequ\r\n- neon: refactor to use different types on all targets c17957a @nemequ\r\n- neon: test for MMX/SSE instead of x86 when choosing implementation 0366dab @nemequ\r\n- neon/abd: add much better implementations c3ddbbe @nemequ 220db33 @ngzhian\r\n- neon/abs: add SSE2 integer abs implementations 6396dc8 @aqrit\r\n- neon/addhn: initial implementation e9ee066 @nemequ\r\n- neon/add: Implement f16 functions e69239c @Glitch18\r\n- neon/add{l,}v: SSE2/SSSE3 opts `_vadd{lvq_s8, lvq_s16, lvq_u8, vq_u8}` 8b4e375 dfffdde @mr-c\r\n- neon/{add,sub}w_high: use vmovl_high instead of vmovl + get_high b897331 @nemequ\r\n- neon/bcax: initial implementation 96ce481 0ed3dea @Glitch18\r\n- neon/bsl: Implement f16 functions edb75b5 @Glitch18\r\n- neon/cage: Initial f16 implementations 20df81d @Glitch18\r\n- neon/cagt: Implement f16 functions 452a6d3 @Glitch18\r\n- neon/ceq: Implement f16 functions f24ab3d @Glitch18\r\n- neon/ceqz: Implement f16 functions dd2ebf2 de301cd @Glitch18\r\n- neon/cge: Implement f16 functions a512986 f3ad0d4 647dc12 @Glitch18\r\n- neon/cgez: complete implementation of CGEZ family 6d86a20 @Glitch18\r\n- neon/cgt: Add implementation of remaining functions 9930c43 @Glitch18\r\n- neon/cgt, simd128: improve some unsigned comparisons on x86 ae6702a @nemequ\r\n- neon/cgtz: Add implementations of remaining functions 4d749b5 @Glitch18\r\n- neon/cle: add some x86 implementations 5906cc9 d81c7e7 @nemequ 7894c7d @Glitch18\r\n- neon/clez: Add implementaions of scalar functions bc72880 @Glitch18\r\n- neon/clt: Add implementations of scalar functions & SSE/AVX512 fallbacks bc636e1 6a19637 @Glitch18\r\n- neon/cltz: Add scalar functions and natural vector fallbacks 2960ef0 @Glitch18\r\n- neon/cmla, neon/cmla_rot{90,180,270}: check compiler versions e98152f @nemequ\r\n- neon/cmla, neon/cmla_rot{90,180,270}: CMLA requires armv8.3+ 280faae @nemequ\r\n- neon/cmla, neon/cmla_rot{90,180,270}, neon/fma: initial implementation 2aff4f9 @Glitch18\r\n- neon/cnt: add x86 implementations of vcntq_s8 a558d6d @nemequ\r\n- neon/cvt: add `__builtin_convertvector` implementations d06ea5b @nemequ\r\n- neon/cvt: add out-of-range and NaN tests 7d0e2ac @nemequ\r\n- neon/cvt: add some faster x86 float->int/uint conversions ceaaf13 @nemequ\r\n- neon/cvt: Add vcvt_f32_f64 and vcvt_f64_f32 implementations 8398f73 @Glitch18\r\n- neon/cvt: cast result of float/double comparison dc215cd @ngzhian\r\n- neon/cvt: disable some code on 32-bit x86 which uses `_mm_cvttsd_si64` 48edfa9 @nemequ\r\n- neon/cvt: don't use vec_ctsl on POWER 8f9582a @nemequ\r\n- neon/cvt: fix a couple of s390x implementations' NaN handling a8bd33d @nemequ\r\n- neon/cvt: fix compilation with -ffast-math d1d070d @nemequ\r\n- neon/cvt: Implement f16 functions b6a9882 @Glitch18\r\n- neon/cvt, relaxed-simd: add work-around for GCC bug #101614 11aa006 @nemequ\r\n- neon/cvt, simd128: fix compiler errors on PPC 965e68e @nemequ\r\n- neon/cvt: clang bug 46844 was fixed in clang 12.0 71e03a6 @mr-c\r\n- neon/dot_lane: add remaining implementation 3f1c1fa 4a9ca8a @Glitch18\r\n- neon/dup_lane: Complete implementation of function family 12fb731 df320d1 @Glitch18 014ee00 9461557 @nemequ\r\n- neon/dup_lane: use dup_n 2b4a009 @ngzhian\r\n- neon/dup_n: Implement f16 functions 14fdf88 @Glitch18\r\n- neon/dup_n: replace remaining functions with dup_n implementations 27a13b0 @nemequ\r\n- neon/dupq_lane: native and portable 893db57 @ngzhian\r\n- neon/ext: add `__builtin_shufflevector` implementation de8fe89 @ngzhian\r\n- neon/ext: add `_mm_alignr_{,e}pi8` implementations 6d28f04 @nemequ\r\n- neon/ext: clean up shuffle-based implementation f1de709 @nemequ\r\n- neon/ext: simde_*{to,from}_m64 reqs MMX_NATIVE 13ee902 @mr-c\r\n- neon/ext: unroll SIMDE_CONSTIFY for testing macro implemented functions 62834fa @mr-c\r\n- neon/fma: add a couple x86 and PPC implementations 7a2860b @nemequ\r\n- neon/fma: add more extensive feature checking e541dd1 @nemequ\r\n- neon/fma_lane: Implement fmaq_lane functions a77e6ad 555ef3e @Glitch18\r\n- neon/fma_n: initial implementation 06d5a62 @nemequ dab4342 @nemequ\r\n- neon/get_high: add `__builtin_shufflevector` optimizations 4003afa @ngzhian\r\n- neon/get_low: use `__builtin_shufflevector` if available ea3f75e @ngzhian\r\n- neon/hadd,hsub: optimization for Wasm ebe09d8 @ngzhian\r\n- neon/ld1: add Wasm SIMD implementation a79bc15 @ngzhian\r\n- neon/ld1_dup: native and portable (64-bit vectors), f64 debb3c8 @ngzhian 6c71aac @Glitch18\r\n- neon/ld1_dup: split from ld1, dup_n fallbacks, WASM implementations 4c586e0 @nemequ\r\n- neon/ld1: Implement f16 functions 6e89a9c f26f775 @Glitch18\r\n- neon/ld1_lane: Implement remaining functions de2de8d @Glitch18 9051a51 @ngzhian\r\n- neon/ld1q: u8_x2, u8_x3, u8_x4 341006c @ngzhian\r\n- neon/ld1[q]_*_x2: initial implementation cd14634 @dgazzoni\r\n- neon/ld{2,3,4}: disable -Wmaybe-uninitialized on all recent GCC e142a59 @nemequ\r\n- neon/ld{2,3,4}: silence false positive diagnostic on GCC 7 3f737a3 @nemequ\r\n- neon/ld2: Implement remaining functions e68f728 @Glitch18 3b3014f @ngzhian 078bb00 @nemequ 041b1bd @mr-c\r\n- neon/ld4_lane: native and portable implementations a973cab @ngzhian 179fb79 @Glitch18 0d1ab79 @nemequ\r\n- neon/ld4: use conformant array parameters 723a8a8 @nemequ\r\n- neon/ld4: work around spurious warning on clang < 10 64e9db0 @nemequ\r\n- neon/min: add SSE2 vminq_u32 & vqsubq_u32 implementation 2cf165e 117de35 @nemequ\r\n- neon/{min,max}nm: add some headers for -ffast-math ebe5c7d @nemequ\r\n- neon/{min,max}nm: use simde_math_* prefixed min/max functions c1607d2 @nemequ\r\n- neon/mlal_high_n: initial implementation d6f75fa @dgazzoni\r\n- neon/mlal_lane: initial implementation 82e36ed 2168ca0 @nemequ\r\n- neon/mls: add `_mm_fnmadd_*` implementations of vmls*_f* 70e0c20 @nemequ\r\n- neon/mlsl_high_n: initial implementation ca1a4c3 @dgazzoni\r\n- neon/mlsl_lane: initial implementation de78ae9 @nemequ\r\n- neon/mls_n: initial implementation 042c6eb @nemequ\r\n- neon/movl: improve WASM implementation ccffc23 @nemequ\r\n- neon/mul: add improved SSE2 vmulq_s8 implementation c6c6361 @nemequ\r\n- neon/mul: implement unsigned multiplication using signed functions 979552a @nemequ\r\n- neon/mul_lane: Add mul_laneq functions 86b039c 5d2e4bc @Glitch18\r\n- neon/mull_lane: initial implementation 4dd488d @nemequ\r\n- neon/neg: Complete implementation of function family 6423a26 @Glitch18\r\n- neon/padd: Add scalar function implementations fe21dc1 @Glitch18\r\n- neon/pmax: Add scalar function implementations a287eaa @Glitch18\r\n- neon/pmin: Add scalar function implementations 38f7499 @Glitch18\r\n- neon/qabs: add some faster implementations 6cd925e @nemequ\r\n- neon/qadd: add several improved x86 and vector extension versions 4e48e5c @nemequ\r\n- neon/qadd: fix warning in ternarylogic call in vaddq_u32 fad2470 @nemequ\r\n- neon/qadd: improve SSE implementation 8fbe7cd @nemequ\r\n- neon/qdmulh: add scalar & shuffle-based implementations 8cf3afc @nemequ 68e7a0e @Glitch18\r\n- neon/qdmulh_lane: native and portable 79dc1ee @ngzhian 1c64794 @Glitch18\r\n- neon/qdmulh_n: native and portable implementations 55a9c07 @ngzhian\r\n- neon/qdmull: add WASM implementations 7d7a43b @nemequ\r\n- neon/qrdmulh_lane: initial implementation dc2ea75 @nemequ 3794620 @ngzhian 9ab1446 @Glitch18\r\n- neon/qrdmulh: native aliases for scalar functions should be A64 f7820fc @nemequ\r\n- neon/qrdmulh: steal WASM q15mulr_sat implementation for qrdmulhq_s16 ccacf94 @nemequ\r\n- neon/qrshrn_n: Add scalar, native and portable function implementations ffa09ca @Glitch18 2595b3e @ngzhian\r\n- neon/qrshrun_n: Add scalar, native and portable function implementations 49300fa @Glitch18 d5e805b @ngzhian\r\n- neon/qshlu_n: initial implementation 77af9f1 f7b59a5 @Glitch18\r\n- neon/qshrn_n: initial implementation d9260dc @nemequ b4eed3e @Glitch18\r\n- neon/qshrun_n: native, scalar, and portable implementations c29f9fb @ngzhian eeaad75 @Glitch18\r\n- neon/qsub: add some SSE and vector extension implementations 1cb520a @nemequ\r\n- neon/recpe: recpe_f32 and recpe_f64, native and portable 629d129 5a27732 @ngzhian eb18b7c @nemequ 9d8e77f @Glitch18\r\n- neon/recps: recps/recpsq for native, scalar, and portable e8a8a09 7e420a1 @ngzhian 9c67d34 @Glitch18\r\n- neon/reinterpret: f16_u16 and u16_f16 implementations 9aedd5d @Glitch18 7f9794a @ngzhian\r\n- neon/rhadd: optimizations for `rhaddq_xxx` f730009 @aqrit\r\n- neon/rnd: use correct SVML function for simde_vrndq_f64 f19193b @mr-\r\n- neon/rndi, sse2: work around several functions missing in GCC 0b6a9c1 @nemequ\r\n- neon/rndn: Add scalar function implementation d5d6509 d01618a 90c910b @Glitch18 050f935 @nemequ\r\n- neon/rshl: Add scalar function implementations c641cbd @Glitch18\r\n- neon/rshr_n: Add scalar function implementations 465c1ec 3a0ef81 @Glitch18\r\n- neon/rshrn_n: native and portable implementations a703711 @ngzhian\r\n- neon/rsqrte: Implement remaining functions 75c1495 @Glitch18 990b458 @nemequ 8781eb6 @ngzhian\r\n- neon/rsqrts: vrsqrts_f32 and vrsqrtsq_f32 native and portable de8c592 @ngzhian ed5e971 @Glitch18\r\n- neon/rsra_n: Add scalar function implementations 4944075 @Glitch18\r\n- neon/shl: Add scalar implementations 89fdad8 @Glitch18\r\n- neon/shll_n: native and portable implementations 98ac861 @ngzhian\r\n- neon/shl_n: Add scalar function implementations 267ab66 @Glitch18\r\n- neon/shlu_n: faster WASM implementations 5576d8a @nemequ\r\n- neon/shr_n: Add scalar function implementations e3e4b8e @Glitch18 e751352 @nemequ\r\n- neon/shrn_n: s16 s32 s64 u16 u32 u64 portable, native, WASM 8810cdd @ngzhian 40b4549 @ngzhian\r\n- neon/sqadd: initial implementation eab9d99 @Glitch18 1c0dabf @nemequ\r\n- neon/sra_n: Add scalar function implementations 272c2cf @Glitch18\r\n- neon/sri_n: add 128-bit, native, portable & scalar implementations aa832e1 @nemequ dcbcab5 @Glitch18 f6cf839 @ngzhian\r\n- neon/st1: Add f16 functions f58bd3c @Glitch18\r\n- neon/st2: Implement remaining functions 43c4b52 @Glitch18\r\n- neon/st2_lane: portable and native for 8ee1eb4 @ngzhian 4cbed4a @Glitch18\r\n- neon/st2,st1: use zip + st1 to implement st2 7929406 @ngzhian\r\n- neon/st2: vst2(q) f32 s8 s16 s32 u8 u16 u32 1e38dcb @ngzhian\r\n- neon/st3: Add shuffle vector implementations 52da8d4 @Glitch18\r\n- neon/st3_lane: portable and native  ae308b2 @ngzhian 982d2a9 @Glitch18\r\n- neon/st3q_u8: Wasm optimization 687460c @ngzhian\r\n- neon/st4_lane: portable and native b231820 @ngzhian 5be1b07 @Glitch18\r\n- neon/subhn: initial implementation ca62754 @nemequ\r\n- neon/sub: Implements the two remaining scalar functions 74e5b82 @Glitch18\r\n- neon/subl_high: initial implementation 36d6d11 @dgazzoni\r\n- neon/tbl: add WASM implementation of vtbl1_u8 d05fa59 @nemequ\r\n- neon/tst: implement scalar functions 41c2f8a @Glitch18\r\n- neon/types: remove duplicate NEON float16_t definitions 7f40f35 @dgazzoni\r\n- neon/types: reverse logic for SIMDE_ARM_NEON_FORCE_NATIVE_TYPES 7776a8c @nemequ\r\n- neon/types: use vector extensions for public types when available 790e263 @nemequ\r\n- neon/vdup: vdupq_lane_f32 native and portable e2ae5dc @ngzhian\r\n- neon/vld1q_dup: native and portable implementations 650d531 @ngzhian\r\n- neon/vld2_u8: native and portable implementation 85d2ed2 @ngzhian\r\n- neon/vld2: vld2_{u16,u32} and vld2q_{u8,u16,u32,f32} b43d434 @ngzhian\r\n- neon/vld4: Wasm optimization of vld4q_u8 07387bf @ngzhian\r\n- neon/vmovq: define vmovq_n as aliases for vdup_n ff7472b @ngzhian\r\n- neon/xar: initial implementation 50cd8af @Glitch18\r\n- neon/zip1: add armv7 implementations d4ded0a @nemequ\r\n\r\n### SVE Intrinsics\r\n- Initial import of a portable SVE implementation. f8f8382 9fd7d68 7311dd3 @nemequ\r\n- sve/add: initial implementation 70d5b0a 21b39aa 747e076 dd42b49 971aefb @nemequ\r\n- sve/and: initial implementation 5c56617 3382f4e @nemequ\r\n- sve/cmplt: replace vec_and with & for s390 implementations 7c599ea @nemequ\r\n- sve/dup: add *_m variants b90ae4d bad00e9 1da79a2 @nemequ\r\n- sve/ptest: simplify svptest_first c7e4699 @nemequ\r\n- sve/ptest: _BitScanForward64 and __builtin_ctzll is not available in MSVC 2017 47bccc7 @mr-c\r\n- sve/qadd: initial implementation 8aaa62b @nemequ\r\n- sve/sel: initial implementation 113ec2b a1e423e @nemequ\r\n- sve/types: add mmask4 functions for 256-bit vectors 33fbaa2 @nemequ\r\n- sve/whilelt: add svwhilelt_*_{u32,s64,u64} implementations 36927be 2b29fef @nemequ\r\n- sve/whilelt: correct type-o in __mmask32 initialization a53d550 @mr-c\r\n- sve/true,whilelt,cmplt,ld1,st1,sel,and: skip AVX512 native implementations on MSVC 2017 accce42 @mr-c\r\n\r\n## WASM intrinsics\r\n- Add WebAssembly SIMD128 implementation. db758eb 20664a6 57efb02 20682c1 804b833 65db4cf bdc8698 271d1e4 631cf53 7078ab4 5c8d7b3 0e43903 c734535 34b775d 22609d4 f4ee32a 516eb02 1d4075c f73db2d c66df66 c2fda16 06b3462 d45f735 b7b69fb 8a748d7 6c57794 e60f1e0 c37dfd3 fdfa16a c4aa8b4 96226ff 732f519 2890ad4 706de03 fca719e 5638afa d013847 3d4b2ff 783c752 3378ab3 42f0a0b e8da237 22c0dee d9e3615 9848a4c 8a21137 5b1a330 dbd2e5c 09d8f79 e1bc968 @nemequ 2380aa4 @coderzh\r\n- wasm: load lane memcpy instead of cast to address UBSAN issues 7631312 @wrv\r\n- wasm: f32x4 and f64x2 nearest roundeven dc75f4c @wrv\r\n- relaxed-simd: initial support for the WASM relaxed SIMD proposal 083bd2f 3e5515a bf136e7 48954b6 9715924 @nemequ\r\n- clang wasm: add workaround to fix wasm_i64x2_shl bug 256d9df @Changqing-JING\r\n- simd128: clang 13 fixed bugs affecting simde_wasm_{v128_load8_lane,i64x2_load32x2} 7bc774f @mr-c\r\n- wasm simd128: correct trunc_sat _FAST_CONVERSION_RANGE target type e861f2c @mr-c\r\n- simd128 extract_lane: set unreachable value as float to appease msvc 0964774 @mr-c\r\n- simd128: Test some operations more strictly 9ca1f6d @keithw\r\n- simd128: move unary minus to appease msvc native arm64 86677d9 @mr-c\r\n- Wasm q14mulr_sat_s: match Wasm spec 366e6d5 @keithw                             \r\n- Wasm f32/f64 nearest: match Wasm spec da0c8af @keithw                           \r\n- Wasm f32/f64 floor/ceil/trunc/sqrt: match Wasm spec af1ad7c @keithw             \r\n- Wasm f32/f64 abs: match Wasm spec b4ecb3c @keithw                               \r\n- Wasm f32/f64 max: match Wasm spec a0e27b9 @keithw                               \r\n- Wasm f32/f64 min: match Wasm spec 8091bbb @keithw\r\n\r\n## x86 intrinsics\r\n- Fix native aliases for amd64-only functions f0e9755 @nemequ\r\n- Add @aqrit's SSE2 min/max implementations d90e835 @nemeq\r\n- x86: fix AVX native → SSE4.2 native f6fc25a @mr-c\r\n- x86: ignore warnings about inefficient functions on lcc 416c243 @makise-homura\r\n- The fix for GCC bug #95483 wasn't in a release until 11.2 11d95f8 @nemequ\r\n- fix array size wrong size (caught by GCC 12) c6179cb @Lithrein\r\n- clmul: _mm512_clmulepi64_epi128 implicitly requires AVX512F 10a2f28 @mr-c\r\n\r\n### SSE*\r\n- sse: avoid including windows.h when possible 750f20d @boris-kuz\r\n- sse: don't use armv7 impl of _MM_TRANSPOSE4_PS on armv8 b5fb757 @nemequ\r\n- sse, mmx: fix clang-11 on POWER a0e9f9f @nemequ\r\n- sse: prefer SIMDE_SHUFFLE_VECTOR implementation of _mm_shuffle_ps 377e350 @nemequ\r\n- sse: replace `_mm_prefetch` implementation 26d515f @nemequ\r\n- sse: use portable implementation to work around llvm bug #344589 79738de @nemequ\r\n- sse: Suppress min/max macro definitions from windows.h 3465b57 @quyykk\r\n- sse: Fixed simde_mm_prefetch warnings 9c3d0dc @Epixu\r\n- sse: remove errant MMX requirement from simde_mm_movemask_ps 61b9341 @mr-c\r\n- sse, sse2: clean up several shuffle macros cc6dc18 @nemequ\r\n- sse, sse2: fix vec_cpsign order test 1465c48 @nemequ\r\n- sse, sse2: sync clang-12 changes for vec_cpsgn 1ba1596 @simba611\r\n- sse, sse2: work around GCC bug #100927 80472b7 @nemequ\r\n- sse: remove unbalanced HEDLEY_DIAGNOSTIC_PUSH 0c26988 @mr-c\r\n- sse: Add LoongArch LSX support 31367e2 @XiWeiGu\r\n- sse{2,} tests: use INT32_MIN to appease MSVC 3ad047b @mr-c\r\n- sse2: add fast-math WASM implementation of _mm_cvtps_epi32 24c503f @nemequ\r\n- sse2: add parenthesis around macro arguments b394520 @nemequ\r\n- sse2: correct typos in simde_x_mm_broadcastlow_pd f8ce9bb @rosbif\r\n- sse2: don't require constants for _mm_srai_epi{16,32} 8bee92a @????\r\n- sse2: fix incompatible argument in A32 impl. of `_mm_cvtps_epi32` b5fbe39 @jpcima\r\n- sse2: fix set but not used variable in _mm_cvtps_epi32 f460666 @nemequ\r\n- sse2: ignore broken `_mm_loadu_si{16,32}` on GCC 4b7394f @nemequ\r\n- sse2: prefer shuffle implementation of _mm_shuffle_epi32 to NEON d2ce706 @nemequ\r\n- sse2: remove AArch64 implementation of _mm_movemask_epi8 c595f6b @nemequ\r\n- sse2: remove statement expr requirement for NEON srli/srai macros da4d24f @nemequ\r\n- sse2, sse4.1: pull in improved packs/packus implementations from WASM 7b1df61 @nemequ\r\n- sse2: use simde_math_{add,sub}s_* for _mm_{add,sub}s_* functions 09d725d @nemequ\r\n- sse2: vcvtnq_s32_f32 is armv8-specific 98075d0 @nemequ\r\n- sse2: workaround missing `vcvtnq_s32_f32` on GCC e11258e @jpcima\r\n- sse2: Fixed parameters to _mm_clflush d46f0e7 @thomasdwu\r\n- sse2 gcc: bug 99754 was fixed in GCC 12.1 6453f55 @mr-c\r\n- sse2: msvc arm64: disable false-positive warnings a5a0a9a @mr-c\r\n- sse2/avx: move some native aliases around to satisfy MSVC 2017 /ARCH:AVX512 da2988e @mr-c\r\n- ssse3: Add SSE2 integer abs implementation 2de8624 @aqrit\r\n- sse4.1 `_mm_insert_ps`: incorrect handling of the control 94e7569 @MirJawadMairaj\r\n- sse4.1: add some casts to make clang -Weverything happy 5f000af @nemequ\r\n- sse4.1: fix AArch64 implementation of simde_x_mm_blendv_epi64 978d1f7 @milot-mirdita\r\n- sse4.1: _mm_blendv_epi8: add sse2 and update wasm_simd128 implementions 2dbc124 @aqrit\r\n- sse4.1: remove statement expr dependency in blend functions 01fb894 @nemequ\r\n- sse4.1: replace NEON implementations with shuffle-based implementations 29a3cb4 @nemequ\r\n- sse4.1: use NEON types instead of vector in insert implementations 489e36c @nemequ\r\n- sse4.2: re-enable native `_mm_cmpgt_epi64` 7117c48 @aqrit\r\n- sse4.2: work around more warnings on old clang 3f186a0 @nemequ\r\n- sse4.1: fix A32V7 version of `_mm_test{nz,}c_si128` e7c70a2 @mr-c\r\n\r\n### AVX\r\n- avx: work around missing `_mm256_{load,store}u_m128{,i,d}` on LCC a3a39e2 @nemequ\r\n- avx: try to detect prior inclusion of AVX header and handle it e8b7a2e @nemequ\r\n- avx, avx512/cmp: properly handle NaN in `_mm{,256,512}_cmp_{ps,pd,ss,sd}` 491d3fa @nemequ\r\n- avx: use internal symbols in clang fallbacks for cmp_ps/pd functions 35b86b7 @nemequ\r\n- avx: work around incorrect maskload/store definitions on clang < 3.8 a9313de @nemequ\r\n- avx: add native calls for `_mm256_insertf128_{pd,ps,si256}` bab30bb @LaurentThomas\r\n- avx: add test for simde_mm256_permute2f128{_pd,_si256} 04a0497 @mr-c\r\n- avx{,2}: fix maskload illegal mem access 39f723e @k-dominik\r\n- avx{,2}: use SIMDE_FLOAT{32,64}_C to fix warnings from msvc 698bc2e @mr-c\r\n- avx{,2}: some intrinsics are missing from older MSVC versions bb274b8 @mr-c\r\n\r\n### AVX2\r\n- avx2: add vector/shuffle implementation of `_mm256_madd_epi16` 2c2dd73 @nemequ\r\n- avx2: fix undefs for many native aliases 2ca5480 @anrodrig\r\n- avx2: added vector size conditional for unpack 287bda9 @simba611\r\n- avx2: separate natural vector length for float, int, and double types 6d1896d @nemequ\r\n\r\n### AVX512\r\n- avx512/{knot,kxor,cmp,cmpeq,compress,cvt,loadu,shuffle,storeu} Additional AVX512{F,BW,VBMI2,VL} ops 1f8d1d2 @mr-c\r\n- avx512: work around several bugs in older versions of clang e64231e @nemequ\r\n- avx512: add several new functions ccc0757 @anrodrig b3535c3 @nemequ\r\n- avx512: implement mm*_mask(z)_compress(storeu)_* dab908e @simba611\r\n- avx512: implement mm_mask(z)_unpack* funcs 7aa3155 @simba611\r\n- avx512: initial implementation f35090a @simba611\r\n- avx512/4dpwssd: implement complete function family 5bbf50f @simba611\r\n- avx512/4dpwssds: initial implementation 22b8b97 @simba611\r\n- avx512/abs: add SSE2 implementation of `_mm_abs_epi64` 5c2f423 @aqrit\r\n- avx512/abs: work around buggy pd functions in GCC 7 - 8.2 605c92a @anrodrig\r\n- avx512/bitshuffle: initial implementation c92a13b @simba611\r\n- avx512/cmpeq: implement `_mm512_mask_cmpeq_epi8_mask` 88d2faf @nemequ\r\n- avx512/cmpge: finish implementing all functions 9a4d0de 0b5de15 @nemequ\r\n- avx512/cmp{g,l}e: AVX-512 implementations of non-mask functions ca1812d @nemequ\r\n- avx512/cmple: finish implementations of all cmple functions 06aa828 @nemequ\r\n- avx512/cmpneq: initial implementation of 128-bit and 256-bit functions 34194f2 @nemequ\r\n- avx512/compress: implement `_mm256_mask_compress_pd` d1223d4 @simba611\r\n- avx512:compress: implement `_mm256_mask(z)_compress(storeu)_p*` a7386b5 @simba611\r\n- avx512/compress: Mitigate poor compressstore performance on AMD Zen 4 54563e4 @mr-c\r\n- avx512/conflict: implement missing functions b6887ce c8f2755 @simba611\r\n- avx512/cvt: add `_mm512_cvtepu32_ps` `_mm{_mask,_maskz}_cvtepi64_pd 292e1e2 @nemequ\r\n- avx512/cvtt: add `_mm{_mask,_maskz}_cvttpd_epi64` d2f518a e842f29 @nemequ\r\n- avx512/dbsad: initial implementation d659f42 0c76c5e @simba611\r\n- avx512/dpbf16: initial implementation 18b4e74 0ec8d72 @simba611\r\n- avx512/dpbusd: initial implementation 913a0a4 ff0d35a @simba611\r\n- avx512/dpbusds: complete function family 34f2488 @simba611\r\n- avx512/dpwssd: initial implementation 973df0e @simba611\r\n- avx512/dpwssds: initial implementation fe93582 @simba611\r\n- avx512/fixupimm: initial implementation 441339e @simba611\r\n- avx512/fmsub: implement `_fmsub_` functions for AXV512VL b7df811 @simba611\r\n- avx512/insert: implement inserti{,_mask,_maskz}_{32x8,64x2} mm512{_mask,_maskz}_insert{f32x8,64x2} 2c8b052 @simba611 8e306d1 @simba611 0ba2085 @nemequ\r\n- axv512/insert: unroll SIMDE_CONSTIFY for testing macro implemented functions f09c61c @mr-c\r\n- avx512/knot,kxor: native calls not availabe on MSVC 2017 9a95e7c @mr-c\r\n- avx512/loadu: _mm{,256}_loadu_epi{8,16,32,64} skip native impl on MSVC < 2019 aa20919 @mr-c\r\n- avx512/load_pd: initial implementation 8445684 @operasfantom\r\n- avx512/load_ps: initial implementation d588049 @operasfantom\r\n- avx512/madd: explicitly promote 16-bit elements to 32-bit e5dd146 @nemequ\r\n- avx512/madd: fix arguments for native aliases ae545ce @nemequ\r\n- avx512/mullo: implement mm512_mullo_epi64 with mask(z) 8545d26 @8545d26\r\n- avx512/multishift: initial implementation 6b125ec @simba611\r\n- avx512/or, avx512/xor: regenerate tests using 32-bit ints instead of 64 e1de51d @nemequ\r\n- avx512/or: implement mm512_mask(z)_or_ps/d functions 6cda738 b7933e6 @simba611\r\n- avx512/permutex2var: hard-code types in casts instead of using typeof 8893116 @nemequ\r\n- avx512/permutex2var: work around incorrect definition on old clang 647279d @nemequ\r\n- avx512/popcnt: initial implementation d5ec32a b17b646 @simba611\r\n- avx512/range: initial implementation mm512_range_ps/d functions d59e3f5 37ab069 8bf0305  @simba611 8bc81ca 8ccb363 6b8d8b8 b8e63b4 @nemequ\r\n- avx512/range_rounnd,round: move range_round functions out of round d382488 @simba611\r\n- avx512/rol: implement remaining functions 9a52011 @simba611\r\n- avx512/rol,ror: more tests within useful range of imm8 088f810 @mr-c\r\n- avx512/rolv: initial implementation a2e7632 b1745c5 1fa7764 @simba611\r\n- avx512/round, avx512/roundscale: add shorter vector fallbacks b542b01 @simba611\r\n- avx512/roundscale: initial implementation e47e703 6ddf1a2 98e6a60 @simba611\r\n- avx512/roundscale{,_round}: skip many mm{,_mask,_maskz}_roundscale_round_{ss,sd} testing on MSVC + NATIVE_AVX 3369366 @mr-c\r\n- avx512/roundscale_round: implement remaining functions db7a52a @simba611\r\n- avx512/roundscale_round: quiet a false positive MSVC warning 3a6dcf7 @mr-c\r\n- avx512/scalef: initial implementation 581bf31 482bf32 @simba611 22be4e8f60c159 @nemequ\r\n- avx512/set, avx512/popcnt: use `_mm512_set_epi8` only when available aa5746f @nemequ\r\n- avx512/setzero: fix native aliases c900d5e @EleonoreMizo\r\n- avx512/shldv: initial implementation cddc500 @simba611 9b08cfc @nemequ\r\n- avx512/ternarylogic: initial implementation 30eb81e @nemequ 7faedd6 @simba611\r\n- avx512/unpack{hi,lo}: implement mask variants of unpacklo b2c176f @simba611\r\n- avx512/unpack{hi,lo}: implement mm256_mask(z)_unpack* functions ca8c102 @simba611\r\n- avx512/unpacklo: added vector size conditional 3924339 @simba611\r\n- avx512/unpacklo: implement mask variants of unpacklo 0c4775e @simba611\r\n- avx512/unpacklo: implement mm512_unpacklo_* functions 8582277 @simba611\r\n- avx512/xor: implement mm512_mask(z)_xor_pd/s functions 854f913 @simba611\r\n- Properly map `__mm` functions to `__simde_mm` 96c963f @psaab\r\n- simde/scalef: add scalef_ss/sd d9898e5 @simba611\r\n- gcc i686 mm*_dpbf16_ps: skip vector ops due to rounding error b721e9d @mr-c \r\n- axv512: add simde_mm512_{cvtepi32_ps,extractf32x8_ps,_cmpgt_epi16_mask} bf1fbae @mr-c\r\n- avx512: define __mask64 & __mask32 if not yet defined d850b83 @mr-c \r\n\r\n### GFNI \r\n- gfni: improve ARM NEON implementation a99a3ec @rosbif\r\n- gfni: add ARM, PPC and WASM implementations of *gf2p8mul* intrinsics 61126b3 @rosbif\r\n- gfni: add cast to work around -Wimplicit-int-conversion warning d066a1c @nemequ\r\n- gfni: remove unintentional dependency on vector extensions bdfa828 @nemequ\r\n- gfni: work around clang bug #50932 7d4beba @nemequ\r\n- gfni: work around error with vec_bperm on clang-10 on POWER 8620bd0 @nemequ\r\n- gfni: replace vec_and and vec_xor with & and ^ on z/arch f5577dc @nemequ\r\n- gfni: add many x86, ARM, z/Arch, PPC and WASM implementations 97eb961 @rosbif\r\n\r\n### XOP\r\n- xop: fix NEON implementation of maccs functions to use NEON types 6ecc0e3 @nemequ\r\n\r\n### F16C\r\n- f16c: initial implementation 62c1087 @nemequ\r\n- f16c: use `__ARM_FEATURE_FP16_VECTOR_ARITHMETIC` to detect Arm support eaeac09 @nemequ\r\n- msvc 2022: enable F16C if AVX2 present a66cbb0 @mr-c\r\n- f16c: rounding not yet implemented for simde_mm{256,}_cvtps_ph 5d2b53d @mr-c\r\n\r\n### FMA\r\n- fma: work around broken implementations of some functions on MCST LCC 269db2a @makise-homura\r\n- fma: add mls-based NEON implementations of fnmadd functions 55416aa @nemequ\r\n- fma: drop weird high-priority implementation in `_mm_fmadd_ps` 20922ff @nemequ\r\n- fma: use fma/fms instead of mla/mls on NEON 2fe84e5 @nemequ\r\n- fma: use NEON types in simde_mm_fnmadd_ps NEON implementation 44d38bd @nemequ\r\n- fma: fix return value of simde_mm_fnmadd_ps on NEON 87198d9 @nemequ\r\n- Fixed FMA detection macro on msvc 286ba3d @dhbloo\r\n\r\n### SVML\r\n- svml: trivial indentation fix 2176652 @nemequ\r\n- svml: remove some dead stores from cdfnorminv 11d97ba @nemequ\r\n- svml: simde_mm256_{clog,csqrt}_ps native reqs AVX not SSE 7d16fa6 @mr-c\r\n\r\n## MIPS MSA intrinics\r\n- Begin working on implementing MIPS MSA. e9c002a @nemequ\r\n- msa/add_a: initial implementation 6b37bb3 @nemequ\r\n- msa/addvi: initial implementation 8711327 @nemequ\r\n- msa/subv: initial implementation 75b3b73 @nemequ\r\n- msa/andi: initial implementation 31b7ce7 @nemequ\r\n- msa/and: initial implementation 6635520 @nemequ\r\n- msa/adds: initial implementation c37559c @nemequ\r\n- msa/adds_a: initial implementation bb84c44 @nemequ\r\n- msa/madd: initial implementation 1b89ab3 @nemequ\r\n- Many work-arounds for GCC with MSA, and support in the docker image. e5dbb93 @nemequ\r\n\r\n## Arch support\r\n- various: correct PPC and z/Arch versions plus typo ac8d722 @rosbif\r\n- arch: __ARM_ARCH now (v8.1+) encodes the minor version b0b22d1 @nemequ\r\n- arch: set SIMDE_ARCH_ARM for AArch64 on MSVC 1d8befc @nemequ\r\n- arch: Add LoongArch LASX/LSX support d0cc0ab @XiWeiGu\r\n\r\n### arm64\r\n- arm64 windows: fix simd128.h build error dad8cad @Changqing-JING\r\n- mips/msa: fix for Windows ARM64 0f988c9 @Changqing-JIN\r\n- arm/neon: workaround on ARM64 windows bug b54dfcb @Changqing-JING\r\n\r\n### z/Arch\r\n- Correctly detect and handle z/Arch and its vector extensions 4a3f466 @nemequ\r\n- Fix z/Arch without zvector. b8af226 @nemequ\r\n- sse, sse2: add several z/Arch implementations 4f628ac @nemequ\r\n- sse2, sse4.1: additional z/Arch implementations for ksw2 ee24439 @milot-mirdita\r\n- Many additional z/Architecture implementations of x86 functions 5a2b035 @nemequ\r\n- se2, sse4.1: additional z/Arch implementations for ksw2 ee24439 @milot-mirdita\r\n- sse4.1, neon/bsl: v/Arch implementations of blendv/bsl functions 80a8484 @nemequ\r\n- z/Architecture implementations for remaining min/max functions 694d547 @nemequ\r\n- neon/cvt: z/Arch implementations 107fab8 @nemequ\r\n- sse, sse4.1: z/Arch implementations of some rounding functions 9fb1509 @nemequ\r\n- sse, sse2, neon/dup_n: lots of z/Arch splat-based implementations 874d51f @nemequ\r\n- gfni: add z/Arch version c12f111 @rosbif\r\n- x86,arm/neon: Correct z/Arch versions 50fba9b @rosbif\r\n- features: add z/arch to SIMDE_NATURAL_VECTOR_SIZE d41999b @nemequ\r\n- arm/neon/qdmulh s390 gcc-12: `__builtin_shufflevector` is misbehaving 23a2441 @mr-c\r\n\r\n### Altivec\r\n- sse, sse2: generate to/from altivec functions for SSE/SSE2 types. dd3ff53 @nemequ\r\n- docker: power9-clang ignore deprecated-altivec-src-compat warnings b70f1a2 @mr-c\r\n- sse4.1: PPC AltiVec has no vec_splat_s64 debbf73 @rosbif\r\n- arch: fix SIMDE_ARCH_POWER_ALTIVEC_CHECK to include AltiVec check 8534e64 @nemequ\r\n- simd128: add AltiVec implementations of any/all_true a3b2630 @nemequ\r\n\r\n### e2k (Elbrus)\r\n- e2k: Introduce E2K (Elbrus) architecture 093b2c5 @makise-homura\r\n- e2k, ppc: Make shifts unsigned 24ddeba @makise-homura\r\n\r\n### Power\r\n- gcc power: bugs 1007[012] fixed in GCC 12.1 c23208d @mr-c\r\n- gcc power: vec_cpsgn argument reversal fixed in 12.0 296362c @mr-c\r\n\r\n## Testing with Docker/Podman & CI\r\n- CI: meson newer than 0.56 skips tests d08cb7b @mr-c\r\n- download-sde: be more tolerant of changes on Intel's web site 87bb927 @nemequ\r\n- meson: require meson version 0.54 349da2b @makise-homura\r\n- testing: Require exact matches for abs functions 9085d94 @jpcima\r\n- test: replace 1e-##precision with to_slop functions 9adcc21 @nemequ\r\n- test: allow passing INT_MAX for precision for exact comparisons e903b7f @nemequ\r\n- codecov: ignore test/ directory 65e7903 @nemequ\r\n- cmake: generate most declare-suites.h files 5d62f0d @nemequ\r\n- tests: update download-iig.sh to account for Intel changes 2fdc9a5 @nemequ\r\n- test: fix download script for SDE b3b4975 @nemequ\r\n- update SDE download link 24338a2 @mr-c\r\n- meson docs: don't use deprecated syntax 1a1a6eb @mr-c\r\n- SDE: add -future flag to support all x86 features caa3c6d @wrv\r\n- check-flags.sh: add lock around installing SDE 373e1e3 @nemequ\r\n- download-iig: tweak script to fix download location 082a875 @nemequ\r\n- sde: don't print URL in download-sde script. 55fc0e2 @nemequ\r\n- Default to -DSIMDE_CONSTRAINED_COMPILATION when building tests 3d14f8e @nemequ\r\n- test.h: test binary equivalence of f32/f64 when slop is zero 221f3b3 @keithw\r\n\r\n### [Appveyor](https://ci.appveyor.com/project/nemequ/simde/history)\r\n- appveyor: use ccache 56b2ff2 @mr-c\r\n- appveyor: build & test with MSVC 2022 94b6983 @mr-c\r\n- appveyor: report ccache stats and increase compression 9232671 @mr-c\r\n- appveyor: add /Z7 flag to improve ccache bb63806 @mr-c          \r\n- appveyor: turn all warnings into errors b207819 @mr-c\r\n- appveyor: build tests with AVX{,2}, but don't run them bcd9589 @mr-c\r\n- appveyor: test MSVC with ARCH512 64d7434 @mr-c \r\n- appveyor: return to normal cache compression 0c3dfa4 @mr-c\r\n\r\n### [Azure](https://dev.azure.com/simd-everywhere/SIMDe/_build?definitionId=3)\r\n- Azure: publish test results 51c24d8 @mr-c\r\n- Azure: Use Ubuntu-20.04 instead of \"-latest\" 1cf39df @mr-c\r\n- Azure CI: user newer clang for check 3b663fe @mr-c\r\n\r\n### [Circle CI](https://app.circleci.com/pipelines/github/simd-everywhere/simde)\r\n- circle-ci: fix longsoon build 3db6d7a @mr-c\r\n- circle-ci: ccache for non-native builds ee79d7d @mr-c\r\n- circle-ci: i686 was actually compiling for x86_64 :-( 7670e63 @mr-c\r\n- circle-ci: test i686 with gcc-11 -O2 0a69604 @mr-c\r\n- circle-ci: modernize build, especially for i686 & loongson 22b73ba @mr-c\r\n- circle-ci: i686 gcc, only gcc-11 + O2 for now 7e70d02 @mr-c\r\n- circle-ci & cirrus: pipx instead of pip for meson 3211797 @mr-c\r\n\r\n### [Cirrus CI](https://cirrus-ci.com/github/simd-everywhere/simde)\r\n- cirrus: add -Db_lundef=false to sanitizer buld 5a0fc02 @nemequ\r\n\r\n### [Local testing with Docker/Podman](https://github.com/simd-everywhere/simde/tree/master/docker#readme)\r\n- docker: add -march=z14 -mzvector to s390x-gcc-10 build. 8f60406 @nemeq\r\n- docker: use z13 instead of z14 for s390x architecture a524be2 @nemequ\r\n- docker: install meson from pip df63f88 @nemequ\r\n- docker: use meson 0.55.0 instead of 0.54.0. 5112bf2 @nemequ\r\n- docker: add platform dependent fixes for docker 3dd58b9 @Glitch18\r\n- docker: fix script exiting bug 6770ec0 @Glitch18\r\n- docker: only rebuild image if older than a week d9b1322 @nemequ\r\n- docker: fix build when the image doesn't exist yet ab3b509 @nemequ\r\n- docker: skip date check when building image for the first time a1c4728 @Glitch18\r\n- docker: allow overriding the BUILD_IMAGE setting ca6f690 @nemequ\r\n- docker: Add a prompt before rebuilding image c2cff9f @Glitch18\r\n- docker: Fix BUILD_IMAGE always being set to 'y' 368a777 @Glitch18\r\n- docker: use -O2 instead of -O3 on emscripten 3173499 @nemequ\r\n- docker: fix quoting error 830981b @mr-c\r\n- docker: aarch64-clang ; match drone.io flags bbe4416 @mr-c\r\n- docker: skip mips64el from cross-building d3f5fae @mr-c\r\n- docker: tighten libstdc++NN-dev package selection c44539c @mr-c\r\n- docker: pass -future flag to sde for i686-all-gcc-9 d8658ea @mr-c\r\n- docker: icc, disable depracation notice 505f24a @mr-c\r\n- docker: add Intel ICX testing 4a4eeb6 @mr-c\r\n- docker: add more cross building profiles for modern compilers 89e2c5b @mr-c\r\n- docker: qemu package doesn't exist & is unneeded 9ec8375 @mr-c\r\n- docker: enable use of ccache 4d42b90 @mr-c\r\n- docker: icx ignore no-tautological-constant-compare warning 97315b8 @mr-c\r\n- docker: add test with Debian default flags, also for armel 0a44b50 @mr-c\r\n- docker: sde tigerlake allows for advanced AVX512 testing 54b5d4e @mr-c\r\n- docker: apt-get update before each other apt command 5560ca0 @nemequ\r\n- docker: add a bunch of cross files b718597 @nemequ\r\n- docker: Dockerfile, Use netselect-apt to speed up image build e98cf70 @Glitch18\r\n- docker emscripten: remove experimental wasm flag for v8 496d88d @wrv\r\n- docker: use qemu-*-static's elf interpreter prefix to simplify 1921112 @mr-c\r\n- docker: power: meson cpu_family is just powerpc64 0643db3 @mr-c\r\n- docker i686: cap at prescott, not =native e12eab6 @mr-c\r\n- docker: ppc64el, riscv64, s390x cross compiling 3fa1d18 @mr-c\r\n- docker emscripten: fix v8 path, install ccache 8537dd9 @mr-c\r\n\r\n### [Drone.io](https://cloud.drone.io/simd-everywhere/simde)\r\nCurrently non-functional. Jobs queue, but are eventually killed before they start running.  Assistance fixing that is welcome!\r\n- drone: read testlog.txt if tests fail eb71d89 @nemequ\r\n- drone: configure apt to retry failed downloads 1c442b4 @nemequ\r\n\r\n### [GitHub Actions](https://github.com/simd-everywhere/simde/actions)\r\n- gh-actions: add some bionic-era GCC builds ccdd24b @nemequ\r\n- gh-actions: add several clang builds e4b4646 @nemequ\r\n- gh-actions: add some bionic-era GCC builds. ccdd24b @nemequ\r\n- gh-actions: temporarily disable emscripten build 71ea291 @nemequ\r\n- codeql: analyze the merge commit d3a40e1 @mr-c\r\n- gh-actions: automatically detect whether to use SDE bb69b54 @nemequ\r\n- gh-actions: disable clang-3.9 build 7fcb64d @nemequ\r\n- gh-actions: use ctest to run CMake tests so we can output on failure 03f6ebe @nemequ\r\n- gh-actions: try commit message witohut quotes on implementation-status 3f81cac @nemequ\r\n- gh-actions: add action to update the implementation-status repo 333f077 @nemequ\r\n- gh-actions: use -O2 instead of -O3 on emscripten 636f145 @nemequ\r\n- gh actions: Add Windows ARM64 CI f12fd00 @tommyvct\r\n- gh-actions: only run mSVC Arm checks on msvc-arm branch 3d8a516 @nemequ\r\n- gh-actions: switch emscripten build to Meson bde2cb1 @nemequ\r\n- gh-actions: ubuntu-16.04 has been retired, migrate to ubuntu-18.04 6d0c65c @mr-c\r\n- gh-actions: pin to macos-10.15 instead of -latest d64de8c @mr-c\r\n- ga-actions: trim flags for icx/icpc 201dcdb @mr-c\r\n- gh-actions, circleci: debian testing gcc: -Wno-error=stringop-overread af24d0c @mr-c\r\n- gh-actions, docker: turn off emscripten's -Wunsafe-buffer-usage for the tests 3caf71d @mr-c\r\n- gh-actions: test using Intel® oneAPI DPC++/C++ Compiler instead of ICC df144ff @mr-c\r\n- gh-actions: Ubuntu 22.04 + system meson dd0b662 @mr-c\r\n- gh-actions: Update codecov to v3 for Node 16 support bd7f8df @wrv\r\n- gh-actions: Update macos build to 11 c30a29b @wrv\r\n- gh-actions: Comment out Ubuntu 18.04 build as will be unsupported in April 2023 6cefe47 @wrv\r\n- gh-actions: Update to actions/checkout@v3 to avoid Node 12 warning 511b5b7 @wrv\r\n- gh-actions: add -fp-model precise for icx/icpx 7ec32ff @wrv\r\n- gh-actions: update OSSAR action versions a1a63ac @wrv\r\n- gh-actions: cancel workflows if there is a newer commit 8c56459 @mr-c\r\n- gh-actions: test with gcc-12 f6db95d @mr-c\r\n- gh-actions: remove GCC 4.7 build 3997b8f @nemequ\r\n- gh-actions: add action to push to the simde-no-tests repository 1b4647f @milot-mirdita\r\n- gh-actions: move push-to-no-tests.yml into the right directory. 7fbb9c9 @nemequ\r\n- gh-actions: give up on getting commit ID in message for status repo 05ecb5d @nemequ\r\n- gh-actions: add missing jobs property ddd453a @nemequ\r\n- gh-actions, docker: add -fno-lax-vector-conversions to clang flags ccdfca9 @nemequ\r\n- gh-actions: add -ffast-math builds for GCC and clang de616e7 @nemequ\r\n- gh-actions: resume testing on aarch64 4d1639a @mr-c\r\n- gh-actions: cross-build & test powepc64le, s390x (later) f0f3d09 @mr-c\r\n- gh-actions: sleef: no ccache due to -march=native c709922 @mr-c\r\n- gh-actions: use ccache to speed up builds 73dddb7 @mr-c\r\n- gh-actions: clang 1[45]; gcc 12 on riscv64 with qemu e5c02d4 @mr-c\r\n- gh-actions: Resume running the mscv arm tests on all branches 782d816 @mr-c\r\n- gh-actions: Emscripten: temporarily only run \"native\" tests 1b6bde7 @mr-c\r\n- gh-actions: actionlint/shellcheck inspired cleanups 8182065 @mr-c\r\n- gh-actions qemu: resuming build+test on s390x cb6a0da @mr-c\r\n- gh-actions: drop cmake for meson. 9d69cff @mr-c\r\n\r\n### Travis\r\nCurrenttly non-functional, partially replaced by the s390x quemu GitHub Action build.\r\nSee https://github.com/simd-everywhere/simde/issues/903 for the status of POWER9 (ppc64le)\r\n- travis:  use -march=native and GCC on s390x 5b9b2af @nemequ\r\n- travis power9: try using all the cores to speed up b91516f @mr-c\r\n- travis: remove Travis completely 17a27e7 @nemequ\r\n- travis: bring back some Travis builds 0ec9926 @nemequ\r\n\r\n### [Netlify](https://app.netlify.com/sites/simde/)\r\n[Currently broken](https://github.com/simd-everywhere/simde/issues/1005)\r\n- netlify: build amalgamated SVE header 41898ab @nemequ\r\n- netlify: deploy wasm/simd128.h aa29a8b @nemequ\r\n\r\n### [Semaphore CI](https://nemequ.semaphoreci.com/projects/simde)\r\nCurrently failing for old GCC-5\r\n- semaphore CI: fix test execution by using mason 1b05684 @mr-c\r\n\r\n## Misc\r\n- Improve abs function performance on SSE/SSE2 093f6ee @jpcima\r\n- Upgrade Hedley to v15 0d070e1 @nemequ\r\n- detect-clang: fix version numbers for clang < 4.0 8a2c645 @nemequ\r\n- align: add MCST LCC to compilers known to support `__alignof__` 38e3840 @nemequ\r\n- common: add an MCST LCC check for vector features. e38fe50 @nemequ\r\n- complex: fix checks for GCC C complex math support ad8c7e0 @nemequ\r\n- Fix SIMDe link in no-tests README 21f7a2a @maxbachmann\r\n- common: enable OpenMP by default on LCC ff34d1b @nemequ\r\n- README: more thoroughly document OpenMP support 46c65e1 @nemequ\r\n- Add some files to .gitignore 8381a57 @nemequ\r\n- check-flags.sh: move download location from ~ to /opt/intel a361527 @nemequ\r\n- simde-features: fix C&P error 00fd88d @rosbif\r\n- {neon,simd128,avx512/abs}: provide vector versions of i64 abs d3976e0 @nemequ\r\n- common: improve check for C11 generic selections 11d2a6d @nemequ\r\n- common: don't use aligned OpenMP clause on MCST LCC a9a5a0d @nemequ\r\n- math: use simde_math_-prefixed abs/labs/llabs 813f4f0 @nemequ\r\n- diagnostic: silence -Wreserved-identifier warning from LLVM 0b6f5b2 @nemequ\r\n- Fix compilation with clang on POWER 5c43ac0 @nemequ\r\n- Work around issues preventing compilation on NVCC 3815c04 @nemequ\r\n- Don't set SIMDE_NO_CHECK_IMMEDIATE_CONSTANT in tests. 0c9fe4c @nemequ\r\n- common: move conversion functions for u32 <-> f32 into common 37e187c @nemequ\r\n- Add SIMDE_FAST_EXCEPTIONS option d01d58e @nemequ\r\n- Use SIMDE_HUGE_FUNCTION_ATTRIBUTES on several functions. 552c202 @nemequ\r\n- Add -s ENVIRONMENT=shell to emscripten flags 69d7655 @nemequ\r\n- Fix an assortment of small bugs 8b5d68c @simba611\r\n- Remove all `&& 0`s in preprocessor macros. b6f21a9 @nemequ\r\n- Add constrained compilation mode a992f5b @simba611\r\n- Fix gcc-10 compilation on s/390x a10f12e @nemequ\r\n- simde-diagnostic: Include simde-arch 61cd8aa @Glitch18\r\n- Add many fast floating point to integer conversion functions 1fbe712 @nemequ\r\n- common: Use AArch64 intrinsics if _M_ARM64EC is defined 2a9e7b7 @tommyvct\r\n- Add -Wdeclaration-after-statement to the list of ignored warnings. bba815d @nemequ\r\n- Work around compound literal warning with clang 90523a2 @dgazzoni\r\n- Various fixes for -fno-lax-vector-conversions 39d902e @nemequ\r\n- Fix warnings with -fno-lax-vector-conversions e5ff228 @ngzhian\r\n- Improve widening pairwise addition implementations 3b950bb @nemequ\r\n- Wrap static assertions in code to disable -Wreserved-identifier d1fc7b5 @nemequ\r\n- Add missing `static const` in simde-math.h. NFC 6bd6562 @sbc100\r\n- wasm128, sse2: disable -Wvector-conversion when calling vgetq_lane_s64 679b970 @nemequ\r\n- test: skip NAN producing (sub-)tests for -ffast-math eb99f7c @mr-c\r\n- README: add CodeCov.io badge; freshen chat link 1c48030 @mr-c\r\n- emscripten; don't use `__builtin_roundeven{f,}` even if defined 51b9941 @mr-c\r\n- `__builtin_signbit`: add cast to double for old Clang versions 160c161 @mr-c \r\n\r\n## New Contributors\r\n* @Glitch18 made their first contribution in https://github.com/simd-everywhere/simde/pull/843\r\n* @ngzhian made their first contribution in https://github.com/simd-everywhere/simde/pull/899\r\n* @keithw made their first contribution in https://github.com/simd-everywhere/simde/pull/1009\r\n\r\n**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.7.2...v0.7.4","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/101962455/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":2,"eyes":0},"mentions_count":34},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/101364803","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/101364803/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/101364803/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.4-rc3","id":101364803,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4GCrRD","tag_name":"v0.7.4-rc3","target_commitish":"master","name":"v0.7.4-rc3","draft":false,"immutable":false,"prerelease":true,"created_at":"2023-04-28T23:18:48Z","updated_at":"2023-04-29T07:33:45Z","published_at":"2023-04-29T07:33:45Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.4-rc3","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.4-rc3","body":"**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.7.4-rc2...v0.7.4-rc3"},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/100015850","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/100015850/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/100015850/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.4-rc2","id":100015850,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4F9h7q","tag_name":"v0.7.4-rc2","target_commitish":"master","name":"v0.7.4-rc2","draft":false,"immutable":false,"prerelease":true,"created_at":"2023-02-12T10:53:16Z","updated_at":"2023-04-19T08:10:56Z","published_at":"2023-04-19T08:10:56Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.4-rc2","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.4-rc2","body":"**Full Changelog**: https://github.com/simd-everywhere/simde/compare/v0.7.4-rc1...v0.7.4-rc2"},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/91170621","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/91170621/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/91170621/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.4-rc1","id":91170621,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"RE_kwDOBSfaCM4Fbyc9","tag_name":"v0.7.4-rc1","target_commitish":"master","name":"SIMDe 0.7.4-RC1","draft":false,"immutable":false,"prerelease":true,"created_at":"2023-02-02T18:03:13Z","updated_at":"2023-02-02T18:07:13Z","published_at":"2023-02-02T18:07:13Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.4-rc1","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.4-rc1","body":"","reactions":{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/91170621/reactions","total_count":6,"+1":4,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0}},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/36828458","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/36828458/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/36828458/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.2","id":36828458,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM2ODI4NDU4","tag_name":"v0.7.2","target_commitish":"master","name":"SIMDe 0.7.2","draft":false,"immutable":false,"prerelease":false,"created_at":"2021-01-24T17:49:43Z","updated_at":"2021-01-24T18:27:02Z","published_at":"2021-01-24T18:27:02Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/31122319","id":31122319,"node_id":"MDEyOlJlbGVhc2VBc3NldDMxMTIyMzE5","name":"simde-amalgamated-0.7.2.tar.xz","label":null,"uploader":{"login":"nemequ","id":1151,"node_id":"MDQ6VXNlcjExNTE=","avatar_url":"https://avatars.githubusercontent.com/u/1151?v=4","gravatar_id":"","url":"https://api.github.com/users/nemequ","html_url":"https://github.com/nemequ","followers_url":"https://api.github.com/users/nemequ/followers","following_url":"https://api.github.com/users/nemequ/following{/other_user}","gists_url":"https://api.github.com/users/nemequ/gists{/gist_id}","starred_url":"https://api.github.com/users/nemequ/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemequ/subscriptions","organizations_url":"https://api.github.com/users/nemequ/orgs","repos_url":"https://api.github.com/users/nemequ/repos","events_url":"https://api.github.com/users/nemequ/events{/privacy}","received_events_url":"https://api.github.com/users/nemequ/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":243868,"digest":null,"download_count":2178,"created_at":"2021-01-24T18:36:03Z","updated_at":"2021-01-24T18:36:04Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.7.2/simde-amalgamated-0.7.2.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.2","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.2","body":"# Summary\r\n\r\nPost v0.7.0 fixes; more portable implementations of neon intrinsics\r\n\r\n# Details\r\n- common: fix SIMDE_FLOAT64_C macro when SIMDE_FLOAT64_TYPE is defined 1d28a5d @rosbif\r\n- complex: split complex math out into separate header 0678336 @nemequ\r\n- diagnostic: silence a few -Weverything diagnostics on clang < 5 6f8d285 @nemequ\r\n\r\n## Implementation of NEON intrinsics:\r\n- neon/ceq: implement vceq{s_f32,d_f64} f4f42dc @nemequ\r\n- neon/abd: trivial formatting fix 0b8c8ca @nemequ\r\n- neon/abd: add missing scalar functions 517a613 @nemequ\r\n- neon/abs: add vabsd_s64 4091e3e @nemequ\r\n- neon/abs: vabsd_s64 wasn't added to GCC until 9.1.0 52051cb @nemequ\r\n- neon/add: implement vaddd_s64 and vaddd_u64 03d4d1b @nemequ\r\n- neon/cagt: implement vcagt{s_f32,d_f64} 731cf71 @nemequ\r\n- neon/c{ge,gt,le,lt}: some improved 64-bit comparisons 97f4dfb @nemequ\r\n- neon/ext: work around bug in GCC prior to 9.0 0c29a5f @nemequ\r\n- neon/padd: vpadd_f32 was buggy in older clang versions 623cbf7 @nemequ\r\n- neon/rnd: add NaN and ties to test suite fa950a2 @nemequ\r\n- neon/rndm: initial implementation 5bf93ad @nemequ \r\n- neon/rndn: initial implementation 2c624b5 @nemequ\r\n- neon/rndp: initial implementation 7f1f499 @nemequ\r\n- neon/uqadd: clang prior to 9 used incorrect types for the scalar funcs fa0eca0 @nemequ\r\n- neon/uzp1,neon/uzp2: change some dependencies from SSE to SSE2 c00a0e5 @rosbif\r\n\r\n## x86 intrinsics\r\n\r\n### SSE*\r\n- sse: fix overflow handling for simde_mm_cvt_ss2si a4658d8 @mr-c\r\n- sse: add SIMDE_MM_{GET,SET}_FLUSH_ZERO_MODE 340bf13 @nemequ\r\n- sse, sse2: add range checks to several conversion functions c3d7abf @nemequ\r\n- sse2: update test for simde_mm_set1_epi32 8854ede @nemequ\r\n- sse2: fix armv7 NEON implementation for simde_mm_shufflehi_epi16 338dac0 @nemequ\r\n- sse2: change some dependencies from SSE to SSE2 c00a0e5 @rosbif\r\n- sse2: fix potentially unused variable in loadu functions f43bfed @nemequ\r\n- sse2: use void* for destinations of loadu functions 98c63ae @nemequ\r\n- sse4.1: check for SHUFFLE_VECTOR before using it in _mm_cvtepu32_epi64 cb73aec @nemequ\r\n- sse4.2: some improved 64-bit comparisons 97f4dfb @nemequ\r\n\r\n### AVX\r\n- avx: use void* for destinations of loadu functions 98c63ae @nemequ\r\n\r\n### AVX512\r\n- permutex2var: fix some signed/unsigned mismatch warnings 951caa1 @nemequ\r\n- avx512/s{r,l}li: the imm8 paramters should be unsigned ecc388d @nemequ\r\n\r\n### XOP\r\n- xop: initial implementation 6cc0cef @nemequ\r\n- xop: add a bunch of NEON implementations b602fbc @nemequ\r\n- xop: fix NEON implementation of simde_mm_maccsd_epi16 8d499b5 @nemequ\r\n\r\n## Testing with Docker/Podman & CI\r\n- docker: add gdb and valgrind to installed packages 4500040 @nemequ\r\n- ci: move icc build from Travis to GitHub Actions 712f01a @nemequ\r\n- gh-actions: run on pull requests 43e7053 @mr-c\r\n- drone: re-organize drone builds 73fe36a @nemequ\r\n- drone: adjust branch triggers 9eba966 @nemequ \r\n- README: update CI information ca440ae @nemequ\r\n- circleci: add Circle CI 5d5350c @nemequ\r\n- circleci: actually build in 32-bit mode 4267926 @nemequ\r\n- cirrus: add Cirrus CI support 0212a07 @nemequ\r\n- cirrus: run asan/ubsan instead of just another GCC build a1c9f1d @nemequ\r\n- docker: allow for an optional persistent build directory 610fa3d @nemequ\r\n- gh-actions, semaphore: move GCC and clang builds to Semaphore 49d0d82 @nemequ\r\n- ci: disable ci/* builds for various providers 28f8775 @nemequ\r\n- travis: disable all builds 687851b @nemequ\r\n\r\n## Misc\r\n- cmake: don't explicitly list source files in the x86 directory 88c6f7e @nemequ \r\n- meson: link to libm if available 251bc0d @nemequ\r\n- simde-align: allow alignment > 8 on MSVC ≥ 19.16 (VS 2017) 0968271 @jsbache\r\n- README: fix a couple of outdated links 6001182 @nemequ"},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/35747575","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/35747575/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/35747575/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.0","id":35747575,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM1NzQ3NTc1","tag_name":"v0.7.0","target_commitish":"master","name":"SIMDe 0.7.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-12-26T17:25:57Z","updated_at":"2021-01-05T14:57:55Z","published_at":"2020-12-27T12:37:29Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/31120983","id":31120983,"node_id":"MDEyOlJlbGVhc2VBc3NldDMxMTIwOTgz","name":"simde-amalgamated-0.7.0.tar.xz","label":null,"uploader":{"login":"nemequ","id":1151,"node_id":"MDQ6VXNlcjExNTE=","avatar_url":"https://avatars.githubusercontent.com/u/1151?v=4","gravatar_id":"","url":"https://api.github.com/users/nemequ","html_url":"https://github.com/nemequ","followers_url":"https://api.github.com/users/nemequ/followers","following_url":"https://api.github.com/users/nemequ/following{/other_user}","gists_url":"https://api.github.com/users/nemequ/gists{/gist_id}","starred_url":"https://api.github.com/users/nemequ/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemequ/subscriptions","organizations_url":"https://api.github.com/users/nemequ/orgs","repos_url":"https://api.github.com/users/nemequ/repos","events_url":"https://api.github.com/users/nemequ/events{/privacy}","received_events_url":"https://api.github.com/users/nemequ/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":235132,"digest":null,"download_count":20,"created_at":"2021-01-24T17:31:16Z","updated_at":"2021-01-24T17:31:17Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.7.0/simde-amalgamated-0.7.0.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.0","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.0","body":"# Version 0.7.0 Summary\r\n\r\n* Portable implementation of the NEON intrinsics: [57% finished](https://gist.github.com/nemequ/fe2f276e1e7d33659cbf77ae0d5526be)\r\n* Some more WASM implementations of x86 intrinsics\r\n* Various SSE*, AVX*, and SVML enhancements\r\n* Various new and improved implementations for AltiVec, Neon, POWER architectures.\r\n* The \"new\" SSE2 `_mm_{load,store}u_si{16,32,64}` intrinsics are now implemented along with the SSE `_MM_HINT_*` defines.\r\n* All of the CLMUL intrinsics have been implemented. [\"CLMUL_instruction_set\" Wikipedia](https://en.wikipedia.org/wiki/CLMUL_instruction_set); [CLMUL @ Intel Intrinsics Guide](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=682,682&othertechs=PCLMULQDQ).\r\n\r\nPlease see the [0.7-rc-1](https://github.com/simd-everywhere/simde/releases/tag/v0.7.0-rc-1) and [0.7.0-rc2](https://github.com/simd-everywhere/simde/releases/tag/v0.7.0-rc2) release notes for more details.\r\n\r\n# Changes since 0.7.0-rc2\r\n\r\n## Implementation of NEON intrinsics:\r\n\r\nneon/orn: add AVX-512VL (ternarylogic) implementations d667aa8 @nemequ\r\nneon/ld3, neon/ld4: disable -Wmaybe-uninitialized on GCC eaaa71f @nemequ\r\n\r\n## x86 intrinsics\r\n\r\n### SSE*\r\n\r\nsse: cast `_MM_HINT_*` values to enum `_mm_hint` on GCC 3f7e6f7 @nemequ\r\n\r\n### AVX512\r\n\r\navx512/permutex2var: add remaining intrinsics and translations 5d8d9d2 \r\n\r\n## Misc\r\n\r\nmath: add modf 580e401 @nemequ\r\n\r\nCleanups of `SIMDE_BUG_*` definitions e090746 @mr-c\r\n\r\n"},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/35609315","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/35609315/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/35609315/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.0-rc2","id":35609315,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM1NjA5MzE1","tag_name":"v0.7.0-rc2","target_commitish":"master","name":"SIMDe v0.7.0-rc2","draft":false,"immutable":false,"prerelease":true,"created_at":"2020-12-22T11:18:12Z","updated_at":"2020-12-22T11:20:32Z","published_at":"2020-12-22T11:20:32Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.0-rc2","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.0-rc2","body":"# Summary\r\n\r\n[2 issues found in SIMDe v0.7-rc-1](https://github.com/simd-everywhere/simde/milestone/2?closed=1) via testing on Debian Experimental on the Debian release architectures (amd64, arm64, armel, armhf, i386, mips64el, mipsel, ppc64el, s390x) have been fixed.\r\n\r\nVarious new and improved implementations for AltiVec, Neon, POWER architectures.\r\n\r\nThe \"new\" SSE2 `_mm_{load,store}u_si{16,32,64}` intrinsics are now implemented along with the SSE `_MM_HINT_*` defines.\r\n\r\nAll of the x86 CLMUL intrinsics have been implemented [Wikipedia](https://en.wikipedia.org/wiki/CLMUL_instruction_set) [Intel Intrinsics Guide](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#expand=682,682&othertechs=PCLMULQDQ).\r\n\r\n# Details\r\n\r\n## Implementation of NEON intrinsics:\r\n\r\nneon/cnt: `_vcntq_s8` & `_vcntq_u8`, add AltiVec implementations 1d56b8c @nemequ\r\nneon/shr_n: `_vshrq_n_s8`, avoid shift-negative-value diagnostics 26aeda4 @rosbif\r\nneon/bic: `_vbicq_s8` & `_vbicq_s64`, correct PPC implementations 2779ba0 @rosbif\r\nneon/ld3: disable -Wmaybe-uninitialized on GCC < 10 c97093f @nemequ\r\nneon/ld3: load entire vectors sequentially 4097372 @nemequ\r\nneon/bsl, neon/mvn: use ternary logic on AVX-512VL 1660b73 @nemequ\r\n\r\n## SVML\r\n\r\nsvml: add fallbacks on shorter functions to div/rem/hypot/erfc (#598) 9199002 @himanshi18037\r\n\r\n## x86 intrinsics\r\n\r\nfeatures: GFNI needs <immintrin.h> 80a2e3d @rosbif\r\n\r\n### SSE*\r\n\r\nsse: correct POWER versions in `_mm_cmpunord_ps`, add POWER6 version. 2b851a5 @rosbif\r\nsse: correct PPC P5 to P6 in `_mm_store_ps` f889439 @rosbif\r\nsse: include `_MM_HINT_*` defines, test for `_mm_prefetch` 6b2a873 @mr-c @nemequ\r\nsse: added NEON impl for `_mm_shuffle_ps` @masterchef2209 1777224\r\nsse: work around missing `vrndiq_f32` on GCC on armv8 with NEON b56248b @nemequ\r\n\r\nsse, sse2: use ternary logic on AVX-512VL for NOT functions 97ac0a5 @nemequ\r\n\r\nsse2: fix rounding of `_mm_cvtps_epi32` on POWER on clang 0e60b5f @nemequ\r\nsse2: implement the new instructions `_mm_{load,store}u_si{16,32,64}` b7f467f @nemequ\r\nsse2: added NEON impl for `_mm_shuffle_epi32`, `_mm_shuffle{lo,hi}_epi16` 8525eba `_mm_mul_su32` 5102af0 `_mm_cvtsd_f64` 6800867 @masterchef2209\r\n\r\nsse4.1: regenerate `_mm_dp_ps` test to avoid rare rounding difference 8358e3c @nemequ\r\n\r\n### AVX / AVX2\r\n\r\nNormalize `SIMDE_NATURAL_VECTOR_SIZE` usage 98213b3 @mr-c\r\n\r\n### AVX512\r\n\r\navx512/test: implement `_mm512{,_mask}_test_epi{8,16,32,64}_mask` ab6c230 @rosbif\r\navx512/kshift: implement `_kshift[lr]i_mask{8,16,32,64}` 6bf0dfd @rosbif\r\navx512/shuffle: implement `_mm512_{,mask_,maskz_}shuffle_[fi]{32x4,64x2}` e5352c3 @rosbif\r\nAdd defines for AVX512VBMI 11c88e2 @rosbif\r\navx512/permutexvar: add `_mm512_{,mask_,maskz_}permutexvar_epi{8,16}` `_mm512_{,mask_,mask2_,maskz_}permutex2var_epi{8,16}` intrinsics b341db7 35c0e5d @rosbif\r\navx512/permutexvar: many AVX, SSE, NEON, PPC, and WASM implementations c2aa66b @rosbif\r\navx512/permutexvar: add 128- and 256-bit intrinsics and translations 7ff4af6 @rosbif\r\n\r\n### CLMUL\r\n\r\nAll CLMUL intrinsics implemented including `_mm_clmulepi64_si128` 7ced766 @nemequ\r\ndon't use `__builtin_shufflevector` on XLC 52848ad @nemequ\r\nremove ' && 0' which I accidentally left in place fedae0b @nemequ\r\nwork around mscv warning-turned-error 91fe7f4 @mr-c\r\n\r\n## Testing with Docker/Podman & CI\r\n\r\ndocker: use an argument for selecting the release eaee500 @nemequ\r\ndocker: add crypto and CRC to GCC 10 cross file ca05a1f @nemequ\r\ndocker: replace clang-8 cross file with one for clang-11 c326808 @nemequ\r\n\r\n## Misc\r\n\r\nmeson: bump version to 0.7.0-rc.1 ed4d5a0 @mr-c\r\nCONTRIBUTING: switch documentation from CMake to Meson. 15f0e24 @nemequ\r\ndrone: use Ubuntu instead of Fedora for AArch64 build c5945ca @nemequ\r\nupdate icc package name for oneapi gold release 820f684 @rscohn2\r\nDocument minimum GCC version for -fopenmp-simd 01c7aeb @mr-c\r\nGitHub Actions CI: adjust macOS versions ad6e881 @mr-c"},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/34264518","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/34264518/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/34264518/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.7.0-rc-1","id":34264518,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTM0MjY0NTE4","tag_name":"v0.7.0-rc-1","target_commitish":"master","name":"v0.7.0-rc-1","draft":false,"immutable":false,"prerelease":true,"created_at":"2020-11-21T07:30:08Z","updated_at":"2020-11-25T08:42:18Z","published_at":"2020-11-21T14:14:26Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.7.0-rc-1","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.7.0-rc-1","body":"# Summary\r\n\r\nPortable implementation of the NEON intrinsics: [57% finished](https://gist.github.com/nemequ/fe2f276e1e7d33659cbf77ae0d5526be)\r\nSome more WASM implementations of x86 intrinsics\r\nVarious SSE*, AVX*, and SVML enhancements\r\n\r\n# Details\r\n\r\n## Implementation of NEON intrinsics:\r\nneon/min: correctly handle (and test) NaNs 07d3a1f @nemequ\r\nneon/zip1: add MMX/SSE, AltiVec, and shuffle vector implementations 56b9205 @nemequ \r\nneon/zip2: add AltiVec, SSE, shuffle vector, etc. implementations f7f36e0 @nemequ \r\nneon/uzp1, neon/uzp2: add AltiVec, SSE, shuffle, etc. implementations 7bcfd75 @nemequ \r\nneon/shl: use SIMDE_POWER_ALTIVEC_BOOL instead of bool aadf0ff @nemequ \r\nneon/addv: initial implementation 49681b6 @nemequ \r\nneon/aba: initial implementation 22c27ec @nemequ \r\nneon/abdl: initial implementation  84c2167 @nemequ \r\nneon/addlv: initial implementation 6b17af2 @nemequ \r\nneon/bic: initial implementation 76d755c @nemequ\r\nneon/bic: add x86, WASM, and AltiVec implementations 9379e5c @nemequ\r\nneon/cnt: initial implementation b15352c @nemequ\r\nneon/hadd: initial implementation 5da4667 @nemequ\r\nneon/hsub: initial implementation 19454d3 @nemequ\r\nneon/maxv: initial implementation a5522ba @nemequ\r\nneon/minv: initial implementation d241170 @nemequ\r\nneon/mls: initial implementation 08a3957 @nemequ\r\nneon/mlsl: initial implementation fd2d782 @nemequ\r\nneon/mull_high: initial implementation c50c836 @nemequ\r\nneon/mlsl_high: initial implementation 93276e0 @nemequ \r\nneon/rbit: add GFNI implementations of vrbit functions fad5a93 @nemequ \r\nneon/dup_lane: initial implementation 2a063f1 @nemequ\r\nneon/orn: initial implementation d788736 @nemequ\r\nneon/bic: fix search & replace error in license 6a1664c @nemequ\r\nneon/qneg: initial implementation 93d6999 @nemequ \r\nneon/maxnm: initial implementation 928834a @nemequ\r\nneon/max: add NaN tests, fix implementations 0d69e18 @nemequ \r\nneon/minv: fix NaN handling, add relevant tests 73044a5 @nemequ\r\nneon/qadd: add scalar functions and the tests to go with them 25f398c @nemequ\r\nneon/qabs: initial implementation fc38506 @nemequ\r\nneon/qneg: add scalar functions and tests 1bf6283 @nemequ \r\nneon/clz: initial implementation c8d74a5 @nemequ \r\nneon/clz: add GFNI implementation of 8x8 functions 7fd22a9 @nemequ\r\nneon/minnm: initial implementation fbd0fd0 @nemequ\r\nneon/uzp1, neon/uzp2: add vuzp{,q}_* implementations for armv7 1d09549 @nemequ\r\nneon/subw: initial implementation 0008eb3 @nemequ\r\nneon/subw_high: initial implementation 4935cd4 @nemequ\r\nneon/addw_high: initial implementation adf12f2 @nemequ\r\nneon/uqadd: initial implementation 451136b @nemequ\r\nneon/mul_lane: initial implementation 92e9df1 @nemequ\r\nneon/mlsl_n: initial implementation 72497e7 @nemequ\r\nneon/cls: initial implementation e6dde92 @nemequ\r\nneon/qshl: initial implementation b266b2b @nemequ\r\nneon/max: fix unsafe SSE2 implementation of vmaxq_f64 b45b259 @nemequ \r\nneon/minnm, neon/maxnm: correct C&P errors in floating point functions 6958298 @rosbif\r\nneon/shl_n, neon/shr_n: add GFNI-based 8-bit shifts 177e5e1 @nemequ\r\nneon/movn_high: initial implementation 0e3e3fd @nemequ\r\nneon/rnd: initial implementation 1bbc67e @nemequ \r\nneon: fix detection of A32 functionality 8ff3a8f @nemequ\r\nneon/mlal_n: initial implementation 7a2f504 @nemequ \r\nneon/qsub: initial implementation 6db7032 @nemequ \r\n\r\n## SVML\r\nsvml: add shorter fallbacks for remaining functions 4400413 @nemequ\r\nsvml: GCC bug #53784 also occurs on s390x 5c2d66f @nemequ\r\nsvml: fix portable fallback for simde_x_mm512_deg2rad_{pd,ps} d33d0c7 @nemequ \r\nsvml: more work-arounds for GCC bug #53784 615ba1b @nemequ \r\n\r\n## x86 intrinsics\r\n\r\nFix compilation failures when targeting 32-bit x86 with >= SSE2 25b5fbc 82d0065 @nemequ\r\ntest/x86: add test_simde_mm{,256}_mask{,z}_xxx_epi{8,16} to skel f1c824f @ashnewmanjones\r\ntest/x86: add NaN test case generation functions to x86 d3384dd @nemequ \r\nx86: add SIMDE_REQUIRE{,_CONSTANT}_RANGE macros to many functions 396a018 @ashnewmanjones\r\n\r\n### MMX\r\n\r\nmmx: fix NEON implementation of `_mm_srai_pi16` 7c416cf @nemequ\r\nmmx: work around some clang <= 11 bugs on POWER9 99c0b39 @nemequ\r\n\r\n### SSE*\r\n\r\nsse/sse2/ssse3: more WASM implementations: `_mm_srli_epi{16,32,64}` `_mm_srl_epi{32,64}` 63e63ed `_mm_cvt{epi32,si32,si64,si128}_*` dd21f30 `_mm_sra{,i}_epi{16,32}` 3bd7ea9 mm_cmp{un}ord_ps ef06821 simde_mm_sign_epi{8,16,32} 55c5619  @masterchef2209\r\nsse2: add WASM implementation of `_mm_unpackhi_pd` 4cd0b90 @zekehul\r\nsse, neon/abs: `_mm512_abs_ps` was introduced in GCC 7.1 fb2a06f @milot-mirdita\r\nsse2: simde_x_mm_abs_pd throws cast errors before GCC 7.4 f70e34c @milot-mirdita\r\nsse2: fix NEON simde_mm_cmp_pd implementation 8bc8b12 @nemequ \r\nsse, sse2: add several AltiVec, WASM, and NEON implementations 08db479 @nemequ\r\nsse: add `__builtin_nontemporal_store` version of simde_mm_stream_ps 9a8001e @nemequ\r\nsse2: rewrite the NEON implementation of simde_mm_sad_epu8 c520b2d @nemequ \r\nsse2: improve simde_mm_madd_epi16 NEON & AltiVec implementations 55f703f @nemequ\r\nsse4.1: add SSE2 and shuffle-based fallbacks for `_mm_cvtepi*_epi*` 197610c @nemequ\r\nsse4.1: improve AArch64 `_mm_dp_{ps,pd}` implementations 3ebf82f @nemequ\r\nsse: fix NaN handling for` _mm_max_ps`, update test case 15aa0c4 @nemequ\r\nsse2: add shuffle-based implementation of `_mm_mul_epu32` e2da067 @nemequ\r\nsse2: improve NEON implementations of `_mm_mulhi_ep{i,u}`16 f7546c7 @nemequ\r\nsse3: improve some NEON implementations 444cae1 @nemequ\r\nssse3: formatting fixes a560e2e @nemequ\r\nssse3: improve some NEON implementations 858d169 @nemequ \r\nsse3: armv7 implementations of deinterleave functions fa158d1 @nemequ\r\nsse3: improve NEON implementation of hadd/hsub functions d9e860e @nemequ\r\nssse3: many new or improved NEON implementations of pairwise functions 94b9c2f @nemequ\r\nsse2: add missing mm_cmpngt_{pd,sd} 8a2d249 @ktgw0316\r\nsse, sse2, sse4.1: fix ties-toward-even rounding 3208aeb @nemequ \r\nsse4.1: better testing of `_mm_round_ps` b6a7310 @nemequ\r\nsse: add simde_x_mm_round_ps with lax_rounding argument 24e5926 @nemequ \r\n\r\n### AVX\r\navx: require x86_64 for `_mm256_insert_epi64` 82d0065 @nemequ\r\navx: simplify some broadcast functions bbcba0a @nemequ\r\navx, avx512: add missing undef directives for native aliases bb944be @nemequ\r\n\r\n### AVX2\r\navx2: squash clang -Weverything warning in portabl `_mm256_movemask_epi8` f3de4d9 @nemequ\r\navx2: add NEON and 128-bit implementations of several shift functions 31fe86d @nemequ\r\navx2, avx512/madd: add non-vector fallbacks 90503ed @nemequ\r\navx2: add some fallbacks on 128-bit functions 080c2e6 @nemequ\r\n\r\n### AVX512\r\navx512: refactor AVX-512 implementations to be structured like NEON bc7bfdc @nemequ\r\navx512/add: implement simde_mm_mask{,z}_add_ss d4bb2ad @himanshi18037\r\navx512/add: `_mm_mask{,z}_add_ss` was not available in GCC until 8.1 4af1c3a @nemequ\r\navx512/broadcast: correct feature checks for several functions 17f11f7 @nemequ\r\navx512: correct many feature tests 344a666 @nemequ\r\ngh-actions: add avx512 builds face9ad @nemequ\r\navx512/extract: work around ICE on GCC 6 249d926 @nemequ\r\navx512/s{l,r}li: use CONSTIFY macros on certain GCC versions 9ecf9f2 @nemequ\r\navx512/s{l,r}li: add missing native versions of `_mm512_s{l,r}li_epi16` 239d484 @nemequ\r\navx512/add: fix simde_mm_mask{,z}_add_ss 12a2b5c @nemequ\r\navx512/extract: work around GCC 6 ICE fffe70f @nemequ\r\ntest/avx512: fix function for writing mmask variables 8c806d3 @nemequ \r\navx512/srl: fix portable fallbacks ffb8515  @nemequ\r\navx512/fm*: fix typo in portable `_mm512_fm*_{ps,pd}` fallbacks 119de0b @nemequ\r\navx512/loadu: add remaining loadu functions and tests cfe173d @nemequ\r\navx512/mov_mask: implement simde_mm{,256}_movepi{8,16,32,64}_mask e54dde8 @nemequ \r\navx512/srlv: add simde_mm512_srlv_epi{32,64} e253dff @anrodrig\r\navx512/srlv: implement several srlv functions and tests d05d2eb @nemequ\r\navx512/blend: implement remaining blend functions 16d99c3 @nemequ\r\navx, avx512: add missing undef directives for native aliases bb944be @nemequ\r\navx512/fma: use fmaf instead of fma fol 32-bit floats f578fd5 @nemequ\r\navx512/div: add 256-bit fallbacks abfb353 @nemequ\r\navx512bw: implement mm512_mask{,z}_unpackhi_epi{8,16} 0484698 @ashnewmanjones\r\navx512/avg: implement simde_mm_mask{,z}_avg_epu{8,16} 542c52b @himanshi18037\r\navx512/setzero: add mm512_setzero_p{s,d} tests a26d3d1@ashnewmanjones\r\navx512/set: add mm512_set_{epi{8,16,32,64},pd} tests 305e134 @ashnewmanjones\r\navx512vp2intersect: initial implementation a67e1be @ashnewmanjones\r\navx512/madd: initial implementation e8882b9 @ashnewmanjones\r\navx2, avx512/madd: add non-vector fallbacks 90503ed @nemequ\r\navx512/maddubs: implement maddubs functions 42ca3bd @ashnewmanjones\r\navx512/sll: add simde_mm512_mask{,z}_sll_epi16 functions 26ac148 @ashnewmanjones\r\navx512/avg: implement remaining avg functions abf7bd2  @ashnewmanjones\r\navx512/abs: add fallbacks on shorter vectors c82542d @nemequ\r\navx512/abs: add NEON and AltiVec implementations b47f166 @nemequ\r\n\r\n### GFNI \r\n\r\ngfni: lower requirements for some functions 5dba288 @nemequ \r\n\r\n## Testing with Docker/Podman & CI\r\n\r\ntest: add code to generate special vectors for better coverage d0be929 @nemequ\r\n\r\nazure-pipelines: add commented out loongson build b860895 @nemequ \r\n\r\ntravis: add gcc-6 and clang-3.5 builds 721c925 @nemequ\r\ntravis: use GCC 10 for AArch64 build b3a1794 @nemequ\r\ntravis: Add MIPS Loongson-MMI (Compile Only) 6537329 @FlyGoat\r\ntravis: new package name for intel oneapi beta10 6f6a0b1 @rscohn2\r\n\r\ngh-actions: add avx512 builds face9ad @nemequ \r\ngh-actions: disable xcode 10.3 build fe52903 @nemequ\r\ngh-actions: update repo before (trying to) install pcre2grep e92f9ae @nemequ\r\ngh-actions: read /proc/cpuinfo 8b3b405 @nemequ \r\n\r\ntesting with docker improvements a5c5826 c0c8c01 cf0cf14 @nemequ\r\ndocker: assorted clean-ups and documentation improvements a5c5826 @nemequ\r\ndocker: add 32-bit x86 builds c0c8c01 0d5a036 @nemequ \r\ndocker: add POWER clang builds cf0cf14 @nemequ\r\ndocker: add loongson and mips64el+msa builds c30b910 @nemequ\r\ndocker: add -future flag to sdl in docker .cross files e6b2a7f @ashnewmanjones\r\ndocker: update icc package name for OneAPI beta 10 51b0674 @nemequ\r\ndocker: fix image build error and deprecation warning from apt-key 0293433 @ashnewmanjones\r\ndocker: OSTYPE requires BASH and --cap-add is for podman only 68df537 @mr-c\r\ndocker: begin refactorig container to make it a bit more robust 5278473 @nemequ\r\n\r\n## Misc\r\n\r\nREADME: add note about not including native headers 8011ef0 @nemequ\r\nfeatures: improve AltiVec keyword collision work-around 5186166 @nemequ\r\nfeatures: don't fall back on vector funcs if vectors aren't available 00f5b3e @nemequ\r\ncommon: GCC bug #96174 is fixed in 10.2 4fa9106 @nemequ\r\ncommon: don't use simde_assert_aligned on Arm d0da8b4  @nemequ\r\ncommon: add macros for determining builtin suffix be85b51 @nemequ\r\nindentation fixes a2f98fb @nemequ\r\ncmake: emit a warning about CMake support being deprecated 8cb5496 use directory contents for list of NEON tests e0e9e31 @nemequ\r\ndetect-clang: add a check for clang-12 2c5c3ea @nemequ \r\narch: Add MIPS Loongson-MMI f1c853d @FlyGoat\r\nalign: replace alignment API c136867 6beefe1 c1fc2d4 f96a762 d16fb03 @nemequ\r\nWork around bug(s?) in clang 10. 9ab446a @nemequ\r\nmath: move saturated addition function into math 754c8f4 @nemequ \r\nEnable many previously disabled implementations. e7bbdc8 @nemequ "},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/30060553","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/30060553/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/30060553/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.6.0","id":30060553,"author":{"login":"mr-c","id":1330696,"node_id":"MDQ6VXNlcjEzMzA2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/1330696?v=4","gravatar_id":"","url":"https://api.github.com/users/mr-c","html_url":"https://github.com/mr-c","followers_url":"https://api.github.com/users/mr-c/followers","following_url":"https://api.github.com/users/mr-c/following{/other_user}","gists_url":"https://api.github.com/users/mr-c/gists{/gist_id}","starred_url":"https://api.github.com/users/mr-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mr-c/subscriptions","organizations_url":"https://api.github.com/users/mr-c/orgs","repos_url":"https://api.github.com/users/mr-c/repos","events_url":"https://api.github.com/users/mr-c/events{/privacy}","received_events_url":"https://api.github.com/users/mr-c/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTMwMDYwNTUz","tag_name":"v0.6.0","target_commitish":"master","name":"v0.6.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-08-24T02:11:52Z","updated_at":"2020-08-24T15:52:33Z","published_at":"2020-08-24T15:50:17Z","assets":[{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/assets/24255684","id":24255684,"node_id":"MDEyOlJlbGVhc2VBc3NldDI0MjU1Njg0","name":"simde-amalgamated-0.6.0.tar.xz","label":null,"uploader":{"login":"nemequ","id":1151,"node_id":"MDQ6VXNlcjExNTE=","avatar_url":"https://avatars.githubusercontent.com/u/1151?v=4","gravatar_id":"","url":"https://api.github.com/users/nemequ","html_url":"https://github.com/nemequ","followers_url":"https://api.github.com/users/nemequ/followers","following_url":"https://api.github.com/users/nemequ/following{/other_user}","gists_url":"https://api.github.com/users/nemequ/gists{/gist_id}","starred_url":"https://api.github.com/users/nemequ/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemequ/subscriptions","organizations_url":"https://api.github.com/users/nemequ/orgs","repos_url":"https://api.github.com/users/nemequ/repos","events_url":"https://api.github.com/users/nemequ/events{/privacy}","received_events_url":"https://api.github.com/users/nemequ/received_events","type":"User","user_view_type":"public","site_admin":false},"content_type":"application/x-xz","state":"uploaded","size":200508,"digest":null,"download_count":51,"created_at":"2020-08-25T05:20:55Z","updated_at":"2020-08-25T05:20:56Z","browser_download_url":"https://github.com/simd-everywhere/simde/releases/download/v0.6.0/simde-amalgamated-0.6.0.tar.xz"}],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.6.0","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.6.0","body":"379 commits from 9 contributors, changing 273 files!\r\n\r\n[Full changelog](https://github.com/simd-everywhere/simde/compare/v0.5.0...v0.6.0)"},{"url":"https://api.github.com/repos/simd-everywhere/simde/releases/27800002","assets_url":"https://api.github.com/repos/simd-everywhere/simde/releases/27800002/assets","upload_url":"https://uploads.github.com/repos/simd-everywhere/simde/releases/27800002/assets{?name,label}","html_url":"https://github.com/simd-everywhere/simde/releases/tag/v0.5.0","id":27800002,"author":{"login":"nemequ","id":1151,"node_id":"MDQ6VXNlcjExNTE=","avatar_url":"https://avatars.githubusercontent.com/u/1151?v=4","gravatar_id":"","url":"https://api.github.com/users/nemequ","html_url":"https://github.com/nemequ","followers_url":"https://api.github.com/users/nemequ/followers","following_url":"https://api.github.com/users/nemequ/following{/other_user}","gists_url":"https://api.github.com/users/nemequ/gists{/gist_id}","starred_url":"https://api.github.com/users/nemequ/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nemequ/subscriptions","organizations_url":"https://api.github.com/users/nemequ/orgs","repos_url":"https://api.github.com/users/nemequ/repos","events_url":"https://api.github.com/users/nemequ/events{/privacy}","received_events_url":"https://api.github.com/users/nemequ/received_events","type":"User","user_view_type":"public","site_admin":false},"node_id":"MDc6UmVsZWFzZTI3ODAwMDAy","tag_name":"v0.5.0","target_commitish":"master","name":"0.5.0","draft":false,"immutable":false,"prerelease":false,"created_at":"2020-06-22T16:32:27Z","updated_at":"2020-06-22T19:12:34Z","published_at":"2020-06-22T19:12:34Z","assets":[],"tarball_url":"https://api.github.com/repos/simd-everywhere/simde/tarball/v0.5.0","zipball_url":"https://api.github.com/repos/simd-everywhere/simde/zipball/v0.5.0","body":"I’m pleased to announce the availability of the first release of [SIMD\r\nEverywhere](https://github.com/simd-everywhere/simde) (SIMDe),\r\n[version 0.5.0](https://github.com/simd-everywhere/simde/releases),\r\nrepresenting more than three years of work by over a dozen developers.\r\n\r\nSIMDe is a permissively-licensed (MIT) header-only library which\r\nprovides fast, portable implementations of\r\n[SIMD](https://en.wikipedia.org/wiki/SIMD) intrinsics for platforms\r\nwhich aren’t natively supported by the API in question.\r\n\r\nFor example, with SIMDe you can use\r\n[SSE](https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions) on\r\n[ARM](https://en.wikipedia.org/wiki/ARM_architecture),\r\n[POWER](https://en.wikipedia.org/wiki/IBM_POWER_instruction_set_architecture),\r\n[WebAssembly](https://webassembly.org/), or almost any platform with a\r\nC compiler.  That includes, of course, x86 CPUs which don't support\r\nthe ISA extension is question (*e.g.*, calling AVX-512F functions on a\r\nCPU which doesn't natively support them).\r\n\r\nIf the target natively supports the SIMD extension in question there\r\nis no performance penalty for using SIMDe.  Otherwise, accelerated\r\nimplementations, such as NEON on ARM, AltiVec on POWER, WASM SIMD on\r\nWebAssembly, etc., are used when available to provide good\r\nperformance.\r\n\r\nSIMDe has already been used to port several packages to additional\r\narchitectures through either upstream support or distribution\r\npackages, [particularly on\r\nDebian](https://wiki.debian.org/SIMDEverywhere).\r\n\r\nIf you'd like to play with SIMDe online, you can do so [on Compiler\r\nExplorer](https://simde.netlify.app/godbolt/demo).\r\n\r\n## What is in 0.5.0\r\n\r\nThe 0.5.0 release is SIMDe’s first release.  It includes complete\r\nimplementations of:\r\n\r\n * MMX\r\n * SSE\r\n * SSE2\r\n * SSE3\r\n * SSSE3\r\n * SSE4.1\r\n * AVX\r\n * FMA\r\n * GFNI\r\n\r\nWe also have rapidly progressing implementations of many other\r\nextensions including NEON, AVX2, SVML, and several AVX-512 extensions\r\n(AVX-512F, AVX-512BW, AVX-512VL, etc.).\r\n\r\nAdditionally, we have an extensive test suite to verify our\r\nimplementations.\r\n\r\n## What is coming next\r\n\r\nWork on SIMDe is proceeding rapidly, but there are a lot of functions\r\nto implement… x86 alone has about 6,000 SIMD functions, and we’ve\r\nimplemented about 2,000 of them.  We will keep adding more functions\r\nand improving the implementations we already have.\r\n\r\nOur NEON implementation is being worked on very actively right now\r\nby Sean Maher and Christopher Moore, and is expected to continue\r\nprogressing rapidly.\r\n\r\nWe currently have two Google Summer of Code students working on the\r\nproject as well; [Hidayat\r\nKhan](https://masterchef2209.wordpress.com/2020/06/17/guide-to-intel-sse4-2-crc-intrinisics-implementation-for-simde/)\r\nis working on finishing up AVX2, and [Himanshi\r\nMathur](https://medium.com/@himanshi18037) is focused on SVML.\r\n\r\nIf you're interested in using SIMDe but need some specific functions\r\nto be implemented first, please [file an\r\nissue](https://github.com/simd-everywhere/simde/issues/new) and we may\r\nbe able to prioritize those functions.\r\n\r\n## Getting Involved\r\n\r\nIf you're interested in helping out please get in touch.  We have [a\r\nchat room on Gitter](https://gitter.im/simd-everywhere/community)\r\nwhich is fairly active if you have questions, or of course you can\r\njust dive right in on [the issue\r\ntracker](https://github.com/simd-everywhere/simde/issues).\r\n"}]